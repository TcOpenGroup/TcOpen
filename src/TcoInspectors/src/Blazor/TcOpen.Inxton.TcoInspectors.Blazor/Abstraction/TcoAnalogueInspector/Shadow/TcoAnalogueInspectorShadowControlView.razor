@namespace TcoInspectors
@inherits RenderableComplexComponentBase<TcoAnalogueInspector>

@using Vortex.Connector

<div class="card my-3">
    <a data-bs-toggle="collapse" href="#@getID()" role="button" aria-expanded="false" aria-controls="@getID()" style="color: inherit; text-decoration: inherit;">
        <div class="card-header">
            <div class="row align-items-center">
                <div class="col-auto me-5">
                    <h4>@getNameOrSymbol()</h4>
                </div>
                <div class="col">
                    <div class="row">
                        <div class="col-1">
                            <RenderableContentControl Context="@Component._data.RequiredMin" Presentation="ShadowControl" />
                        </div>
                        <div class="col-1">
                            <RenderableContentControl Context="@Component._data.DetectedStatus" Presentation="ShadowControl" />
                        </div>
                        <div class="col-1">
                            <RenderableContentControl Context="@Component._data.RequiredMax" Presentation="ShadowControl" />
                        </div>
                        <div class="col-auto">
                            <RenderableContentControl Context="@Component._data.IsByPassed" Presentation="ShadowControl" />
                        </div>
                        <div class="col-auto">
                            <RenderableContentControl Context="@Component._data.IsExcluded" Presentation="ShadowControl" />
                        </div>
                        <div class="col-auto">
                            <GenericIconView Result="@Component._data.Result.Cyclic" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </a>
    <div class="card-body collapse" id="@getID()">
        <GenericTcoInspectorDataView Data="@Component._data" Presentation="ShadowControl" />
    </div>
</div>

@code{
    private string ID = "-1";

    public string getNameOrSymbol()
    {
        return string.IsNullOrEmpty(Component.AttributeName) ? Component.GetSymbolTail() : Component.AttributeName;
    }

    public string getID()
    {
        if (ID == "-1")
        {
            Random rnd = new Random();
            ID = getNameOrSymbol() + rnd.Next(0, 1000000);
        }
        return ID;
    }
}