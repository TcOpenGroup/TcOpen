@namespace TcoInspectors
@inherits RenderableComplexComponentBase<TcoAnalogueInspector>

@using Vortex.Connector

<div class="card my-3">
    <a data-bs-toggle="collapse" href="#@getID()" role="button" aria-expanded="false" aria-controls="@getID()" style="color: inherit; text-decoration: inherit;">
        <div class="card-header">
            <div class="row align-items-center">
                <div class="row">
                    <h4>@getNameOrSymbol()</h4>
                </div>
                <div class="row">
                    <div class="col-1">
                        <RenderableContentControl Context="@Component._data.RequiredMin" Presentation="ShadowDisplay" />
                    </div>
                    <div class="col-1">
                        <RenderableContentControl Context="@Component._data.DetectedStatus" Presentation="ShadowDisplay" />
                    </div>
                    <div class="col-1">
                        <RenderableContentControl Context="@Component._data.RequiredMax" Presentation="ShadowDisplay" />
                    </div>
                    <div class="col">
                        <div class="progress mt-4">
                            <div class="progress-bar bg-danger" role="progressbar" aria-label="Result" style="width: @getProgressBarValues()[0]; border-radius: 0.4rem 0px 0px 0.4rem; "><div class="text-end me-2">@Component._data.RequiredMin.Cyclic</div></div>
                            <div class="progress-bar bg-sucess" role="progressbar" aria-label="Result" style="width: @getProgressBarValues()[1]"></div>
                            <div class="progress-bar bg-danger" role="progressbar" aria-label="Result" style="width: @getProgressBarValues()[2]; border-radius: 0px 0.4rem 0.4rem 0px; "><div class="text-start ms-2">@Component._data.RequiredMax.Cyclic</div></div>

                            <div class="progress-checkpoint" style="left: @getProgressBarValues()[3];"></div>
                        </div>
                    </div>
                    <div class="col-auto">
                        <RenderableContentControl Context="@Component._data.IsByPassed" Presentation="ShadowDisplay" />
                    </div>
                    <div class="col-auto">
                        <RenderableContentControl Context="@Component._data.IsExcluded" Presentation="ShadowDisplay" />
                    </div>
                    <div class="col-auto">
                        <GenericIconView Result="@Component._data.Result.Cyclic" />
                    </div>
                </div>
            </div>
        </div>
    </a>
    <div class="card-body collapse" id="@getID()">
        <GenericTcoInspectorDataView Data="@Component._data" Presentation="ShadowDisplay" />
    </div>
</div>

@code{
    private string ID = "-1";

    public string getNameOrSymbol()
    {
        return string.IsNullOrEmpty(Component.AttributeName) ? Component.GetSymbolTail() : Component.AttributeName;
    }

    public string getID()
    {
        if (ID == "-1")
        {
            Random rnd = new Random();
            ID = getNameOrSymbol() + rnd.Next(0, 1000000);
        }
        return ID;
    }

    public string[] getProgressBarValues()
    {
        double[] ret = new double[4];

        var stredMM = (Component._data.RequiredMin.Cyclic + Component._data.RequiredMax.Cyclic) / 2.0;
        var stred = (stredMM + Component._data.DetectedStatus.Cyclic) / 2.0;
        var con = Math.Max(Math.Max(Math.Abs(Component._data.RequiredMin.Cyclic), Math.Abs(Component._data.RequiredMax.Cyclic)), Math.Abs(Component._data.DetectedStatus.Cyclic)) + 0.1;
        var min = stred - con;
        var max = stred + con;
        var minMax = max - min;
        ret[0] = Math.Abs(((Component._data.RequiredMin.Cyclic - min) / minMax) * 100.0);
        ret[2] = 100 - Math.Abs(((Component._data.RequiredMax.Cyclic - min) / minMax) * 100.0);
        ret[3] = Math.Abs(((Component._data.DetectedStatus.Cyclic - min) / minMax) * 100.0);

        ret[1] = 100 - (ret[0] + ret[2]);

        ret[0] = (ret[0] / 100.0 * 85.0) + 5;
        ret[1] = (ret[1] / 100.0 * 85.0) + 5;
        ret[2] = (ret[2] / 100.0 * 85.0) + 5;

        return new string[4] { (ret[0].ToString().Replace(',', '.') + "%"), (ret[1].ToString().Replace(',', '.') + "%"), (ret[2].ToString().Replace(',', '.') + "%"), (ret[3].ToString().Replace(',', '.') + "%") };
    }
}

<style>
    .progress {
        position: relative;
        overflow: visible;
    }

    .progress-checkpoint {
        position: absolute;
        margin-top: -10px;
        z-index: 0;
        height: 40px;
        width: 4px;
        background: #000;
        border-radius: 0.5rem;
    }
</style>