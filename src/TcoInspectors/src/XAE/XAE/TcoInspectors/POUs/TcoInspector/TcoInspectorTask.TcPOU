<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="TcoInspectorTask" Id="{8bf66c65-f052-03bb-1601-1a9df2821913}" SpecialFunc="None">
    <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Base block for inspectors.		
		</summary>			
	</docu>	
~*)
FUNCTION_BLOCK TcoInspectorTask EXTENDS TcoCore.TcoTask
VAR
    _inspectionData : REFERENCE TO TcoInspectorData;
    _passTimer      : Tc2_Standard.TON;
    _failTimer      : Tc2_Standard.TON;
    _onDoneFlag     : BOOL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="Execute" Id="{8700576b-bdd5-0679-30a6-961729a33583}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Returns true if the task is Busy, otherwise false.
			This method needs to be called cyclically.
		</summary>			
	</docu>	
~*)
METHOD Execute : BOOL
VAR
	_serviceableParent : ITcoServiceable;
END_VAR

VAR
	tmpTimeDiff : TIME;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_onDoneFlag := FALSE;
Execute := SUPER^.Execute();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{710c74ec-32a3-0d74-17b6-a5feae9c9f39}">
      <Declaration><![CDATA[{attribute 'hide'}
METHOD PUBLIC FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	ParentObject : ITcoObject;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//// Hate to do this guys but I get compile error, seems to be a bug in tc
//]]></ST>
      </Implementation>
    </Method>
    <Property Name="InspectionData" Id="{7b1614a3-ad7e-0fd6-1b5c-a505914f7144}">
      <Declaration><![CDATA[PROPERTY InspectionData : REFERENCE TO TcoInspectorData]]></Declaration>
      <Get Name="Get" Id="{462b576a-aa43-065d-10e6-d50811316469}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[InspectionData REF= _inspectionData;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{fcde9f87-b7a0-0e54-14a0-0cc8dfcc66c8}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_inspectionData REF= InspectionData;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="OnDone" Id="{43aa6ba3-c55d-0859-25a9-24eb083056e8}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Executes when task reaches the ```Done``` state .
		</summary>			
	</docu>	
~*)
METHOD PROTECTED OnDone
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.OnDone();

_inspectionData.RetryAttemptsCount := _inspectionData.RetryAttemptsCount + 1;

IF (_inspectionData.Result = eInspectorResult.Bypassed) THEN
    RETURN;
END_IF;

_inspectionData.TimeStamp := Context.RealTimeClock.NowLocal();
_inspectionData.Result    := eInspectorResult.Failed;

IF (NOT _failTimer.Q AND _passTimer.Q) THEN
    _inspectionData.Result := eInspectorResult.Passed;
END_IF

IF (_inspectionData.IsExcluded) THEN
    _inspectionData.Result := eInspectorResult.Excluded;
END_IF

_onDoneFlag := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Property Name="OnDoneFlag" Id="{75de3f08-d161-0d09-19f5-71c1b98a78d3}">
      <Declaration><![CDATA[PROPERTY OnDoneFlag : BOOL]]></Declaration>
      <Get Name="Get" Id="{892e097c-9b17-081f-0ee8-3b4b1a0a144b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[OnDoneFlag := _onDoneFlag;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="OnStart" Id="{e650f529-4e67-0027-185e-0518bcbd4721}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Executes once when inspection starts.
		</summary>			
	</docu>	
~*)
METHOD PROTECTED OnStart
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.OnStart();

IF (_inspectionData.PassTime = T#0S) THEN
    _inspectionData.PassTime := T#50MS;
END_IF;

IF (_inspectionData.FailTime = T#0S) THEN
    _inspectionData.FailTime := T#100MS;
END_IF;

_inspectionData.Result := eInspectorResult.NoAction;
_passTimer(IN := FALSE, PT := T#0MS);
_failTimer(IN := FALSE, PT := T#0MS);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Restore" Id="{214352c6-868b-0eb6-102f-c5a86531690b}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Restores this instance to the Ready state. Can be called explicitly or from within one of the restore mechanisms.
			<para>
				See also <see cref="PlcDocu.TcoCore.TcoTask.AutoRestorable()"/>
			</para>
		</summary>			
	</docu>	
~*)
METHOD Restore : ITcoRestorable]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.Restore();
_onDoneFlag := FALSE;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>