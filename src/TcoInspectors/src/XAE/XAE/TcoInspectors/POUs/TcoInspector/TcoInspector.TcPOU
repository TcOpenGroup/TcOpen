<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="TcoInspector" Id="{cdcabed1-7ff8-095e-24f6-ca93f0ca4004}" SpecialFunc="None">
    <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Base block for signal and data inspectors. This block is abstract and must be inherited in derived block.
			Inspector provide a mechanism for detection and evaluation of various signals. The inspection is settable by a series of 
			settings, like stabilisation times, timeouts, repeats counts, etc.
		</summary>	
	</docu>	
~*)
FUNCTION_BLOCK ABSTRACT TcoInspector EXTENDS TcoCore.TcoObject IMPLEMENTS IInspector, IOnFail
VAR
	{attribute clr [CompilerOmits("BuilderPlainer", "BuilderShadowerInterface")]}
	_tcoInspectorDialogue : TcoInspectorDialog(THIS^);
	{attribute clr [CompilerOmits("BuilderPlainer", "BuilderShadowerInterface")]}
	_inspectorTask : TcoInspectorTask(THIS^);
	{attribute clr [CompilerOmits("BuilderPlainer", "BuilderShadowerInterface")]}	
	_coordinator    : TcoCore.ITcoCoordinator;
	{attribute 'hide'}	
	_isOverInspected : BOOL;
	{attribute 'hide'}	
	_tierUpdateOverall : TcoCore.TcoTier(THIS^);	
	{attribute 'hide'}	
	_originalOverallResult : TcoComprehensiveResult;
	{attribute 'hide'}	
	_refOverallResult : REFERENCE TO TcoComprehensiveResult;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="OnFail" Id="{05ba37aa-b801-0c06-39b0-ca96036b97e1}" />
    <Method Name="_WithCoordinator" Id="{f4255b2d-06fa-07d1-2be9-8f80453ebfb7}">
      <Declaration><![CDATA[METHOD PROTECTED _WithCoordinator : IInspector
VAR_INPUT
	inCoordinator : TcoCore.ITcoCoordinator;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_coordinator := inCoordinator;

IF(_coordinator.IsFreshState) THEN
	_inspectorTask.Restore();
	_tcoInspectorDialogue.Restore();
END_IF

_WithCoordinator := THIS^;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Busy" Id="{60182645-a16f-0ee1-06e2-bb45e9b084a5}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Gets `true` while the inspection is running.
		</summary>			
	</docu>	
~*)
PROPERTY PUBLIC Busy : BOOL]]></Declaration>
      <Get Name="Get" Id="{077f6869-8179-04ae-0f24-65bb3b85fcaf}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Busy := _inspectorTask.Busy;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="CarryOn" Id="{a840d4ae-4cf4-0c7c-37d8-3cfa8a027ffe}" FolderPath="OnFail\">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Upon failure continues in the execution of coordinator. 
			The overall results is marked as failed.
		</summary>			
	</docu>	
~*)
{attribute 'hide'}
{attribute 'obsolete' := 'You should access `CarryOn` method via `OnFail()` method.'}
METHOD PUBLIC CarryOn : BOOL

]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF(_coordinator = 0) THEN
	RETURN;			
END_IF

IF(THIS^.Done) THEN
	_coordinator.MoveNext();
END_IF;	
	
CarryOn := THIS^.Done;]]></ST>
      </Implementation>
    </Method>
    <Property Name="CommonData" Id="{36fa2ba8-4056-0778-188a-b4cd0d458287}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Gets common data settings of inspectors.
		</summary>			
	</docu>	
~*)
PROPERTY ABSTRACT CommonData : REFERENCE TO TcoInspectorData]]></Declaration>
      <Get Name="Get" Id="{0667236f-af28-0f5f-0024-364977840d88}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Coordinator" Id="{d6c5d29a-186c-0f57-2b81-a21c82deb947}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Gets the coordinator assotiated with this inspector. 
		</summary>			
	</docu>	
~*)
PROPERTY PUBLIC Coordinator : TcoCore.ITcoCoordinator]]></Declaration>
      <Get Name="Get" Id="{a1abb008-36db-020c-3883-0da433a80afc}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Coordinator := _coordinator;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Dialog" Id="{5b149765-bdef-0167-3dae-165b725f86ae}" FolderPath="OnFail\">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Upon failure displays dialogue for the user to take decision about the fate of the inspection.			
		</summary>			
	</docu>	
~*)
METHOD PUBLIC Dialog : BOOL
VAR_INPUT
	inRetryStep : INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_tcoInspectorDialogue.Show(inRetryStep);


]]></ST>
      </Implementation>
    </Method>
    <Method Name="DialogWithExternalClose" Id="{02e23383-9a89-0182-24df-7de392fa9495}" FolderPath="OnFail\">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Upon failure displays dialogue for the user to take decision about the fate of the inspection.			
		</summary>			
	</docu>	
~*)
METHOD PUBLIC DialogWithExternalClose : BOOL
VAR_INPUT
	inRetryStep : INT;
	inRetrySignal:BOOL;
	inTerminateSignal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_tcoInspectorDialogue.ShowWithExternalClose(inRetryStep,inRetrySignal,inTerminateSignal);


]]></ST>
      </Implementation>
    </Method>
    <Property Name="Done" Id="{58f0e3f3-593f-0a1d-332c-f3d91115dd9c}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Gets `true` when the inspection is done.
		</summary>			
	</docu>	
~*)
PROPERTY PUBLIC Done : BOOL]]></Declaration>
      <Get Name="Get" Id="{6661bda9-b017-0d7c-0a73-0c7eec03da8b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Done := _inspectorTask.Done;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="FB_init" Id="{4d0b0479-ae7b-014d-3a0f-a4c44c542102}">
      <Declaration><![CDATA[{attribute 'hide'}
METHOD PUBLIC FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	ParentObject : ITcoObject;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//// Hate to do this guys but I get compile error, seems to be a bug in tc
//]]></ST>
      </Implementation>
    </Method>
    <Method Name="Instruct" Id="{3cb26e75-7a50-092d-1479-a384f5c28729}">
      <Declaration><![CDATA[METHOD PUBLIC Instruct:IInspector
VAR_INPUT
	inInstruction:STRING(255);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
Instruct := THIS^;

_tcoInspectorDialogue.SetInstruction(inInstruction);]]></ST>
      </Implementation>
    </Method>
    <Method Name="InstructWithImage" Id="{a42d00c6-7233-0888-1090-6ce7efe6f393}">
      <Declaration><![CDATA[METHOD PUBLIC InstructWithImage:IInspector
VAR_INPUT
	inImageSource:STRING(255);
	inHeight:REAL;
	inWidth:REAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
InstructWithImage := THIS^;

_tcoInspectorDialogue.SetImageSource(inImageSource,inHeight,inWidth);]]></ST>
      </Implementation>
    </Method>
    <Method Name="IsOverinspected" Id="{aad1e11e-ec79-08e0-1e07-69f2014dc971}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Gets `true` when this inspection overruns max number of inspection.
		</summary>			
	</docu>	
~*)
METHOD PROTECTED IsOverinspected : BOOL

]]></Declaration>
      <Implementation>
        <ST><![CDATA[_isOverInspected := THIS^.OverInspected;
IF(OverInspected) THEN			
	THIS^._inspectorTask.Invoke();
	IF(THIS^._inspectorTask.Execute()) THEN		
		THIS^._inspectorTask.InspectionData.Result := eInspectorResult.Failed;
		THIS^._inspectorTask.DoneWhen(TRUE);	
	END_IF	
END_IF

IsOverinspected := OverInspected;]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnEnterInspection" Id="{fa4970f2-2c3a-0e7f-05d4-46651b249942}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Executes each time the `Inspect` method is called.
		</summary>			
	</docu>	
~*)
METHOD PROTECTED FINAL OnEnterInspection : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^._tcoInspectorDialogue.SetInspector(THIS^);




 ]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnFail" Id="{2b84cb88-5da8-07d6-2e7b-61f2e0d3c73e}" FolderPath="OnFail\">
      <Declaration><![CDATA[METHOD PUBLIC OnFail : IOnFail]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF(_coordinator = 0) THEN
	Messenger.Programming('Missing `coordinator`. You will need to call inspector `WithCoordinator` method.');			
END_IF

OnFail := THIS^;]]></ST>
      </Implementation>
    </Method>
    <Property Name="OverInspected" Id="{b4fb4777-567e-0765-037d-7f6c709b975e}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Gets `true` when the number of inspections excceds `NumberOfAllowedRetries`.
		</summary>			
	</docu>	
~*)
PROPERTY PUBLIC OverInspected : BOOL]]></Declaration>
      <Get Name="Get" Id="{a94506c8-cec3-051d-059d-f727fbfdaf22}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF(__ISVALIDREF(_inspectorTask._inspectionData)) THEN
	OverInspected := (_inspectorTask._inspectionData.RetryAttemptsCount >= _inspectorTask._inspectionData.NumberOfAllowedRetries) 
					 AND (_inspectorTask._inspectionData.NumberOfAllowedRetries <> 0);
END_IF;					 ]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Result" Id="{3bfa3a4a-7888-017e-224d-3476f4ea51b3}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Gets the inspection result of this inspector.
		</summary>			
	</docu>	
~*)
PROPERTY PUBLIC Result : eInspectorResult]]></Declaration>
      <Get Name="Get" Id="{eeb8a9f3-dd81-00da-387c-cf883f7fc24b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF(__ISVALIDREF(_inspectorTask._inspectionData)) THEN
	Result := _inspectorTask._inspectionData.Result;	
END_IF;	]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Retry" Id="{5b1ccf00-dc2b-05ee-0451-96a6e977ff81}" FolderPath="OnFail\">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Upon failure the inspection retries given number of time.			
		</summary>			
	</docu>	
~*)
{attribute 'hide'}
{attribute 'obsolete' := 'You should access `Retry` method via `OnFail()` method.'}
METHOD PUBLIC Retry : BOOL
VAR_INPUT
	(*~
	<docu>
		<summary>
			State from which the inspection will restart.		
		</summary>			
	</docu>	
	~*)
	inFromState : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF(_coordinator = 0) THEN
	RETURN;	
END_IF

IF(THIS^.Done) THEN
	IF(THIS^.Result = eInspectorResult.Failed) THEN
		IF(__ISVALIDREF(_refOverallResult)) THEN
			_refOverallResult := _originalOverallResult;
		END_IF
		_coordinator.Retry(inFromState);
	ELSE
		_coordinator.MoveNext();
	END_IF;	
END_IF;	


Retry := THIS^.Done;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Terminate" Id="{0f8dbc7d-2382-0017-3d29-deef1f6b04ea}" FolderPath="OnFail\">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Upon failure the inspection terminates the run of the coordinator.			
		</summary>			
	</docu>	
~*)
{attribute 'hide'}
{attribute 'obsolete' := 'You should access `Terminate` method via `OnFail()` method.'}
METHOD PUBLIC Terminate : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[

IF(_coordinator = 0) THEN
	RETURN;	
END_IF

IF(THIS^.Done) THEN
	IF(THIS^.Result = eInspectorResult.Failed) THEN
		_coordinator.Terminate();
	ELSE
		_coordinator.MoveNext();
	END_IF;	
END_IF;	

Terminate := THIS^.Done;]]></ST>
      </Implementation>
    </Method>
    <Method Name="UpdateComprehensiveResult" Id="{66ea9018-5364-055e-3566-6abbc1aea773}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Updates comprehensive result. The comprehensive result is set to `Failed` when any inspection fails or is inconclusive.
			Any bypassed or excluded inspection are not taken in the account.			
		</summary>			
	</docu>	
~*)
{attribute 'hide'}
{attribute 'obsolete' := 'You should access `UpdateOverall` property via `Inspect` method.'}
METHOD PUBLIC UpdateComprehensiveResult : IInspector
VAR_IN_OUT
	(*~
	<docu>
		<summary>
			Comprehensive result data structure to be updated.	
		</summary>			
	</docu>	
	~*)
    inoResult : TcoComprehensiveResult;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[UpdateComprehensiveResult := THIS^;

IF(_tierUpdateOverall.IsNewTier()) THEN	
	_refOverallResult REF= inoResult;
	_originalOverallResult := inoResult;
END_IF


IF (NOT __ISVALIDREF(_inspectorTask.InspectionData)) THEN
    inoResult.Result := eOverallResult.NoAction;
    RETURN;
END_IF

CASE _inspectorTask.InspectionData.Result OF
    eInspectorResult.NoAction:
        ;
    eInspectorResult.Running:
        ;
    eInspectorResult.Passed:
        ;
    eInspectorResult.Failed:
        inoResult.Result   := eOverallResult.Failed;
		UpdateDescriptions(inoResult);		       			
    eInspectorResult.Inconclusive:
        inoResult.Result := eOverallResult.Failed;
		UpdateDescriptions(inoResult);
    eInspectorResult.Excluded:
        ;
    eInspectorResult.Bypassed:
        ;
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="UpdateDescriptions" Id="{5bf8bf48-85f6-0716-2800-f1811bbbe4d3}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Updates failure description. Adding `FailureDescription` do the overall result structure.
		</summary>	
	</docu>	
~*)
METHOD PROTECTED UpdateDescriptions
VAR_IN_OUT
	inoResult : TcoComprehensiveResult;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF(_inspectorTask.OnDoneFlag) THEN
	inoResult.Failures := THIS^.Context.Environment.Messaging.StringBuilder.Clear()
				.Append(inoResult.Failures)				
				.Append(_inspectorTask.InspectionData.FailureDescription)
				.Append(';')
				.ToString();
	
	inoResult.ErrorCodes := THIS^.Context.Environment.Messaging.StringBuilder.Clear()
				.Append(inoResult.ErrorCodes)				
				.Append(_inspectorTask.InspectionData.ErrorCode)
				.Append(';')
				.ToString();	
END_IF;			]]></ST>
      </Implementation>
    </Method>
    <Method Name="WithDescription" Id="{b172f812-ddca-0db1-3a24-abfbaed0a77e}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Provide information(name defined in attribute name) about failed inspection (if there are multiple inspectors, only the failed ones will be displayed). 
		</summary>			
	</docu>	
~*)
METHOD WithDescription : IInspector

]]></Declaration>
      <Implementation>
        <ST><![CDATA[
WithDescription := THIS^;

_tcoInspectorDialogue.ShowDescription:=TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="WithErrorCode" Id="{722d66a6-523a-072c-2d1a-9dac6fc0da4a}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Provide information about ErrorCode (if there are multiple inspectors, only the failed ones will be displayed). Error codes shoud be defined in Inspectors
		</summary>			
	</docu>	
~*)
METHOD WithErrorCode : IInspector

]]></Declaration>
      <Implementation>
        <ST><![CDATA[
WithErrorCode := THIS^;

_tcoInspectorDialogue.ShowErrorCode:=TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="WithFailureDescription" Id="{ad46acc9-dde4-06ba-01ef-ec95bd43a9a8}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Provide information about Failure Description (if there are multiple inspectors, only the failed ones will be displayed). Failure description shoud be defined in Inspectors.
		</summary>			
	</docu>	
~*)
METHOD WithFailureDescription : IInspector

]]></Declaration>
      <Implementation>
        <ST><![CDATA[
WithFailureDescription := THIS^;

_tcoInspectorDialogue.ShowFailureDescription:=TRUE;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>