@namespace TcoData
@using Vortex.Connector
<h3>DataView</h3>

@inject IBlazorDownloadFileService BlazorDownloadFileService
@inject IJSRuntime JS

<div class="container">
    <div class="row">

        <div class="mb-3 col">
            <label class="form-label">Per page</label>
            <select class="w-100 form-select"
                    @bind="@DataViewModel.Limit">
                <option class="form-control" value="5">5</option>
                <option class="form-control" value="10">10</option>
                <option class="form-control" value="20">20</option>
                <option class="form-control" value="30">30</option>
                <option class="form-control" value="50">50</option>
            </select>
        </div>
        <div class="mb-3 col">
            <label class="form-label">Filter</label>
            <input class="form-control col" type="text" @bind="@DataViewModel.FilterById" />
        </div>
        <div class="mb-3 col">
            <label class="form-label">Search mode</label>

            <select class="w-100 form-select"
                    @bind="@DataViewModel.SearchMode">
                @foreach (var item in eSearchModes)
                {

                    <option class="form-control" value="@item">@item.ToString() </option>

                }
            </select>
        </div>
        <button class="btn btn-primary" @onclick="() => Filter() ">Filter</button>
    </div>
    <div class="row">
        @if (IsLoading)
        {
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        }
        else
        {
            switch (@DataViewModel.Mode)
            {

                case ViewMode.Display:
                    {
                        <div class="col card m-1" style=" height: 500px !important; overflow: auto;">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th scope="col">Id</th>

                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in DataViewModel.ObservableRecords.ToList())
                                    {
                                        <tr @onclick="@(() => RowClicked(item))">
                                            <td>@item._EntityId</td>
                                        </tr>
                                    }


                                </tbody>
                            </table>
                        </div>

                        <nav aria-label="Pagination">
                            <ul class="pagination justify-content-center">
                                <li class="page-item">
                                    <button class="page-link" @onclick="() => PageChangedFirst()" aria-label="First">
                                        <span aria-hidden="true">&laquo;</span>
                                    </button>
                                </li>
                                <li class="page-item">
                                    <button class="page-link" @onclick="() => PageChangedWithArrow(_currentActivePage-1)" aria-label="Previous">
                                        <span aria-hidden="true">&lsaquo;</span>
                                    </button>
                                </li>




                                @for (var i = _visibleDownPage; i < _visibleUpPage; i++)
                                {
                                    var current = i;
                                    @if (current == _currentActivePage)
                                    {
                                        <li class="page-item active"><button class="page-link" @onclick="() => PageChanged(current) ">@(current+1)</button></li>
                                    }
                                    else
                                    {
                                        <li class="page-item"><button class="page-link" @onclick="() => PageChanged(current) ">@(current+1)</button></li>
                                    }
                                }

                                <li class="page-item">
                                    <button class="page-link" @onclick="() => PageChangedWithArrow(_currentActivePage+1)" aria-label="Next">
                                        <span aria-hidden="true">&rsaquo;</span>
                                    </button>
                                </li>
                                <li class="page-item">
                                    <button class="page-link" @onclick="() => PageChangedLast()" aria-label="Last">
                                        <span aria-hidden="true">&raquo;</span>
                                    </button>
                                </li>

                            </ul>
                        </nav>

                        @if (_isRowSelected)
                        {
                            <div class="col card m-1">
                                <div class="card-title">@DataViewModel.SelectedRecord._EntityId</div>

                                <RenderableContentControl Context="(IVortexElement)((dynamic)DataViewModel.DataExchange)._data" Presentation="ShadowDisplay"></RenderableContentControl>
                            </div>
                        }

                        break;
                    }
                case ViewMode.New:
                    {
                        <div class="col card m-1">

                            <EditForm Model="@DataViewModel" OnValidSubmit="() => DataViewModel.CreateNew()">
                                <DataAnnotationsValidator />
                                <ValidationSummary />

                                <InputText id="nameOfData" class="form-control" @bind-Value="DataViewModel.RecordIdentifier" />

                                <button type="submit" class="btn btn-primary">Ok</button>
                                <button type="button" class="btn btn-secondary" @onclick="() => OnNewCanceled()">Cancel</button>
                            </EditForm>
                        </div>

                        break;
                    }
                case ViewMode.Edit:
                    {

                        <div class="col card m-1">

                            <p>@DataViewModel.SelectedRecord._EntityId</p>
                            <RenderableContentControl Context="(IVortexElement)((dynamic)DataViewModel.DataExchange)._data" Presentation="ShadowControl"></RenderableContentControl>
                        </div>

                        break;
                    }

                case ViewMode.Copy:
                    {
                        <div class="col card m-1">

                            <EditForm Model="@DataViewModel" OnValidSubmit="() => DataViewModel.CreateCopyOfExisting()">
                                <DataAnnotationsValidator />
                                <ValidationSummary />

                                <InputText id="nameOfData" class="form-control" @bind-Value="DataViewModel.RecordIdentifier" />

                                <button type="submit" class="btn btn-primary">Ok</button>
                                <button type="button" class="btn btn-secondary" @onclick="() => OnNewCanceled()">Cancel</button>

                            </EditForm>

                        </div>
                        break;
                    }
                default:
                    break;
            }


        }
    </div>

    @if (_isRowSelected)
    {
        <div class="modal fade " id="deleteDataModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="deleteModalLabel">Delete user</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <h6>Do you want to delete @DataViewModel.SelectedRecord._EntityId?</h6>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary m-2" data-bs-dismiss="modal">Close</button>
                        <button type="button" class="btn btn-danger m-2" data-bs-dismiss="modal" @onclick="() => DataViewModel.Delete()">Delete</button>
                    </div>
                </div>
            </div>
        </div>

        <div class="modal fade " id="updateDataModal" tabindex="-1" aria-labelledby="updateModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="updateModalLabel">Update user</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <h6>Do you want to upate @DataViewModel.SelectedRecord._EntityId?</h6>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary m-2" data-bs-dismiss="modal">Close</button>
                        <button type="button" class="btn btn-primary m-2" data-bs-dismiss="modal" @onclick="() => DataViewModel.Update()">Update</button>
                    </div>
                </div>
            </div>
        </div>
    }

<div class="d-flex justify-content-center">
    @if (DataViewModel.StartCreateNewCommandAvailable)
    {<button class="btn btn-primary m-2"
             disabled="@DataViewModel.NewDisabled"
             @onclick="() => DataViewModel.StartCreatingNew()">
            New
        </button>}

    @if (DataViewModel.StartCreateCopyOfExistingAvailable)
    {<button class="btn btn-primary m-2"
             disabled="@DataViewModel.CopyDisabled"
             @onclick="() => DataViewModel.StartCreatingRecordCopy()">
            Copy
        </button>}

    @if (DataViewModel.UpdateCommandAvailable)
    {<button class="btn btn-primary m-2"
             disabled="@DataViewModel.UpdateDisabled"
             data-bs-toggle="modal" data-bs-target="#updateDataModal">
            Update
        </button>}

    @if (DataViewModel.EditCommandAvailable)
    {<button class="btn btn-primary m-2"
             disabled="@DataViewModel.EditDisabled"
             @onclick="() => DataViewModel.StartEdit()">
            Edit
        </button>}

    @if (DataViewModel.SendToPlcCommandAvailable)
    {<button class="btn btn-primary m-2"
             disabled="@DataViewModel.SendToPlcDisabled">
            Send to PLC
        </button>}

    @if (DataViewModel.LoadFromPlcCommandAvailable)
    {<button class="btn btn-primary m-2"
             disabled="@DataViewModel.FromPlcDisabled">
            From PLC
        </button>}

    @if (DataViewModel.ImportCommandAvailable)
    {
        @*<input type="file" id="selectedFile" style="display: none;" />
        <input type="button" value="Browse..." onclick="document.getElementById('selectedFile').click();" />*@


        <InputFile id="filePicker" style="display: none;"  OnChange="@LoadFiles"></InputFile>

        <label class="btn btn-primary m-2" for="filePicker" >
            <a>Import</a>
        </label>
    } 

    @if (DataViewModel.ExportCommandAvailable)
    {<button class="btn btn-primary m-2"
             disabled="@DataViewModel.ExportDisabled"
             @onclick="() => OnExport()">
            Export

        </button>}

    @if (DataViewModel.CancelEditCommandAvailable)
    {<button class="btn btn-primary m-2"
             disabled="@DataViewModel.CancelDisabled"
             @onclick="() => DataViewModel.CancelEdit()">
            Cancel
        </button>}

    @if (DataViewModel.DeleteCommandAvailable)
    {<button class="btn btn-primary m-2"
             disabled="@DataViewModel.DeleteDisabled"
             data-bs-toggle="modal" data-bs-target="#deleteDataModal">
            Delete
        </button>}

</div>


</div>



@code {


    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        var path = Path.Combine(System.AppDomain.CurrentDomain.BaseDirectory,"imported.txt");
        await using FileStream fs = new(path, FileMode.Create);
        await e.File.OpenReadStream().CopyToAsync(fs);
        fs.Close();

        DataViewModel.ImportData(path);
        if (File.Exists(Path.Combine(path)))
        {
            // If file found, delete it    
            File.Delete(Path.Combine(path));

        }

    }

    public bool IsDisabled { get; set; } = true;

    [Parameter]
    public IDataViewModel DataViewModel { get; set; }

    private bool _isRowSelected { get; set; }
    //private IBrowsableDataObject _selectedItem { get; set; }

    private IVortexElement _data { get; set; }

    public bool IsLoading { get; set; }
    public int PageCount { get; set; }

    private int _currentActivePage { get; set; }

    private int _visibleDownPage { get; set; }
    private int _visibleUpPage { get; set; }

    private async Task OnExport()
    {
        var memoryStream = new MemoryStream();
        DataViewModel.ExportData();
        await BlazorDownloadFileService.DownloadFile("test2.txt", DataViewModel.ExportFileStream, "application/octet-stream");
        DataViewModel.ExportFileStream.Close();
    }

    //private async Task OnImport()
    //{
    //    var memoryStream = new MemoryStream();
    //    DataViewModel.ExportData();
    //    await BlazorDownloadFileService.DownloadFile("test2.txt", DataViewModel.ExportFileStream, "application/octet-stream");
    //    DataViewModel.ExportFileStream.Close();
    //}

    private void OnNewCanceled()
    {
        DataViewModel.Mode = ViewMode.Display;
        DataViewModel.SetDefaultButtonState();

    }

    //private string PaginationActive
    private async Task Filter()
    {
        DataViewModel.Page = 0;
        _visibleDownPage = 0;
        _currentActivePage = 0;
        await Task.Run(DataViewModel.FillObservableRecordsAsync);
        PageCount = (int)Math.Ceiling(DataViewModel.FilteredCount * 1.0 / DataViewModel.Limit * 1.0);
        _visibleUpPage = PageCount > 3 ? 3 : PageCount;
        StateHasChanged();
    }

    private void RowClicked(IBrowsableDataObject item)
    {
        DataViewModel.SelectedRecord = item;
        dynamic dataExchange = DataViewModel.DataExchange;
        _data = (IVortexElement)dataExchange._data;
        _isRowSelected = true;
        StateHasChanged();

    }

    private async Task PageChanged(int pageNumber)
    {

        if (pageNumber < 0 || pageNumber >= PageCount) return;

        _currentActivePage = pageNumber;
        DataViewModel.Page = pageNumber;

        await Task.Run(DataViewModel.FillObservableRecordsAsync);
        StateHasChanged();
    }

    private async Task PageChangedWithArrow(int pageNumber)
    {
        if (pageNumber < 0 || pageNumber >= PageCount) return;

        if (pageNumber < _visibleDownPage)
        {
            if (_visibleDownPage > 0)
            {
                _visibleDownPage -= 1;
                _visibleUpPage -= 1;
            }
        }
        if (pageNumber >= _visibleUpPage)
        {
            if (_visibleUpPage < PageCount)
            {
                _visibleUpPage += 1;
                _visibleDownPage += 1;
            }
        }

        await PageChanged(pageNumber);
    }


    private async Task PageChangedFirst()
    {

        _visibleDownPage = 0;
        if (PageCount > 3) _visibleUpPage = 3;
        await PageChanged(0);
    }
    private async Task PageChangedLast()
    {

        if (PageCount > 3) _visibleDownPage = PageCount - 3;
        _visibleUpPage = PageCount;
        await PageChanged(PageCount - 1);
    }




    protected override async Task OnInitializedAsync()
    {


        IsLoading = true;
        await Filter();
        IsLoading = false;
        DataViewModel.SetDefaultButtonState();
        base.OnInitializedAsync();
    }
    //private IJSObjectReference Module;
    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    Module = await JS.InvokeAsync<IJSObjectReference>(
    //"import", "./example.js");
    //    base.OnAfterRender(firstRender);
    //}

    private IEnumerable<eSearchMode> eSearchModes => Enum.GetValues(typeof(eSearchMode)).Cast<eSearchMode>();


}
