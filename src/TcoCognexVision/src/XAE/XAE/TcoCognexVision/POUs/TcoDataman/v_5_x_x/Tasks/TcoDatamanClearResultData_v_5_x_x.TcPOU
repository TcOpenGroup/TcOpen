<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="TcoDatamanClearResultData_v_5_x_x" Id="{20001709-502a-0419-3be6-fc7096dea873}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK TcoDatamanClearResultData_v_5_x_x EXTENDS TcoCore.TcoTask
VAR_IN_OUT
    inoIoData : TcoDatamanIO_v_5_x_x;
    inoConfig : TcoDatamanConfig_v_5_x_x;
    inoStatus : TcoDatamanStatus_v_5_x_x;
    inoResults : TcoDatamanResults_v_5_x_x;
END_VAR
VAR
    {attribute 'hide'}
    _progress : INT := 0;
    {attribute 'hide'}
    _infoTimer : TON;
    {attribute 'hide'}
    _errorTimer : TON;
    {attribute 'hide'}
    _varInfo : __SYSTEM.VAR_INFO;
    {attribute 'hide'}
    _sb : TcoCore.StringBuilder;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF Execute() THEN
    IF _progress = 0 THEN
        IF NOT __ISVALIDREF(inoIoData) THEN
            _varInfo := __VARINFO(inoIoData);
            Messenger.Programming(_sb.Clear().Append('<#Invalid reference: #>').Append(_varInfo.Symbol).ToString()).Pin();
        ELSIF NOT __ISVALIDREF(inoConfig) THEN
            _varInfo := __VARINFO(inoConfig);
            Messenger.Programming(_sb.Clear().Append('<#Invalid reference: #>').Append(_varInfo.Symbol).ToString()).Pin();
        ELSIF NOT __ISVALIDREF(inoStatus) THEN
            _varInfo := __VARINFO(inoStatus);
            Messenger.Programming(_sb.Clear().Append('<#Invalid reference: #>').Append(_varInfo.Symbol).ToString()).Pin();
        ELSIF NOT __ISVALIDREF(inoResults) THEN
            _varInfo := __VARINFO(inoResults);
            Messenger.Programming(_sb.Clear().Append('<#Invalid reference: #>').Append(_varInfo.Symbol).ToString()).Pin();
        ELSE
            _progress := _progress + 1;
        END_IF
    END_IF

    IF _progress = 1 THEN
        THIS^.inoStatus.ActionDescription := '<#Clearing of the result data running.#>';
        CallTimers(FALSE);
        _progress := _progress + 1;
    END_IF

    IF _progress = 2 THEN
        THIS^.inoIoData.AcquisitionControl.TriggerEnable := FALSE;
        THIS^.inoIoData.AcquisitionControl.Trigger := FALSE;
        THIS^.inoIoData.ResultsControl.ResultsAcknowledge := TRUE;
        THIS^.Messenger.OnCondition(_infoTimer.Q).Warning('<#Waiting for the result data cleared!#>').Pin();
        THIS^.inoResults.Length := 0;

        IF Tc2_System.MEMSET(destAddr := ADR(THIS^.inoResults.Data), fillByte := 0, n := SIZEOF(THIS^.inoResults.Data)) > 0 THEN
            CallTimers(FALSE);
            _progress := _progress + 1;
        END_IF
    END_IF

    IF _progress = 3 THEN
        THIS^.Messenger.OnCondition(_infoTimer.Q).Warning('<#Waiting for the signal ResultsAvailable to be reseted!#>').Pin();

        IF NOT THIS^.inoIoData.ResultsStatus.ResultsAvailable THEN
            CallTimers(FALSE);
            _progress := _progress + 1;
        END_IF
    END_IF

    IF _progress = 4 THEN
        THIS^.inoIoData.ResultsControl.ResultsAcknowledge := FALSE;
        THIS^.DoneWhen(TRUE);
        CallTimers(FALSE);
        _progress := 0;
    END_IF

    CallTimers(TRUE);
    THIS^.ThrowWhen(_errorTimer.Q);
END_IF]]></ST>
    </Implementation>
    <Method Name="CallTimers" Id="{798323ce-9b71-0375-2d22-25da22fd5936}">
      <Declaration><![CDATA[METHOD CallTimers
VAR_INPUT
    inValue : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_infoTimer(IN := inValue, PT := THIS^.inoConfig.InfoTime);
_errorTimer(IN := inValue, PT := THIS^.inoConfig.ErrorTime);]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{0d7d3ac7-a86f-0355-3715-b462a3facc86}">
      <Declaration><![CDATA[{attribute 'hide'}
METHOD PUBLIC FB_init : BOOL
VAR_INPUT
    bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
    bInCopyCode : BOOL; // if TRUE, the instance afterwards gets moved into the copy code (online change)
    ParentObject : ITcoObject;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnAbort" Id="{add0c41f-54c7-073d-3688-e52d5e3af330}">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Executes when task is aborted.
        </summary>
    </docu>
~*)
METHOD PROTECTED OnAbort]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.inoStatus.ActionDescription := '<#Clearing of the result data was aborted, while not yet completed!#>';]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnDone" Id="{9a98a140-3258-0df6-3454-7bf1ee96c5dc}">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Executes when task reaches the ```Done``` state .
        </summary>
    </docu>
~*)
METHOD PROTECTED OnDone]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.inoStatus.ActionDescription := '<#Clearing of the result data was completed successfully.#>';]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnError" Id="{4cfb1cfa-ec61-0d21-357d-50a02d75820c}">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Executes when task reaches the ```Error``` state.
            <para>
                Do not confuse with <see cref="PlcDocu.TcoCore.TcoTask.WhileError()"/>, that is called cyclically until '''Error''' state is left.
            </para>
        </summary>
    </docu>
~*)
METHOD PROTECTED OnError]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.inoStatus.ActionDescription := '<#Clearing of the result data finished with error.#>';]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnStart" Id="{154dcb23-1283-07e8-267d-8221e4e6c1cd}">
      <Declaration><![CDATA[METHOD PROTECTED OnStart]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.inoStatus.ActionDescription := '<#Clearing of the result data started.#>';]]></ST>
      </Implementation>
    </Method>
    <Method Name="Restore" Id="{b28c3390-b4e1-00c7-17c4-843c0c4b7072}">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Restores this instance to the Ready state. Can be called explicitly or from within one of the restore mechanisms.
            <para>
                See also <see cref="PlcDocu.TcoCore.TcoTask.AutoRestorable()"/>
            </para>
        </summary>
    </docu>
~*)
METHOD Restore : ITcoRestorable]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.Restore();
_progress := 0;
CallTimers(FALSE);
Messenger.UnPin();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>