<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="TcoDataman_v_5_x_x" Id="{acfa500c-75b0-406d-8872-dce797f24ef6}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute addProperty Name "<#COGNEX DATAMAN#>"}
FUNCTION_BLOCK TcoDataman_v_5_x_x  EXTENDS TcoCore.TcoComponent IMPLEMENTS TcoAbstractions.ITcoCodeReader
VAR_INPUT
	{attribute addProperty Name "<#Results data size#>"}
	ResultsDataSize : enumCGN_DATAMAN_RESULT_DATA_SIZE;
	{attribute addProperty Name "<#User data size#>"}
	UserDataSize : enumCGN_DATAMAN_USER_DATA_SIZE;
END_VAR

VAR_IN_OUT
	{attribute 'hide'}
	IoData : TcoDatamanIO_v_5_x_x;
END_VAR
VAR
	
	{attribute addProperty Name "<#Dataman Struct#>"}
	Data:CGN_DATAMAN;
	{attribute addProperty Name "<#ResultString#>"}
	_resultString:STRING;

//	{attribute 'hide'}
//	i:INT;
//	{attribute 'hide'}
//	_readDelayTimer : TON;
	
//	{attribute addProperty Name "<#Error BurstAquire#>"}
//	ErrorBurstAcquire : BOOL;
	
	

END_VAR
VAR PERSISTENT
	{attribute addProperty Name "<#Read cyclicaly(For HandleHeld)#>"}
	ReadCyclicaly:BOOL;
	
//	{attribute addProperty Name "<#BurstTrigger - number of retries#>"}
//	ManualNumberOfRetries : UINT;
	
//	{attribute addProperty Name "<#BurstTrigger - NoReadString#>"}
//	ManualNoReadString : STRING;
END_VAR

VAR
	{attribute addProperty Name "<#Trigger scanner#>"}
	cmdTrig: VortexBase.fbCommand;
//	{attribute 'hide'}
//	_timer : TON;
	
	{attribute 'hide'}
	_tier : VortexBase.fbTierController;	

//	{attribute 'hide'}
//	_supertier : fbTierController;	

	{attribute addProperty Name "<#Progress#>"}
	_progress : INT;

//	{attribute addProperty Name "<#Super progress#>"}
//	_superprogress : INT;

//	{attribute 'hide'}
//	currentCountOfRetries : UINT;
	
	_prevTriggerID : UINT;
	_prevDecodeComplete : BOOL;
	{attribute 'hide'}
	_data_format : enumBytesDataFormat := enumBytesDataFormat.BigEndian;
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[SUPER^();

InitializeComponent();

IF ReadCyclicaly THEN
	_resultString := GetResultAsString(0,Data.ResultDataModule.ResultsLength);
END_IF



]]></ST>
    </Implementation>
    <Folder Name="_Internals" Id="{273cc62a-806e-0cec-03a6-5605a1b6c8a8}" />
    <Folder Name="ResultData" Id="{602afc8c-3fa6-0ac2-265a-4cd8a71263a3}" />
    <Method Name="_CheckNullRef" Id="{128aaf59-96c3-0bbd-25dc-94d09784a3a8}" FolderPath="_Internals\">
      <Declaration><![CDATA[METHOD PROTECTED _CheckNullRef : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_CheckNullRef := FALSE;

IF(NOT __ISVALIDREF(IoData)) THEN
	Messenger.Programming('<#IoData is not assigned#>');
	RETURN;
END_IF

_CheckNullRef := TRUE;
	]]></ST>
      </Implementation>
    </Method>
    <Property Name="CyclicReading" Id="{b02212f2-e260-4644-94bb-749cefa53349}">
      <Declaration><![CDATA[PROPERTY CyclicReading : BOOL]]></Declaration>
      <Get Name="Get" Id="{50bf7a42-8b8a-4d94-a702-5276dfa5f02b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[CyclicReading := ReadCyclicaly;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{e187daf8-2011-49b7-9f70-5776e629368b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ReadCyclicaly := CyclicReading;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="DataFormat" Id="{a7aca752-ffbe-032b-383b-8f7c084dc528}">
      <Declaration><![CDATA[PROPERTY DataFormat : enumBytesDataFormat]]></Declaration>
      <Get Name="Get" Id="{d5b4be34-0f74-0ef3-3097-f4e8fdbf988f}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[DataFormat := _data_format;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{510af0f4-b9d7-0e26-1737-3e69fe03c2a6}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_data_format := DataFormat;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="GetAcquisitionStatus" Id="{50ad31f6-ae39-4112-ad4a-a1bb2e65b4cc}">
      <Declaration><![CDATA[PROPERTY GetAcquisitionStatus : AcquisitionStatusModuleStruct]]></Declaration>
      <Get Name="Get" Id="{93b3ae0d-6bce-4985-ac08-99101035c343}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[GetAcquisitionStatus:=Data.AcquisitionStatusModule;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{d02a64fd-00ed-4d2d-b4cf-267d7f017140}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="GetResultAsByte" Id="{bc25c8ac-726c-08c6-3620-83c7ab295f3b}" FolderPath="ResultData\">
      <Declaration><![CDATA[METHOD GetResultAsByte : USINT
VAR_INPUT
    POS : UINT;
END_VAR
VAR
	_index : UINT;
	_size : UINT;
	_bufferSize : UINT; 
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
_size := SIZEOF(GetResultAsByte);

_bufferSize := SIZEOF(THIS^.Data.ResultDataModule.Results)/SIZEOF(THIS^.Data.ResultDataModule.Results[0]);

IF (POS +_size) > THIS^.ResultsDataSize THEN
	Messenger.Info('<#Index of InspectionResults in method GetResultAsByte exceeds the size hardware structure mapped#>');
	RETURN;
END_IF

IF (POS +_size) > _bufferSize THEN
	Messenger.Info('<#Index of InspectionResults in method GetResultAsByte exceeds the defined size#>');
	RETURN;
END_IF


GetResultAsByte := THIS^.Data.ResultDataModule.Results[POS]; ]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetResultAsDint" Id="{284868c6-eae7-0803-329d-86bb49d77d7f}" FolderPath="ResultData\">
      <Declaration><![CDATA[METHOD GetResultAsDint : DINT
VAR_INPUT
    POS : UINT;
END_VAR
VAR
	_index : UINT;
	_size : UINT;
	_bufferSize : UINT; 
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_size := SIZEOF(GetResultAsDint);

_bufferSize := SIZEOF(THIS^.Data.ResultDataModule.Results)/SIZEOF(THIS^.Data.ResultDataModule.Results[0]);

IF (POS +_size) > THIS^.ResultsDataSize THEN
	Messenger.Info('<#Index of InspectionResults in method GetResultAsReal exceeds the size hardware structure mapped#>');
	RETURN;
END_IF

IF (POS +_size) > _bufferSize THEN
	Messenger.Info('<#Index of InspectionResults in method GetResultAsReal exceeds the defined size#>');
	RETURN;
END_IF

GetResultAsDint := _BYTES_TO_DINT(_data_format,THIS^.Data.ResultDataModule.Results[POS],
								THIS^.Data.ResultDataModule.Results[POS+1],
								THIS^.Data.ResultDataModule.Results[POS+2],
								THIS^.Data.ResultDataModule.Results[POS+3]);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetResultAsReal" Id="{4163dfc2-b074-00c6-0ffa-de03f13e557f}" FolderPath="ResultData\">
      <Declaration><![CDATA[METHOD GetResultAsReal : REAL
VAR_INPUT
    POS : UINT;
END_VAR
VAR
	_index : UINT;
	_size : UINT;
	_bufferSize : UINT; 
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_size := SIZEOF(GetResultAsReal);

_bufferSize := SIZEOF(THIS^.Data.ResultDataModule.Results)/SIZEOF(THIS^.Data.ResultDataModule.Results[0]);

IF (POS +_size) > THIS^.ResultsDataSize THEN
	Messenger.Info('<#Index of InspectionResults in method GetResultAsReal exceeds the size hardware structure mapped#>');
	RETURN;
END_IF

IF (POS +_size) > _bufferSize THEN
	Messenger.Info('<#Index of InspectionResults in method GetResultAsReal exceeds the defined size#>');
	RETURN;
END_IF

GetResultAsReal := _BYTES_TO_REAL(_data_format,THIS^.Data.ResultDataModule.Results[POS],
											THIS^.Data.ResultDataModule.Results[POS+1],
											THIS^.Data.ResultDataModule.Results[POS+2],
											THIS^.Data.ResultDataModule.Results[POS+3]);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetResultAsString" Id="{47535512-60fe-0a1f-1f20-295ecdd0fd48}" FolderPath="ResultData\">
      <Declaration><![CDATA[METHOD GetResultAsString : STRING
VAR_INPUT
    POS : UINT;
	LEN : UINT;
END_VAR
VAR
	_index : UINT;
	_size : UINT;
	_bufferSize : UINT; 
	_resultString : STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_size := LEN;

_bufferSize := SIZEOF(THIS^.Data.ResultDataModule.Results)/SIZEOF(THIS^.Data.ResultDataModule.Results[0]);

IF (POS +_size) > THIS^.ResultsDataSize THEN
	Messenger.Info('<#Index of InspectionResults in method GetResultAsString exceeds the size hardware structure mapped#>');
	RETURN;
END_IF

IF (POS +_size) > _bufferSize THEN
	Messenger.Info('<#Index of InspectionResults in method GetResultAsString exceeds the defined size#>');
	RETURN;
END_IF

_resultString:='';

IF (LEN>0) THEN 
	FOR	_index := 0 TO LEN-1 BY 1	DO	
		IF(Data.ResultDataModule.Results[POS+_index] <> 0) THEN
			_resultString := CONCAT(_resultString, F_ToCHR(Data.ResultDataModule.Results[POS+_index]));
		ELSE
			EXIT;	
		END_IF		
	END_FOR;
END_IF

GetResultAsString := _resultString;]]></ST>
      </Implementation>
    </Method>
    <Property Name="GetResults" Id="{a7c5a43d-6601-40f9-b2b9-7a7e04ce6a4f}" FolderPath="ResultData\">
      <Declaration><![CDATA[PROPERTY GetResults : ResultDataModuleStruct]]></Declaration>
      <Get Name="Get" Id="{670458f1-b4f2-4289-9fb1-fe520086c042}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[GetResults:=Data.ResultDataModule;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{4454f76b-5598-46a3-8b93-771be28947ed}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="GetResultsStatus" Id="{9086d5fb-45bc-4aa2-a91d-7b6293d9b9d6}" FolderPath="ResultData\">
      <Declaration><![CDATA[PROPERTY GetResultsStatus : ResultsStatusModuleStruct]]></Declaration>
      <Get Name="Get" Id="{483926d3-b4f4-4386-84bb-d6499e12b037}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[GetResultsStatus:=Data.ResultsStatusModule;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{a76c4dfc-a9a4-4b03-ad18-3d1e22bfd53d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="InitializeComponent" Id="{05c05c07-9b42-0dba-37e1-112864bd2933}">
      <Declaration><![CDATA[METHOD InitializeComponent
VAR_INPUT
END_VAR
VAR
	i : INT;
	ResultDataModuleMaxSize : INT;
	UserDataMaxSize : INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT _CheckNullRef() THEN
	RETURN;
END_IF

//Inputs	
Data.AcquisitionStatusModule.Acquiring:= IoData.AcquisitionStatusModule.Acquiring;
Data.AcquisitionStatusModule.MissedAcquisition:= IoData.AcquisitionStatusModule.MissedAcquisition;
Data.AcquisitionStatusModule.TriggerAck:= IoData.AcquisitionStatusModule.TriggerAck;
Data.AcquisitionStatusModule.TriggerID:= IoData.AcquisitionStatusModule.TriggerID;
Data.AcquisitionStatusModule.TriggerReady:= IoData.AcquisitionStatusModule.TriggerReady;

Data.ResultsStatusModule.DecodeComplete:= IoData.ResultsStatusModule.DecodeComplete;
Data.ResultsStatusModule.Decoding:= IoData.ResultsStatusModule.Decoding;
Data.ResultsStatusModule.GeneralFault:= IoData.ResultsStatusModule.GeneralFault;
Data.ResultsStatusModule.ResultBufferOverrun:= IoData.ResultsStatusModule.ResultBufferOverrun;
Data.ResultsStatusModule.ResultsAvailable:= IoData.ResultsStatusModule.ResultsAvailable;



Data.SoftEventControlModule.ExecuteDMCCAck:= Iodata.SoftEventControlModule.ExecuteDMCCAck;
Data.SoftEventControlModule.SetMatchStringAck:= Iodata.SoftEventControlModule.SetMatchStringAck;
Data.SoftEventControlModule.TrainBrightnessAck:= Iodata.SoftEventControlModule.TrainBrightnessAck;
Data.SoftEventControlModule.TrainCodeAck:= Iodata.SoftEventControlModule.TrainCodeAck;
Data.SoftEventControlModule.TrainFocusAck:= Iodata.SoftEventControlModule.TrainFocusAck;
Data.SoftEventControlModule.TrainMatchStringAck:= Iodata.SoftEventControlModule.TrainMatchStringAck;
Data.SoftEventControlModule.UntrainAck:= Iodata.SoftEventControlModule.UntrainAck;


Data.ResultDataModule.ResultsCode:=IOdata.ResultDataModule.ResultsCode;
Data.ResultDataModule.ResultsExtended:=IOdata.ResultDataModule.ResultsExtended;
Data.ResultDataModule.ResultsID:=IOdata.ResultDataModule.ResultsID;
Data.ResultDataModule.ResultsLength:=IOdata.ResultDataModule.ResultsLength;

ResultDataModuleMaxSize := SIZEOF(THIS^.Data.ResultDataModule.Results)/SIZEOF(THIS^.Data.ResultDataModule.Results[0]);

FOR i:=1 TO ResultsDataSize BY 1 DO
	Data.ResultDataModule.Results[i-1]:=IoData.ResultDataModule.Results[i-1];
END_FOR

FOR i:=ResultsDataSize TO ResultDataModuleMaxSize BY 1 DO
	Data.ResultDataModule.Results[i-1]:=IoData.ResultDataModule.Results[i-1];
END_FOR


Messenger.PostConditionally(Data.ResultsStatusModule.GeneralFault,'<#General fault#>', enumMessageCategory.Error);

//Outputs
IOdata.AcquisitionControlModule.Trigger:=Data.AcquisitionControlModule.Trigger;
IOdata.AcquisitionControlModule.TriggerEnable:=Data.AcquisitionControlModule.TriggerEnable;

IOdata.ResultsControlModule.ResultBufferEnable:=data.ResultsControlModule.ResultBufferEnable;
IOdata.ResultsControlModule.ResultsAck:=data.ResultsControlModule.ResultsAck;



IoData.SoftEventControlModule.ExecuteDMCC:= data.SoftEventControlModule.ExecuteDMCC;
IoData.SoftEventControlModule.SetMatchString:= data.SoftEventControlModule.SetMatchString;
IoData.SoftEventControlModule.TrainBrightness:= data.SoftEventControlModule.TrainBrightness;
IoData.SoftEventControlModule.TrainCode:= data.SoftEventControlModule.TrainCode;
IoData.SoftEventControlModule.TrainFocus:= data.SoftEventControlModule.TrainFocus;
IoData.SoftEventControlModule.TrainMatchString:= data.SoftEventControlModule.TrainMatchString;
IoData.SoftEventControlModule.Untrain:= data.SoftEventControlModule.Untrain;

IOdata.UserDataModule.UserDataLength:=Data.UserDataModule.UserDataLength;
IOdata.UserDataModule.UserDataOption:=Data.UserDataModule.UserDataOption;

//User Data
UserDataMaxSize := SIZEOF(THIS^.Data.UserDataModule.Data)/SIZEOF(THIS^.Data.UserDataModule.Data[0]);

FOR i:=1 TO UserDataSize BY 1 DO
	IOData.UserDataModule.Data[i-1]:=Data.UserDataModule.Data[i-1];
END_FOR

FOR i:=UserDataSize TO UserDataMaxSize BY 1 DO
	IOData.UserDataModule.Data[i-1] := 0;
END_FOR
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ManualControl" Id="{a41d021f-62d2-4a63-87e0-2b515c364538}">
      <Declaration><![CDATA[METHOD PROTECTED ManualControl 
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT _CheckNullRef() THEN
	RETURN;
END_IF

IF(cmdTrig.Monitor()) THEN
	IF(Trigger()) THEN
		cmdTrig.Complete();
    END_IF;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="progress" Id="{3b3f009c-0a0b-0f75-34f4-b784861544d4}">
      <Declaration><![CDATA[PROPERTY progress : INT]]></Declaration>
      <Get Name="Get" Id="{402bddaa-d704-0f71-37dc-e5539fc2f02e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[progress:=_progress;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{46ebc486-f331-017f-32ff-4692da509e8a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_progress:=progress;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="ResultString" Id="{c98f3441-c324-4b9f-b2c0-03539ab23c46}">
      <Declaration><![CDATA[PROPERTY ResultString : string]]></Declaration>
      <Get Name="Get" Id="{cc6c7727-bb44-4f2e-b894-9c7b28de847c}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ResultString:=_resultString;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{75d06013-824d-4166-b6f8-2db98cda9d0f}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="Trigger" Id="{0ed75cd3-8155-46b2-a07f-03fd20f0a032}">
      <Declaration><![CDATA[METHOD Trigger : bool
VAR_INPUT
	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Trigger:=FALSE;

IF NOT _CheckNullRef() THEN
	RETURN;
END_IF

IF _tier.IsNewTier() THEN
	_progress := 0;
END_IF

IF _progress = 0 THEN	
	Data.AcquisitionControlModule.TriggerEnable:=TRUE;
	Data.AcquisitionControlModule.Trigger:=FALSE;
	Data.ResultsControlModule.ResultBufferEnable:=FALSE;
	Data.ResultsControlModule.ResultsAck:=Data.ResultsStatusModule.ResultsAvailable;
	_prevTriggerID := Data.AcquisitionStatusModule.TriggerID;
	_prevDecodeComplete := Data.ResultsStatusModule.DecodeComplete;
	_resultString := ''; 
	
	IF NOT Data.ResultsStatusModule.ResultsAvailable THEN
        _progress:=1;
    END_IF
END_IF

IF Progress = 1 THEN	
	Messenger.Post('<#Waiting for trigger ready signal#>',enumMessageCategory.Info);
	
	IF Data.AcquisitionStatusModule.TriggerReady THEN
		_progress := _progress + 1;
	END_IF
END_IF

IF _progress = 2 THEN	
	Data.AcquisitionControlModule.Trigger:=TRUE;
	Messenger.Info('<#Waiting for trigger acknowledge signal#>');
	
	IF Data.AcquisitionStatusModule.TriggerAck  THEN
		Data.AcquisitionControlModule.Trigger:=FALSE;
		_progress := _progress + 1;
	END_IF
END_IF

IF _progress = 3 THEN	
	Messenger.Info('<#Waiting for inspection to be completed#>');
	
	IF Data.ResultsStatusModule.DecodeComplete <> _prevDecodeComplete OR 
		Data.AcquisitionStatusModule.TriggerID > _prevTriggerID OR
		Data.ResultsStatusModule.ResultsAvailable THEN
		_progress := _progress + 1;
	END_IF
END_IF

IF _progress = 4 THEN	
	Messenger.Info('<#Waiting for results#>');
	
	IF Data.ResultsStatusModule.ResultsAvailable THEN
		_progress := _progress + 1;
	END_IF
END_IF

IF _progress = 5 THEN	
	Data.ResultsControlModule.ResultsAck:=TRUE;
	
	IF NOT Data.ResultsStatusModule.ResultsAvailable AND NOT Data.AcquisitionStatusModule.TriggerAck THEN
		Data.AcquisitionControlModule.Trigger:=FALSE;
		Data.ResultsControlModule.ResultBufferEnable:=FALSE;
		Data.ResultsControlModule.ResultsAck:=FALSE; 
		_progress := _progress + 1;
	END_IF;
END_IF

IF _progress = 6 THEN	
	_resultString := GetResultAsString(0,Data.ResultDataModule.ResultsLength);
	Trigger:=TRUE;		
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TriggerHandheld" Id="{4e1ec105-7140-41b5-8b59-e58b1a08b217}">
      <Declaration><![CDATA[METHOD TriggerHandheld : bool
VAR_INPUT
	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TriggerHandheld:=FALSE;

IF NOT _CheckNullRef() THEN
	RETURN;
END_IF

IF _tier.IsNewTier() THEN
	_progress := 0;
END_IF

IF _progress = 0 THEN	
	Data.AcquisitionControlModule.TriggerEnable:=TRUE;
	Data.AcquisitionControlModule.Trigger:=FALSE;
	Data.ResultsControlModule.ResultBufferEnable:=FALSE;
	Data.ResultsControlModule.ResultsAck:=Data.ResultsStatusModule.ResultsAvailable;
	_prevTriggerID := Data.AcquisitionStatusModule.TriggerID;
	_prevDecodeComplete := Data.ResultsStatusModule.DecodeComplete;
	_resultString := ''; 
	
	IF NOT Data.ResultsStatusModule.ResultsAvailable THEN
        _progress:=1;
    END_IF
END_IF

IF _progress = 1 THEN	
	Messenger.Info('<#Waiting for trigger ready signal#>');
	
	IF Data.AcquisitionStatusModule.TriggerReady THEN
		_progress := 3;
	END_IF
END_IF

IF _progress = 3 THEN	
	Messenger.Info('<#Waiting for inspection to be completed#>');
	
	IF Data.ResultsStatusModule.DecodeComplete <> _prevDecodeComplete OR 
		Data.AcquisitionStatusModule.TriggerID > _prevTriggerID OR
		Data.ResultsStatusModule.ResultsAvailable THEN
		_progress := _progress + 1;
	END_IF
END_IF

IF _progress = 4 THEN	
	Messenger.Info('<#Waiting for results#>');
	
	IF Data.ResultsStatusModule.ResultsAvailable THEN
		_progress := _progress + 1;
	END_IF
END_IF

IF _progress = 5 THEN	
	Data.ResultsControlModule.ResultsAck:=TRUE;
	IF NOT Data.ResultsStatusModule.ResultsAvailable AND NOT Data.AcquisitionStatusModule.TriggerAck THEN
		Data.AcquisitionControlModule.Trigger:=FALSE;
		Data.ResultsControlModule.ResultBufferEnable:=FALSE;
		Data.ResultsControlModule.ResultsAck:=FALSE; 
		_progress := _progress + 1;
	END_IF;
END_IF

IF _progress = 6 THEN	
	_resultString := GetResultAsString(0,Data.ResultDataModule.ResultsLength);
	TriggerHandheld:=TRUE;		
END_IF
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>