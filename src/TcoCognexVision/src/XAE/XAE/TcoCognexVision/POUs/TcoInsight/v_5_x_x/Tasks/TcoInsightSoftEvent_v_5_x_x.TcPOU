<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="TcoInsightSoftEvent_v_5_x_x" Id="{84ead1b3-dd3c-058f-3740-ce38b4ecad41}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK TcoInsightSoftEvent_v_5_x_x EXTENDS TcoCore.TcoTask
VAR_IN_OUT
    inoIoData : TcoInsightIO_v_5_x_x;
    inoConfig : TcoInsightConfig_v_5_x_x;
    inoStatus : TcoInsightStatus_v_5_x_x;
END_VAR
VAR
    {attribute addProperty Name "<#Soft event number#>"}
    _softEventNumber : UINT;
END_VAR
VAR
    {attribute 'hide'}
    _progress : INT := 0;
    {attribute 'hide'}
    _infoTimer : TON;
    {attribute 'hide'}
    _errorTimer : TON;
    {attribute 'hide'}
    _varInfo : __SYSTEM.VAR_INFO;
    {attribute 'hide'}
    _sb : TcoCore.StringBuilder;
    {attribute 'hide'}
    _inspectionCompleted : BOOL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF Execute() THEN
    IF _progress = 0 THEN
        IF NOT __ISVALIDREF(inoIoData) THEN
            _varInfo := __VARINFO(inoIoData);
            Messenger.Programming(_sb.Clear().Append('<#Invalid reference: #>').Append(_varInfo.Symbol).ToString()).Pin();
        ELSIF NOT __ISVALIDREF(inoConfig) THEN
            _varInfo := __VARINFO(inoConfig);
            Messenger.Programming(_sb.Clear().Append('<#Invalid reference: #>').Append(_varInfo.Symbol).ToString()).Pin();
        ELSIF NOT __ISVALIDREF(inoStatus) THEN
            _varInfo := __VARINFO(inoStatus);
            Messenger.Programming(_sb.Clear().Append('<#Invalid reference: #>').Append(_varInfo.Symbol).ToString()).Pin();
        ELSE
            _progress := _progress + 1;
        END_IF
    END_IF

    IF _progress = 1 THEN
        CallTimers(FALSE);

        IF _softEventNumber > 7 THEN
            Messenger.Programming(_sb.Clear()
                    .Append('<#SoftEvent number: (')
                    .Append(UINT_TO_STRING(_softEventNumber))
                    .Append(') is greater than the maximal value of 7!#>')
                    .ToString()).Pin();

            THIS^.ThrowWhen(TRUE);
        ELSE
            _progress := _progress + 1;
        END_IF
    END_IF

    IF _progress = 2 THEN
        THIS^.inoStatus.ActionDescription :=
            _sb.Clear().Append('<#SoftEvent (number: ').Append(UINT_TO_STRING(THIS^._softEventNumber)).Append(') is running.#>').ToString();

        CallTimers(FALSE);
        _progress := _progress + 1;
    END_IF

    IF _progress = 3 THEN
        THIS^.Messenger.OnCondition(_infoTimer.Q)
            .Warning(_sb.Clear()
                .Append('<#Waiting for the signal TriggerSoftEvent[')
                .Append(UINT_TO_STRING(THIS^._softEventNumber))
                .Append('] to be set!#>')
                .ToString()).Pin();

        THIS^.inoIoData.SoftEventControl.TriggerSoftEvent[_softEventNumber] := TRUE;

        IF THIS^.inoIoData.SoftEventControl.TriggerSoftEventAcknowledge[_softEventNumber] THEN
            CallTimers(FALSE);
            _progress := _progress + 1;
        END_IF
    END_IF

    IF _progress = 4 THEN
        THIS^.Messenger.OnCondition(_infoTimer.Q)
            .Warning(_sb.Clear()
                .Append('<#Waiting for the signal TriggerSoftEvent[')
                .Append(UINT_TO_STRING(THIS^._softEventNumber))
                .Append('] to be reseted!#>')
                .ToString()).Pin();

        THIS^.inoIoData.SoftEventControl.TriggerSoftEvent[_softEventNumber] := FALSE;

        IF NOT THIS^.inoIoData.SoftEventControl.TriggerSoftEventAcknowledge[_softEventNumber] THEN
            CallTimers(FALSE);
            _progress := _progress + 1;
        END_IF
    END_IF

    IF _progress = 5 THEN
        THIS^.DoneWhen(TRUE);
        _progress := 0;
    END_IF

    CallTimers(TRUE);
    THIS^.ThrowWhen(_errorTimer.Q);
END_IF]]></ST>
    </Implementation>
    <Method Name="CallTimers" Id="{bb412097-b685-0ab1-1241-8a8f0b07c00f}">
      <Declaration><![CDATA[METHOD CallTimers
VAR_INPUT
    inValue : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_infoTimer(IN := inValue, PT := THIS^.inoConfig.InfoTime);
_errorTimer(IN := inValue, PT := THIS^.inoConfig.ErrorTime);]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{3a4ffdbb-3156-0101-0aff-2033b262e701}">
      <Declaration><![CDATA[{attribute 'hide'}
METHOD PUBLIC FB_init : BOOL
VAR_INPUT
    bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
    bInCopyCode : BOOL; // if TRUE, the instance afterwards gets moved into the copy code (online change)
    ParentObject : ITcoObject;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="InvokeWithParameters" Id="{473001e7-0934-0795-3af9-489e2947f087}">
      <Declaration><![CDATA[METHOD INTERNAL InvokeWithParameters : ITcoTaskStatus
VAR_INPUT
    inSoftEventNumber : UINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_softEventNumber := inSoftEventNumber;
InvokeWithParameters := THIS^.Invoke();]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnAbort" Id="{db284208-f70d-0b4a-1ffc-602a2c0f107c}">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Executes when task is aborted.
        </summary>
    </docu>
~*)
METHOD PROTECTED OnAbort]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.inoStatus.ActionDescription := _sb.Clear()
    .Append('<#SoftEvent (number: ')
    .Append(UINT_TO_STRING(THIS^._softEventNumber))
    .Append(') was aborted, while not yet completed.#>')
    .ToString();]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnDone" Id="{e8c7e37d-238d-0d2d-0af8-9a3f7e3dd864}">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Executes when task reaches the ```Done``` state .
        </summary>
    </docu>
~*)
METHOD PROTECTED OnDone]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.inoStatus.ActionDescription :=
    _sb.Clear().Append('<#SoftEvent (number: ').Append(UINT_TO_STRING(THIS^._softEventNumber)).Append(') was completed successfully.#>').ToString();]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnError" Id="{c5b81d89-174c-0ecf-0c0c-ee0384ca5f65}">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Executes when task reaches the ```Error``` state.
            <para>
                Do not confuse with <see cref="PlcDocu.TcoCore.TcoTask.WhileError()"/>, that is called cyclically until '''Error''' state is left.
            </para>
        </summary>
    </docu>
~*)
METHOD PROTECTED OnError]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.inoStatus.ActionDescription :=
    _sb.Clear().Append('<#SoftEvent (number: ').Append(UINT_TO_STRING(THIS^._softEventNumber)).Append(') finished with error.#>').ToString();]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnStart" Id="{144a885e-a195-04a8-3fd0-761bcb2aa5d0}">
      <Declaration><![CDATA[METHOD PROTECTED OnStart]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.inoStatus.ActionDescription :=
    _sb.Clear().Append('<#SoftEvent (number: ').Append(UINT_TO_STRING(THIS^._softEventNumber)).Append(') started.#>').ToString();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Restore" Id="{0a4d3c2b-3afa-0479-0d26-5fcbe40da634}">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Restores this instance to the Ready state. Can be called explicitly or from within one of the restore mechanisms.
            <para>
                See also <see cref="PlcDocu.TcoCore.TcoTask.AutoRestorable()"/>
            </para>
        </summary>
    </docu>
~*)
METHOD Restore : ITcoRestorable]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.Restore();
_progress := 0;
CallTimers(FALSE);
Messenger.UnPin();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>