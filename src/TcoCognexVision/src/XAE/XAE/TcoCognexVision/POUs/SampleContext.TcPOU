<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="SampleContext" Id="{c96f4cb6-dc5b-0c8b-314d-51db619ff818}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK SampleContext EXTENDS TcoCore.TcoContext
VAR
	_sampleComponent : SampleComponent(THIS^);

	_dm260 : TcoDataman_v_5_x_x(THIS^);
	_dm8700 : TcoDataman_v_5_x_x(THIS^);
	clear_dm260: BOOL;
	read_dm260: BOOL;
	restore_dm260: BOOL;
	clear_dm8700: BOOL;
	read_dm8700: BOOL;
	restore_dm8700: BOOL;
	
	_acquiringRTRIG : R_TRIG;
	_acquiringFTRIG : R_TRIG;
	_acquiringRTRIGcount : ULINT;
	_acquiringFTRIGcount : ULINT;
	
	_ResultAvailableRTRIG : R_TRIG;
	_ResultAvailableFTRIG : R_TRIG;
	_ResultAvailableRTRIGcount : ULINT;
	_ResultAvailableFTRIGcount : ULINT;
	
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="Main" Id="{417543fe-86a7-0e39-3562-9a17532012cf}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Main method of the TcoContext. This is the entry point of any control logic that belongs to this context. 
			The call of this method is ensured by calling the <c>InstanceName.Run()</c> method, and it must not be called explicitly.
			This method is abstract, and it must be overridden in derived block.
		</summary>
	</docu>
~*)
METHOD PROTECTED  Main]]></Declaration>
      <Implementation>
        <ST><![CDATA[_sampleComponent.Service();
_sampleComponent();


_dm260(inoIoData:= IO.dm260);
_dm8700(inoIoData:= IO.dm8700);

_dm260.Config.ContinuousReading := TRUE;
_dm8700.Config.ContinuousReading := TRUE;


IF read_dm260 THEN
	_dm260.Read();
	read_dm260 := FALSE;
END_IF

IF clear_dm260 THEN
	_dm260.ClearResultData();
	clear_dm260 := FALSE;
END_IF

IF restore_dm260 THEN
	_dm260.Restore();
	restore_dm260 := FALSE;
END_IF

IF _dm260.ReadTask.Done THEN
	read_dm260 := TRUE;
END_IF

IF read_dm8700 THEN
	_dm8700.Read();
	read_dm8700 := FALSE;
END_IF

IF clear_dm8700 THEN
	_dm8700.ClearResultData();
	clear_dm8700 := FALSE;
END_IF

IF restore_dm8700 THEN
	_dm8700.Restore();
	restore_dm8700 := FALSE;
END_IF

//IF _dm8700.ReadTask.Done THEN
//	read_dm8700 := TRUE;
//END_IF

_acquiringRTRIG(CLK := IO.dm8700.AcquisitionStatus.Acquiring);
_acquiringFTRIG(CLK := IO.dm8700.AcquisitionStatus.Acquiring);
IF _acquiringRTRIG.Q THEN
	_acquiringRTRIGcount := _acquiringRTRIGcount + 1;
END_IF
IF _acquiringFTRIG.Q THEN
	_acquiringFTRIGcount := _acquiringFTRIGcount + 1;
END_IF

_ResultAvailableRTRIG(CLK := IO.dm8700.ResultsStatus.ResultsAvailable);
_ResultAvailableFTRIG(CLK := IO.dm8700.ResultsStatus.ResultsAvailable);
IF _ResultAvailableRTRIG.Q THEN
	_ResultAvailableRTRIGcount := _ResultAvailableRTRIGcount + 1;
END_IF
IF _ResultAvailableFTRIG.Q THEN
	_ResultAvailableFTRIGcount := _ResultAvailableFTRIGcount + 1;
END_IF

//IO.dm8700.ResultsControl.ResultsAcknowledge := IO.dm8700.ResultsStatus.ResultsAvailable;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>