<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="StopMovementsTask" Id="{2f02c48a-4e74-0694-235b-5b0d69d14979}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK StopMovementsTask EXTENDS TcoAbbRoboticsTask
VAR
    _stopType : TcoAbstractions.eTcoRoboticsStopType;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF Execute() THEN
    IF _progress = 0 THEN
        IF NOT __ISVALIDREF(inoControl) THEN
            _varInfo := __VARINFO(inoControl);
            Messenger.Programming(_sb.Clear().Append('<#Invalid reference: #>').Append(_varInfo.Symbol).ToString()).Pin();
        ELSIF NOT __ISVALIDREF(inoConfig) THEN
            _varInfo := __VARINFO(inoConfig);
            Messenger.Programming(_sb.Clear().Append('<#Invalid reference: #>').Append(_varInfo.Symbol).ToString()).Pin();
        ELSIF NOT __ISVALIDREF(inoStatus) THEN
            _varInfo := __VARINFO(inoStatus);
            Messenger.Programming(_sb.Clear().Append('<#Invalid reference: #>').Append(_varInfo.Symbol).ToString()).Pin();
        ELSE
            _progress := _progress + 1;
        END_IF
    END_IF

    IF _progress = 1 THEN
        inoControl.SoftStop := TRUE;
        inoControl.QuickStop := FALSE;

        IF _stopType = TcoAbstractions.eTcoRoboticsStopType.Quick THEN
            inoControl.SoftStop := FALSE;
            inoControl.QuickStop := TRUE;
        END_IF

        IF inoStatus.State.MoveInactive THEN
            inoControl.SoftStop := FALSE;
            inoControl.QuickStop := FALSE;
        END_IF
    END_IF;

    _varInfo := __VARINFO(inoStatus.State.MoveInactive);
    THIS^.Messenger.OnCondition(_infoTimer.Q).Warning(_sb.Clear().Append('<# Waiting for signal: #>').Append(_varInfo.Symbol).ToString());
    DoneWhen(inoStatus.State.MoveInactive);
    CallTimers(TRUE);
    THIS^.ThrowWhen(_errorTimer.Q);
END_IF

IF THIS^.Error AND NOT _errorMessage.Pinned THEN
    THIS^.Restore();
END_IF]]></ST>
    </Implementation>
    <Method Name="FB_init" Id="{142cad7f-de40-069d-2c0b-c1a41bcca7c0}">
      <Declaration><![CDATA[METHOD PUBLIC FB_init : BOOL
VAR_INPUT
    bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
    bInCopyCode : BOOL; // if TRUE, the instance afterwards gets moved into the copy code (online change)
    ParentObject : ITcoObject;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="InvokeWithParams" Id="{b3efd7f2-ec5e-0322-0f18-329f942ef450}">
      <Declaration><![CDATA[METHOD INTERNAL InvokeWithParams : ITcoTaskStatus
VAR_INPUT
    inStopType : eTcoRoboticsStopType;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_stopType := inStopType;
InvokeWithParams := THIS^.Invoke();]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnAbort" Id="{23c55b90-90b8-069d-380c-76be15ceded9}">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Executes when task is aborted.
        </summary>
    </docu>
~*)
METHOD PROTECTED OnAbort]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF __ISVALIDREF(inoStatus) THEN
    THIS^.inoStatus.ActionDescription := '<#Stopping movements was aborted, while not yet completed!#>';
END_IF;

inoControl.SoftStop := FALSE;
inoControl.QuickStop := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnDone" Id="{c916951a-baa9-0a80-3941-3cddff7c31e9}">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Executes when task reaches the ```Done``` state .
        </summary>
    </docu>
~*)
METHOD PROTECTED OnDone]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF __ISVALIDREF(inoStatus) THEN
    THIS^.inoStatus.ActionDescription := '<#Stopping movements was completed successfully.#>';
END_IF;

_progress := 0;]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnError" Id="{5fbf1348-251c-01dd-27c9-ecf7cb42cc0f}">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Executes when task reaches the ```Error``` state.
        </summary>
    </docu>
~*)
METHOD PROTECTED OnError
VAR
    description : STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.inoStatus.ActionDescription := '<#Stopping movement finished with error.#>';

IF __ISVALIDREF(inoStatus) THEN
    THIS^.inoStatus.ActionDescription := description;
END_IF;

THIS^._errorMessage.Error(_sb.Clear().Append(description).Append(' To restore acknowledge this alarm.').ToString()).Pin();]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnStart" Id="{e13b3c5d-22fb-0cb2-36e3-f6e6f4b9159a}">
      <Declaration><![CDATA[METHOD PROTECTED OnStart]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF __ISVALIDREF(inoStatus) THEN
    THIS^.inoStatus.ActionDescription := '<#Stopping movements started.#>';
END_IF;

CallTimers(FALSE);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Restore" Id="{f7fa4643-b1b6-03de-2ea5-6bcc28e4c3cb}">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Restores this instance to the Ready state. Can be called explicitly or from within one of the restore mechanisms.
            <para>
                See also <see cref="PlcDocu.TcoCore.TcoTask.AutoRestorable()"/>
            </para>
        </summary>
    </docu>
~*)
METHOD Restore : ITcoRestorable]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.Restore();
inoControl.SoftStop := FALSE;
inoControl.QuickStop := FALSE;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>