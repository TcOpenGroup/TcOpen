<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="TcoIrc5_v_1_x_x" Id="{f69c7d84-668d-0b04-12d8-3ba5e065c73c}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK TcoIrc5_v_1_x_x EXTENDS TcoIo.TcoPnIoComponent  IMPLEMENTS TcoAbstractions.ITcoRobotics
VAR_INPUT
    inEnable : BOOL;
END_VAR
VAR_OUTPUT
END_VAR
VAR_IN_OUT
    inoData : TcoIrc5_IO_v_1_x_x;
END_VAR
VAR
    

	{attribute addProperty Name "<#Status#>"}
    {attribute clr [ReadOnly()]}
    _status : TcoAbbRobotics_Status_v_1_x_x;
	{attribute addProperty Name "<#Control#>"}
	_control 	: TcoAbbRobotics_Control_v_1_x_x;
	{attribute addProperty Name "<#Config#>"}
    _config : TcoAbbRobotics_Config_v_1_x_x;
	{attribute addProperty Name "<#PN Error#>"}
    {attribute clr [ReadOnly()]}
    _pnError : BOOL;

	_someTaskIsActive: BOOL;

	_stopTasksAreActive: BOOL;
END_VAR
VAR
	{attribute addProperty Name "<#Start at Main#>"}
    _startAtMainTask : StartAtMainTask(THIS^);
	
	 {attribute addProperty Name "<#Start motors and program#>"}
    _startMotorsAndProgramTask : StartMotorsAndProgramTask(THIS^);
	
	 {attribute addProperty Name "<#Start program#>"}
    _startProgramTask : StartProgramTask(THIS^);
	
	{attribute addProperty Name "<#Start motors#>"}
    _startMotorsTask : StartMotorsTask(THIS^);
	
  	{attribute addProperty Name "<#Start movements#>"}
    _startMovementsTask : StartMovementsTask(THIS^);
	
	{attribute addProperty Name "<#Start motors program and movements#>"}
    _startMotorsProgramAndMovementsTask : StartMotorsProgramAndMovementsTask(THIS^);
	
  	
	
	
	 {attribute addProperty Name "<#Stop movements#>"}
    _stopMovementsTask : StopMovementsTask(THIS^);

	 {attribute addProperty Name "<#Stop movenents and program#>"}
    _stopMovementsAndProgramTask : StopMovementsAndProgramTask(THIS^);
	
	{attribute addProperty Name "<#Stop program#>"}
    _stopProgramTask : StopProgramTask(THIS^);
	
	{attribute addProperty Name "<#Stop motors#>"}
    _stopMotorsTask : StopMotorsTask(THIS^);
	

    {attribute addProperty Name "<#Restore#>"}
    _restoreTask : TcoCore.TcoTask(THIS^);
	

  
   

  

END_VAR

VAR
	{attribute 'hide'}
	_sb : TcoCore.StringBuilder;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT __ISVALIDREF(inoData) THEN
    Messenger.Post('Invalid reference', TcoCore.eMessageCategory.ProgrammingError);
    RETURN;
END_IF

SUPER^(inPnIoBoxState := THIS^.inoData.PnIoBoxState,inPnIoBoxDiag := THIS^.inoData.PnIoBoxDiag);
_pnError:= not _profinetReady;


UpdateStatus();
_stopTasksAreActive :=  _stopMovementsTask.Busy 
			AND _stopMovementsAndProgramTask.Busy 
			AND _stopProgramTask.Busy
			AND _stopMotorsTask.Busy;
			
_startAtMainTask.Enabled:=NOT _stopTasksAreActive;
_startAtMainTask(inoConfig:=_config,inoControl:=_control,inoStatus:=_status);


_startProgramTask.Enabled:=NOT _stopTasksAreActive;
_startProgramTask(inoConfig:=_config,inoControl:=_control,inoStatus:=_status);

_startMotorsTask.Enabled:=NOT _stopTasksAreActive AND NOT _startMotorsProgramAndMovementsTask.Busy AND NOT _startMotorsAndProgramTask.Busy;
_startMotorsTask(inoConfig:=_config,inoControl:=_control,inoStatus:=_status);

_startMotorsAndProgramTask.Enabled:=NOT _stopTasksAreActive AND NOT _startProgramTask.Busy AND NOT _startMotorsTask.Busy;
_startMotorsAndProgramTask(inoConfig:=_config,inoControl:=_control,inoStatus:=_status);

_startMovementsTask.Enabled:=NOT _startMotorsProgramAndMovementsTask.Busy AND NOT _stopMotorsTask.Busy;
_startMovementsTask(inoConfig:=_config,inoControl:=_control,inoStatus:=_status);

_startMotorsProgramAndMovementsTask.Enabled:=NOT _startMovementsTask.Busy  AND NOT _stopMotorsTask.Busy;
_startMotorsProgramAndMovementsTask(refStartMotorsAndProgramTask:=_startMotorsAndProgramTask, inoConfig:=_config,inoControl:=_control,inoStatus:=_status);


_stopMovementsTask.Enabled:=TRUE;
_stopMovementsTask(inoConfig:=_config,inoControl:=_control,inoStatus:=_status);

_stopMotorsTask.Enabled:=TRUE;
_stopMotorsTask(inoConfig:=_config,inoControl:=_control,inoStatus:=_status);

_stopProgramTask.Enabled:=TRUE;
_stopProgramTask(inoConfig:=_config,inoControl:=_control,inoStatus:=_status);

_stopMovementsAndProgramTask.Enabled:=NOT _stopProgramTask.Busy AND NOT _stopProgramTask.Busy;
_stopMovementsAndProgramTask(inoConfig:=_config,inoControl:=_control,inoStatus:=_status);



//*************RESTORE********************

_restoreTask.Enabled := TRUE;
IF _restoreTask.Execute() THEN
	Restore();
	_restoreTask.DoneWhen(TRUE);
END_IF
//****************************************

_someTaskIsActive := _startAtMainTask.Busy 
					OR _startMotorsAndProgramTask.Busy
					OR _startMovementsTask.Busy
					OR _startMovementsTask.Busy
					OR _stopMovementsTask.Busy
					OR _stopMovementsAndProgramTask.Busy
					OR _stopProgramTask.Busy;
					

//do not publish diagnostic message when component is not used
IF _someTaskIsActive THEN

	IF(_status.State.EmgStop) THEN
		Messenger.Error('<#Emergency stop active#>');
	END_IF;
	IF(NOT _status.State.SafetyOk) THEN
		Messenger.Warning('<#Safety Error #>');
	END_IF;
	IF(_status.State.ProgExecError) THEN
		Messenger.Error('<#Program execution error see robot panel for details#>');
	END_IF;
  
END_IF;

IF(_status.State.Error) THEN Messenger.Error(_sb.Clear().Append('<#Drive error no #>').Append(UDINT_TO_STRING(_status.State.EventId)).Append(' |[[0]AdvancedDiagnosticMessage]|').Append('.').Append('For details see the service mode').ToString()); END_IF;


UpdateControl();]]></ST>
    </Implementation>
    <Folder Name="Operations" Id="{acde95d4-0cbe-0c65-2677-4c7b09c67f72}" />
    <Folder Name="Task" Id="{856fde35-659a-0b17-24e8-9fe24942be4b}" />
    <Property Name="Config" Id="{4e5f58ae-d7cf-0a63-30de-014e46b70055}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Gets the configuration of the IRC 5. 					
		</summary>			
	</docu>	
~*)
PROPERTY Config : REFERENCE TO TcoAbbRobotics_Config_v_1_x_x]]></Declaration>
      <Get Name="Get" Id="{4195b97f-af7d-0675-3162-f9833500ee67}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Config REF= _config;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Control" Id="{17acc0e5-2533-08c0-15cf-e005baee4a02}">
      <Declaration><![CDATA[PROPERTY PUBLIC Control : REFERENCE TO TcoAbbRobotics_Control_v_1_x_x]]></Declaration>
      <Get Name="Get" Id="{ab4eb822-d0f8-0dcf-28c6-9c66791555b8}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Control REF= _control;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="FB_init" Id="{976c42cc-f2ca-074f-231e-6e359f8ccf77}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
  	ParentObject : ITcoObject;	
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="Restore" Id="{0fb81bba-e8fe-0489-0792-56731e027b03}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Restores this instance to the Ready state. Can be called explicitly or from within one of the restore mechanisms.	
		</summary>			
	</docu>	
~*)
METHOD Restore : ITcoRestorable]]></Declaration>
      <Implementation>
        <ST><![CDATA[RestoreTasks();
_control.ActionNo:=255;
_control.GlobalSpeed:=0;
_control.Interupt:=FALSE;
_control.LoadAndStartProg:=FALSE;
_control.LoadProg:=FALSE;
_control.MotorOff:=FALSE;
_control.MotorOn:=FALSE;
_control.MotorOnAndStart:=FALSE;
_control.PointNo:=0;
_control.QuickStop:=FALSE;
_control.ResetEmgStop:=FALSE;
_control.ResetError:=FALSE;
_control.SoftStop:=FALSE;
_control.StartAtMain:=FALSE;
_control.StartProgram:=FALSE;
_control.StopCycle:=FALSE;
_control.StopInstruction:=FALSE;
_control.StopProgram:=FALSE;
_control.LimitSpeed := FALSE;
_control.ToolNo:=0;
_control.WorkobjectNo:=0;
_control.PointNo:=0;
_control.UserSpecSpeed1:=0;
_control.UserSpecSpeed2:=0;
_control.Coordinates.X:=0;
_control.Coordinates.Y:=0;
_control.Coordinates.Z:=0;
_control.Coordinates.Rx:=0;
_control.Coordinates.Ry:=0;
_control.Coordinates.Rz:=0;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="RestoreTasks" Id="{97e8fb45-7d93-0925-0be4-c256de5e60bf}">
      <Declaration><![CDATA[METHOD INTERNAL RestoreTasks 
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//_resetTask.Restore();
_startAtMainTask.Restore();
_startMovementsTask.Restore();
_startProgramTask.Restore();
_startMotorsTask.Restore();
_stopMotorsTask.Restore();
_startMotorsProgramAndMovementsTask.Restore();
_stopMovementsTask.Restore();
_startMotorsAndProgramTask.Restore();
_stopMovementsAndProgramTask.Restore();
_stopProgramTask.Restore();]]></ST>
      </Implementation>
    </Method>
    <Method Name="ServiceMode" Id="{34f6919d-5598-0a0f-02d3-5a479bc69fcf}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
		    Custom service (manual, maintenance) logic.
			This method must be implemented in derived class.
		</summary>			
	</docu>	
~*)
METHOD PROTECTED ServiceMode]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="StartAtMain" Id="{ea9f6b51-057d-07f6-235b-fb46b73a85d4}" FolderPath="Operations\">
      <Declaration><![CDATA[METHOD PUBLIC StartAtMain : TcoCore.ITcoTaskStatus
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[StartAtMain:=_startAtMainTask.Invoke();]]></ST>
      </Implementation>
    </Method>
    <Property Name="StartAtMainTask" Id="{c9f929e4-fe54-010b-0ed3-741d326d74a0}" FolderPath="Task\">
      <Declaration><![CDATA[PROPERTY StartAtMainTask : TcoCore.ITcoTaskStatus]]></Declaration>
      <Get Name="Get" Id="{49fa7ab7-8eab-0b19-2915-f4608284e5f2}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[StartAtMainTask := _startAtMainTask;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="StartMotors" Id="{1e2f7d01-74ee-0757-3c16-047ec062c231}" FolderPath="Operations\">
      <Declaration><![CDATA[METHOD PUBLIC StartMotors : TcoCore.ITcoTaskStatus]]></Declaration>
      <Implementation>
        <ST><![CDATA[StartMotors:=_startMotorsTask.Invoke();]]></ST>
      </Implementation>
    </Method>
    <Method Name="StartMotorsAndProgram" Id="{a78c5de5-f9c0-0501-2765-147894ba1e9c}" FolderPath="Operations\">
      <Declaration><![CDATA[METHOD StartMotorsAndProgram : TcoCore.ITcoTaskStatus
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[StartMotorsAndProgram := THIS^._startMotorsAndProgramTask.Invoke();]]></ST>
      </Implementation>
    </Method>
    <Property Name="StartMotorsAndProgramTask" Id="{8631f3ae-0b2a-0f19-00f1-dd13f1723abd}" FolderPath="Task\">
      <Declaration><![CDATA[PROPERTY StartMotorsAndProgramTask : TcoCore.ITcoTaskStatus]]></Declaration>
      <Get Name="Get" Id="{56409fca-fbc6-063b-1e4a-c35f0307a84c}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[StartMotorsAndProgramTask := _startMotorsAndProgramTask;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="StartMotorsProgramAndMovements" Id="{571ba689-d484-0a50-0c26-074008aaccd2}" FolderPath="Operations\">
      <Declaration><![CDATA[METHOD PUBLIC StartMotorsProgramAndMovements : TcoCore.ITcoTaskStatus
VAR_INPUT
	inData : TcoRoboticsMovementsParams;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[StartMotorsProgramAndMovements:=_startMotorsProgramAndMovementsTask.InvokeWithParams(inData);]]></ST>
      </Implementation>
    </Method>
    <Property Name="StartMotorsProgramAndMovementsTask" Id="{1f83c573-5fef-0a99-0794-92c84b389a5d}" FolderPath="Task\">
      <Declaration><![CDATA[PROPERTY StartMotorsProgramAndMovementsTask : TcoCore.ITcoTaskStatus]]></Declaration>
      <Get Name="Get" Id="{08a2263c-37be-013c-2f91-2248e30dbeb0}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[StartMotorsProgramAndMovementsTask := _startMotorsProgramAndMovementsTask;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="StartMotorsTask" Id="{0565e347-5309-0fbc-2aa8-91eb79e7a76c}" FolderPath="Task\">
      <Declaration><![CDATA[PROPERTY StartMotorsTask : TcoCore.ITcoTaskStatus]]></Declaration>
      <Get Name="Get" Id="{18af054b-050a-0019-2657-6dbc6a38f785}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[StartMotorsTask := _startMotorsTask;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="StartMovements" Id="{476714df-c0e7-0e63-31cb-e586ea148aa6}" FolderPath="Operations\">
      <Declaration><![CDATA[METHOD PUBLIC StartMovements : TcoCore.ITcoTaskStatus
VAR_INPUT
	inData : TcoRoboticsMovementsParams;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[StartMovements:=_startMovementsTask.InvokeWithParams(inData);]]></ST>
      </Implementation>
    </Method>
    <Property Name="StartMovementsTask" Id="{b42fb63f-9010-070c-278a-7ba06274ce59}" FolderPath="Task\">
      <Declaration><![CDATA[PROPERTY StartMovementsTask : TcoCore.ITcoTaskStatus]]></Declaration>
      <Get Name="Get" Id="{9225fee7-f2e2-0ae0-399b-6f3b2dca815f}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[StartMovementsTask := _startMovementsTask;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="StartProgram" Id="{ca742134-d22b-05a7-2174-0f27c4d651ce}" FolderPath="Operations\">
      <Declaration><![CDATA[METHOD PUBLIC StartProgram : TcoCore.ITcoTaskStatus]]></Declaration>
      <Implementation>
        <ST><![CDATA[StartProgram:=_startProgramTask.Invoke();]]></ST>
      </Implementation>
    </Method>
    <Property Name="StartProgramTask" Id="{c36152bc-0c0e-0fff-194c-46b4825c83b7}" FolderPath="Task\">
      <Declaration><![CDATA[PROPERTY StartProgramTask : TcoCore.ITcoTaskStatus]]></Declaration>
      <Get Name="Get" Id="{0d8982aa-d1df-087d-2bf6-385f91670ab2}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[StartProgramTask := _startProgramTask;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Status" Id="{49fa4145-9a51-02d8-188d-657be027aa08}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Gets the status of the IRC5. 					
		</summary>			
	</docu>	
~*)
PROPERTY Status : REFERENCE TO TcoAbbRobotics_Status_v_1_x_x]]></Declaration>
      <Get Name="Get" Id="{757bab27-7ac6-0907-0a76-cfad960d05de}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Status REF= _status;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="StopMotors" Id="{7bbac84a-5f07-033a-18f8-61438ae0f90a}" FolderPath="Operations\">
      <Declaration><![CDATA[METHOD PUBLIC StopMotors : TcoCore.ITcoTaskStatus
]]></Declaration>
      <Implementation>
        <ST><![CDATA[StopMotors:=_stopMotorsTask.Invoke();]]></ST>
      </Implementation>
    </Method>
    <Property Name="StopMotorsTask" Id="{40a6e2f9-db0c-0dc7-030a-e8f76bb7d2f8}" FolderPath="Task\">
      <Declaration><![CDATA[PROPERTY StopMotorsTask : TcoCore.ITcoTaskStatus]]></Declaration>
      <Get Name="Get" Id="{e2bc3b5c-109d-0896-0bf8-cc028a62a837}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[StopMotorsTask := _stopMotorsTask;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="StopMovements" Id="{9d6e7a28-f874-05a8-21d0-df4d46dd5960}" FolderPath="Operations\">
      <Declaration><![CDATA[METHOD PUBLIC StopMovements : TcoCore.ITcoTaskStatus
VAR_INPUT
	inStopType : eTcoRoboticsStopType;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[StopMovements:=_stopMovementsTask.InvokeWithParams(inStopType);]]></ST>
      </Implementation>
    </Method>
    <Method Name="StopMovementsAndProgram" Id="{c57d709c-de4e-0eaf-2cb5-c12e46dd179d}" FolderPath="Operations\">
      <Declaration><![CDATA[METHOD PUBLIC StopMovementsAndProgram : TcoCore.ITcoTaskStatus
VAR_INPUT
	inStopType : eTcoRoboticsStopType;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[StopMovementsAndProgram:=_stopMovementsAndProgramTask.InvokeWithParams(inStopType);]]></ST>
      </Implementation>
    </Method>
    <Property Name="StopMovementsAndProgramTask" Id="{420e4796-bb5e-02bd-06c8-9bf7ab6375f4}" FolderPath="Task\">
      <Declaration><![CDATA[PROPERTY StopMovementsAndProgramTask : TcoCore.ITcoTaskStatus]]></Declaration>
      <Get Name="Get" Id="{b85a5aad-5349-0cdc-1388-0ccbcfadca28}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[StopMovementsAndProgramTask := _stopMovementsAndProgramTask;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="StopMovementsTask" Id="{9dfd68c1-9a63-0ad6-1687-848858c5aed5}" FolderPath="Task\">
      <Declaration><![CDATA[PROPERTY StopMovementsTask : TcoCore.ITcoTaskStatus]]></Declaration>
      <Get Name="Get" Id="{3c15b8ee-da6e-0375-3f6b-c43a9a17bd18}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[StopMovementsTask := _stopMovementsTask;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="StopProgram" Id="{f3c6e01e-63d8-0565-146b-1b4e8c293eb5}" FolderPath="Operations\">
      <Declaration><![CDATA[METHOD PUBLIC StopProgram : TcoCore.ITcoTaskStatus
]]></Declaration>
      <Implementation>
        <ST><![CDATA[StopProgram:=_stopProgramTask.Invoke();]]></ST>
      </Implementation>
    </Method>
    <Property Name="StopProgramTask" Id="{693e064e-113f-0c6a-002b-e290101210a7}" FolderPath="Task\">
      <Declaration><![CDATA[PROPERTY StopProgramTask : TcoCore.ITcoTaskStatus]]></Declaration>
      <Get Name="Get" Id="{102b1b09-c6a6-0ca2-075a-6220b123dd29}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[StopProgramTask := _stopProgramTask;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="UpdateControl" Id="{f52cfea0-166c-05d9-31d9-96560130794b}">
      <Declaration><![CDATA[METHOD INTERNAL UpdateControl
VAR_INPUT
END_VAR

VAR
	index: INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//SYSTEM OUTPUTS
index:=0;
inoData.Out.Outputs[index].0	:=		_control.Interupt;    
inoData.Out.Outputs[index].1	:=		_control.LoadProg;    
inoData.Out.Outputs[index].2 	:= 		_control.LoadAndStartProg; 
inoData.Out.Outputs[index].3 	:= 		_control.MotorOff;
inoData.Out.Outputs[index].4 	:= 		_control.MotorOn;   
inoData.Out.Outputs[index].5 	:= 		_control.MotorOnAndStart; 
inoData.Out.Outputs[index].6 	:= 		_control.ResetEmgStop;    
inoData.Out.Outputs[index].7 	:= 		_control.ResetError; 

index:=1;
inoData.Out.Outputs[index].0 	:= 		_control.StartProgram;    
inoData.Out.Outputs[index].1 	:= 		_control.StartAtMain;    
inoData.Out.Outputs[index].2 	:= 		_control.StopProgram;    
inoData.Out.Outputs[index].3 	:= 		_control.QuickStop;    
inoData.Out.Outputs[index].4 	:= 		_control.SoftStop;    
inoData.Out.Outputs[index].5 	:= 		_control.StopCycle;    
inoData.Out.Outputs[index].6 	:= 		_control.StopInstruction;    
inoData.Out.Outputs[index].7 	:= 		_control.LimitSpeed;    


	
//Tool signals
index:=2;
inoData.Out.Outputs[index].0 	:= 		_control.Tool_1_Retract;    
inoData.Out.Outputs[index].1 	:= 		_control.Tool_1_Extend;    
inoData.Out.Outputs[index].2	:= 		_control.Tool_2_Retract;    
inoData.Out.Outputs[index].3	:= 		_control.Tool_2_Extend;    
inoData.Out.Outputs[index].4	:= 		_control.Tool_3_Retract;    
inoData.Out.Outputs[index].5	:= 		_control.Tool_3_Extend;    
inoData.Out.Outputs[index].6 	:= 		_control.Tool_4_Retract;    
inoData.Out.Outputs[index].7	:= 		_control.Tool_4_Extend;    
//master mode  such as manual/auto ....
index:=3;
inoData.Out.Outputs[index]:= _control.MasterMode;
//zone
index:=5;
inoData.Out.Outputs[index]:= _control.Zone;
//position
index:=6;
inoData.Out.Outputs[index]:= _control.InPosition;

//
//Movement parameters
index:=7;
inoData.Out.Outputs[index]:= _control.ActionNo;
index:=8;
inoData.Out.Outputs[index]:= _control.GlobalSpeed;
index:=9;
inoData.Out.Outputs[index]:= _control.ToolNo;
index:=10;
inoData.Out.Outputs[index]:= _control.WorkobjectNo;
index:=11;
inoData.Out.Outputs[index]:= _control.PointNo;
index:=12;
TcoUtilities.TcoDintToBytes(inFormat:=TcoUtilities.eTcoDataFormat.LittleEndian,
							inValue:=REAL_TO_DINT(_control.UserSpecSpeed1),
							outByte0:=inoData.Out.Outputs[index],
							outByte1:=inoData.Out.Outputs[index+1],
							outByte2:=inoData.Out.Outputs[index+2],
							outByte3:=inoData.Out.Outputs[index+3]);
index:=16;
TcoUtilities.TcoDintToBytes(inFormat:=TcoUtilities.eTcoDataFormat.LittleEndian,
							inValue:=REAL_TO_DINT(_control.UserSpecSpeed2),
							outByte0:=inoData.Out.Outputs[index],
							outByte1:=inoData.Out.Outputs[index+1],
							outByte2:=inoData.Out.Outputs[index+2],
							outByte3:=inoData.Out.Outputs[index+3]);

////Coordinates
index:=20;
TcoUtilities.TcoDintToBytes(inFormat:=TcoUtilities.eTcoDataFormat.LittleEndian,
							inValue:=REAL_TO_DINT((_control.Coordinates.X+10000.0)*10000.0),
							outByte0:=inoData.Out.Outputs[index],
							outByte1:=inoData.Out.Outputs[index+1],
							outByte2:=inoData.Out.Outputs[index+2],
							outByte3:=inoData.Out.Outputs[index+3]);
index:=24;
TcoUtilities.TcoDintToBytes(inFormat:=TcoUtilities.eTcoDataFormat.LittleEndian,
							inValue:=REAL_TO_DINT((_control.Coordinates.Y+10000.0)*10000.0),
							outByte0:=inoData.Out.Outputs[index],
							outByte1:=inoData.Out.Outputs[index+1],
							outByte2:=inoData.Out.Outputs[index+2],
							outByte3:=inoData.Out.Outputs[index+3]);
index:=28;
TcoUtilities.TcoDintToBytes(inFormat:=TcoUtilities.eTcoDataFormat.LittleEndian,
							inValue:=REAL_TO_DINT((_control.Coordinates.Z+10000.0)*10000.0),
							outByte0:=inoData.Out.Outputs[index],
							outByte1:=inoData.Out.Outputs[index+1],
							outByte2:=inoData.Out.Outputs[index+2],
							outByte3:=inoData.Out.Outputs[index+3]);
index:=32;
TcoUtilities.TcoDintToBytes(inFormat:=TcoUtilities.eTcoDataFormat.LittleEndian,
							inValue:=REAL_TO_DINT((_control.Coordinates.Rx+360.0)*10000.0),
							outByte0:=inoData.Out.Outputs[index],
							outByte1:=inoData.Out.Outputs[index+1],
							outByte2:=inoData.Out.Outputs[index+2],
							outByte3:=inoData.Out.Outputs[index+3]);
index:=36;
TcoUtilities.TcoDintToBytes(inFormat:=TcoUtilities.eTcoDataFormat.LittleEndian,
							inValue:=REAL_TO_DINT((_control.Coordinates.Ry+360.0)*10000.0),
							outByte0:=inoData.Out.Outputs[index],
							outByte1:=inoData.Out.Outputs[index+1],
							outByte2:=inoData.Out.Outputs[index+2],
							outByte3:=inoData.Out.Outputs[index+3]);
index:=40;
TcoUtilities.TcoDintToBytes(inFormat:=TcoUtilities.eTcoDataFormat.LittleEndian,
							inValue:=REAL_TO_DINT((_control.Coordinates.Rz+360.0)*10000.0),
							outByte0:=inoData.Out.Outputs[index],
							outByte1:=inoData.Out.Outputs[index+1],
							outByte2:=inoData.Out.Outputs[index+2],
							outByte3:=inoData.Out.Outputs[index+3]);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="UpdateStatus" Id="{c2ad451a-986a-0a2f-3768-7d204bb4e8f0}">
      <Declaration><![CDATA[METHOD INTERNAL UpdateStatus
VAR
    _message : STRING(125);

	tempOut: BYTE;
	index: INT;
	_bytes: DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//SYSTEM INPUTS
index:=0;
_status.State.AutoOn := inoData.In.Inputs[index].0;
_status.State.CycleOn := inoData.In.Inputs[index].1;
_status.State.EmgStop := inoData.In.Inputs[index].2;
_status.State.Error := inoData.In.Inputs[index].3;
_status.State.MoveActive := inoData.In.Inputs[index].4;
_status.State.MoveInactive := inoData.In.Inputs[index].5;
_status.State.MotorOff := inoData.In.Inputs[index].6;
_status.State.MotorOn := inoData.In.Inputs[index].7;

index:=1;
_status.State.MotorOffState := inoData.In.Inputs[index].0;
_status.State.MotorOnState := inoData.In.Inputs[index].1;
_status.State.ProgExecError := inoData.In.Inputs[index].2;
_status.State.SafetyOk := inoData.In.Inputs[index].3;
_status.State.SystemInputBusy := inoData.In.Inputs[index].4;
_status.State.PpMoved := inoData.In.Inputs[index].5;
_status.State.MotionSupervision := inoData.In.Inputs[index].6;
_status.State.BatteryLow := inoData.In.Inputs[index].7;


//Area/positions flags this  should be obsolete because Zones and InPosition is used as byte below
index:=2;
_status.State.InArea_1 := inoData.In.Inputs[index].0;
_status.State.InArea_2 := inoData.In.Inputs[index].1;
_status.State.InArea_3 := inoData.In.Inputs[index].2;
_status.State.InArea_4 := inoData.In.Inputs[index].3;
_status.State.InPosition_1 := inoData.In.Inputs[index].4;
_status.State.InPosition_2 := inoData.In.Inputs[index].5;
_status.State.InPosition_3 := inoData.In.Inputs[index].6;
_status.State.InPosition_4 := inoData.In.Inputs[index].7;
//
//Tool signals
index:=3;
_status.State.Tool_1_Retract := inoData.In.Inputs[index].0;
_status.State.Tool_1_Extend := inoData.In.Inputs[index].1;
_status.State.Tool_2_Retract := inoData.In.Inputs[index].2;
_status.State.Tool_2_Extend := inoData.In.Inputs[index].3;
_status.State.Tool_3_Retract := inoData.In.Inputs[index].4;
_status.State.Tool_3_Extend := inoData.In.Inputs[index].5;
_status.State.Tool_4_Retract := inoData.In.Inputs[index].6;
_status.State.Tool_4_Extend := inoData.In.Inputs[index].7;

//Safety signals
index:=4;
_status.State.AutoStop_1 := inoData.In.Inputs[index].0;
_status.State.AutoStop_2 := inoData.In.Inputs[index].1;
_status.State.EmergencyStop_1 := inoData.In.Inputs[index].2;
_status.State.EmergencyStop_2 := inoData.In.Inputs[index].3;
_status.State.GeneralStop_1 := inoData.In.Inputs[index].4;
_status.State.GeneralStop_2 := inoData.In.Inputs[index].5;
_status.State.Enable_1 := inoData.In.Inputs[index].6;
_status.State.Enable_2 := inoData.In.Inputs[index].7;

index:=5;
_status.State.Zone:= inoData.In.Inputs[index];
index:=6;
_status.State.InPosition:= inoData.In.Inputs[index];

//Movement parameters
index:=7;
_status.State.ActionNo:= inoData.In.Inputs[index];
index:=8;
_status.State.GlobalSpeed:= inoData.In.Inputs[index];
index:=9;
_status.State.ToolNo:= inoData.In.Inputs[index];
index:=10;
_status.State.WorkobjectNo:= inoData.In.Inputs[index];
index:=11;
_status.State.PointNo:= inoData.In.Inputs[index];
index:=12;
_status.State.UserSpecSpeed1:=TcoUtilities.TcoBytesToDint (inFormat:=TcoUtilities.eTcoDataFormat.LittleEndian,
															inByte0:= inoData.In.Inputs[index],
															inByte1:= inoData.In.Inputs[index+1],
															inByte2:= inoData.In.Inputs[index+2],
															inByte3:= inoData.In.Inputs[index+3]);
index:=16;
_status.State.UserSpecSpeed2:=TcoUtilities.TcoBytesToDint (inFormat:=TcoUtilities.eTcoDataFormat.LittleEndian,
															inByte0:= inoData.In.Inputs[index],
															inByte1:= inoData.In.Inputs[index+1],
															inByte2:= inoData.In.Inputs[index+2],
															inByte3:= inoData.In.Inputs[index+3]);
															
index:=20;
_bytes:=TcoUtilities.TcoBytesToDint (inFormat:=TcoUtilities.eTcoDataFormat.LittleEndian,
															inByte0:= inoData.In.Inputs[index],
															inByte1:= inoData.In.Inputs[index+1],
															inByte2:= inoData.In.Inputs[index+2],
															inByte3:= inoData.In.Inputs[index+3]);

_status.State.Coordinates.X:=(DINT_TO_REAL(_bytes)/10000.0)-10000.0;

index:=24;
_bytes:=TcoUtilities.TcoBytesToDint (inFormat:=TcoUtilities.eTcoDataFormat.LittleEndian,
															inByte0:= inoData.In.Inputs[index],
															inByte1:= inoData.In.Inputs[index+1],
															inByte2:= inoData.In.Inputs[index+2],
															inByte3:= inoData.In.Inputs[index+3]);

_status.State.Coordinates.Y:=(DINT_TO_REAL(_bytes)/10000.0)-10000.0;

index:=28;
_bytes:=TcoUtilities.TcoBytesToDint (inFormat:=TcoUtilities.eTcoDataFormat.LittleEndian,
															inByte0:= inoData.In.Inputs[index],
															inByte1:= inoData.In.Inputs[index+1],
															inByte2:= inoData.In.Inputs[index+2],
															inByte3:= inoData.In.Inputs[index+3]);

_status.State.Coordinates.Z:=(DINT_TO_REAL(_bytes)/10000.0)-10000.0;

index:=32;															
_bytes:=TcoUtilities.TcoBytesToDint (inFormat:=TcoUtilities.eTcoDataFormat.LittleEndian,
															inByte0:= inoData.In.Inputs[index],
															inByte1:= inoData.In.Inputs[index+1],
															inByte2:= inoData.In.Inputs[index+2],
															inByte3:= inoData.In.Inputs[index+3]);

_status.State.Coordinates.Rx:=(DINT_TO_REAL(_bytes)/10000.0)-360.0;

index:=36;
_bytes:=TcoUtilities.TcoBytesToDint (inFormat:=TcoUtilities.eTcoDataFormat.LittleEndian,
															inByte0:= inoData.In.Inputs[index],
															inByte1:= inoData.In.Inputs[index+1],
															inByte2:= inoData.In.Inputs[index+2],
															inByte3:= inoData.In.Inputs[index+3]);

_status.State.Coordinates.Ry:=(DINT_TO_REAL(_bytes)/10000.0)-360.0;

index:=40;
_bytes:=TcoUtilities.TcoBytesToDint (inFormat:=TcoUtilities.eTcoDataFormat.LittleEndian,
															inByte0:= inoData.In.Inputs[index],
															inByte1:= inoData.In.Inputs[index+1],
															inByte2:= inoData.In.Inputs[index+2],
															inByte3:= inoData.In.Inputs[index+3]);

_status.State.Coordinates.Rz:=(DINT_TO_REAL(_bytes)/10000.0)-360.0;

index:=44;
_status.State.EventId:=TcoUtilities.TcoBytesToUDint (inFormat:=TcoUtilities.eTcoDataFormat.LittleEndian,
															inByte0:= inoData.In.Inputs[index],
															inByte1:= inoData.In.Inputs[index+1],
															inByte2:= inoData.In.Inputs[index+2],
															inByte3:= inoData.In.Inputs[index+3]);

]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>