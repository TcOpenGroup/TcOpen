<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="StartMovementsTask" Id="{8ec2cded-bd2e-0780-1c2c-713ba1fe9cfc}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK StartMovementsTask EXTENDS TcoCore.TcoTask 
VAR
     _moveParams:TcoAbstractions.TcoRoboticsMovementsParams;
END_VAR
VAR
    {attribute 'hide'} 
	_progress : INT := 0;
    {attribute 'hide'} 
	_infoTimer :  TON;
    {attribute 'hide'} 
	_errorTimer :  TON;
    {attribute 'hide'} 
	_varInfo : __SYSTEM.VAR_INFO;
    {attribute 'hide'} 
	_sb : TcoCore.StringBuilder;
END_VAR

VAR_IN_OUT
    inoConfig 	: TcoIrc5_Config_v_1_x_x;
	inoControl 	: TcoIrc5_Control_v_1_x_x;
	inoStatus 	: TcoIrc5_Status_v_1_x_x;	
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[
IF Execute() THEN
	IF _progress = 0 THEN
		IF NOT __ISVALIDREF(inoControl) THEN
			_varInfo :=__VARINFO(inoControl);
			Messenger.Programming(_sb.Clear().Append('<#Invalid reference: #>').Append(_varInfo.Symbol).ToString()).Pin();
		ELSIF NOT __ISVALIDREF(inoConfig) THEN                                                  
			_varInfo :=__VARINFO(inoConfig);                                                    
			Messenger.Programming(_sb.Clear().Append('<#Invalid reference: #>').Append(_varInfo.Symbol).ToString()).Pin();
		ELSIF NOT __ISVALIDREF(inoStatus) THEN                                                  
			_varInfo :=__VARINFO(inoStatus);                                                    
			Messenger.Programming(_sb.Clear().Append('<#Invalid reference: #>').Append(_varInfo.Symbol).ToString()).Pin();
			ELSE
			_progress := _progress + 1;
		END_IF

	END_IF
	IF _progress = 1 THEN
		//IF SetMovementParamsExt(InData) THEN
//			_progress := _progress + 1;
//		END_IF;
	END_IF;
	
	
	IF _progress = 2 THEN
		inoControl.GlobalSpeed := _moveParams.GlobalSpeed;
		inoControl.ToolNo := _moveParams.ToolNo;
		inoControl.WorkobjectNo := _moveParams.WorkobjectNo;
		inoControl.PointNo := _moveParams.PointNo;
		inoControl.UserSpecSpeed1 := _moveParams.UserSpecSpeed1;
		inoControl.UserSpecSpeed2 := _moveParams.UserSpecSpeed2;
		inoControl.Coordinates := _moveParams.Coordinates; 		
	
		inoControl.ActionNo := 254;
		IF inoControl.ActionNo = inoStatus.State.ActionNo THEN
			inoControl.ActionNo := 255;
			_progress:=_progress + 1;
		END_IF
	END_IF;	
	IF _progress = 3 THEN
		IF 	inoStatus.State.GlobalSpeed = _moveParams.GlobalSpeed AND
			inoStatus.State.ToolNo = _moveParams.ToolNo AND
			inoStatus.State.WorkobjectNo = _moveParams.WorkobjectNo AND
			inoStatus.State.PointNo = _moveParams.PointNo AND
			inoStatus.State.UserSpecSpeed1 = _moveParams.UserSpecSpeed1 AND
			inoStatus.State.UserSpecSpeed2 =_moveParams.UserSpecSpeed2 AND
			_AreAlmostEqualCoordinates(inoStatus.State.Coordinates,_moveParams.Coordinates,0.01,0.01,0.01,0.01,0.01,0.01) THEN
			_progress:=_progress + 1;
		END_IF
	END_IF;	
	IF _progress = 4 THEN
	
		Messenger.Info(CONCAT('<#Moving to position ID#>: ', INT_TO_STRING(_moveParams.ActionNo)));
		inoControl.ActionNo := _moveParams.ActionNo;
		IF inoControl.ActionNo = inoStatus.State.ActionNo THEN
			inoControl.ActionNo :=255;
				_progress := _progress + 1;
		END_IF
	END_IF;		
			
	IF _progress = 5 THEN
		IF inoControl.ActionNo = inoStatus.State.ActionNo THEN
			 DoneWhen(TRUE);
			_progress:=0;
		END_IF
	END_IF;		

   CallTimers(TRUE);
	
	THIS^.ThrowWhen(_errorTimer.Q);
END_IF
]]></ST>
    </Implementation>
    <Method Name="CallTimers" Id="{0a673048-b963-0053-21e4-6d1e566ccc65}">
      <Declaration><![CDATA[METHOD CallTimers
VAR_INPUT
	inValue : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF  __ISVALIDREF(inoConfig) THEN  
_infoTimer(IN := inValue, PT := THIS^.inoConfig.InfoTime);
_errorTimer(IN := inValue, PT := THIS^.inoConfig.ErrorTime);
END_IF;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{0d82c97d-0789-05e0-17e6-78c74f6d4a10}">
      <Declaration><![CDATA[METHOD PUBLIC FB_init : BOOL
VAR_INPUT
    bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
    bInCopyCode : BOOL; // if TRUE, the instance afterwards gets moved into the copy code (online change)
  	ParentObject : ITcoObject;	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="InvokeWithParams" Id="{831dee00-d9fb-0de4-16b7-4a6a3ef02f08}">
      <Declaration><![CDATA[METHOD INTERNAL InvokeWithParams : ITcoTaskStatus
VAR_INPUT
    inMoveParams:TcoAbstractions.TcoRoboticsMovementsParams;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_moveParams:=inMoveParams;
InvokeWithParams := THIS^.Invoke();]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnAbort" Id="{31011d7c-432f-0571-1b49-be504ea7c23d}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Executes when task is aborted.
		</summary>			
	</docu>	
~*)
METHOD PROTECTED OnAbort]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnDone" Id="{223dc89a-9f91-000c-1309-16f5f6432081}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Executes when task reaches the ```Done``` state .
		</summary>			
	</docu>	
~*)
METHOD PROTECTED OnDone
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_mcMoveAbsolute(Axis := _axisRef, Execute := FALSE);
_mcReadAxisEncoderReferenceSystem(Axis :=_axisRef,Enable := FALSE);
THIS^.DriveRef._movementState.Restore();]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnError" Id="{ab9dc157-8d3b-0fc7-39e0-f7e22d57a5d0}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Executes when task reaches the ```Error``` state.
			<para>
				Do not confuse with <see cref="PlcDocu.TcoCore.TcoTask.WhileError()"/>, that is called cyclically until '''Error''' state is left.
			</para>
		</summary>			
	</docu>	
~*)
METHOD PROTECTED OnError
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.DriveRef._movementState.Restore();

IF NOT _axisRef.Status.Error THEN
	DriveRef.SetErrorID( DriveRef._startMovementsTask._mcMoveAbsolute.ErrorID);
END_IF
_mcMoveAbsolute(Axis := _axisRef, Execute := FALSE);
_mcReadAxisEncoderReferenceSystem(Axis :=_axisRef,Enable := FALSE);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnStart" Id="{1491f5ba-9f11-0ec9-2ca9-fc10d819bac1}">
      <Declaration><![CDATA[METHOD PROTECTED OnStart 
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_mcMoveAbsolute(Axis := _axisRef, Execute := FALSE);
_mcReadAxisEncoderReferenceSystem(Axis :=_axisRef,Enable := FALSE);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Restore" Id="{6b9c9854-0555-0eef-069a-af2d2447715a}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Restores this instance to the Ready state. Can be called explicitly or from within one of the restore mechanisms.
			<para>
				See also <see cref="PlcDocu.TcoCore.TcoTask.AutoRestorable()"/>
			</para>
		</summary>			
	</docu>	
~*)
METHOD Restore : ITcoRestorable]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.Restore();]]></ST>
      </Implementation>
    </Method>
    <Method Name="WhileError" Id="{efa8f938-4579-0e7b-3fc7-36ccb3207ab2}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Executes until task is in ```Error``` state .
		</summary>			
	</docu>	
~*)
METHOD PROTECTED WhileError
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT _axisRef.Status.Error THEN
	DriveRef.SetErrorID( DriveRef._startMovementsTask._mcMoveAbsolute.ErrorID);
    _mcMoveAbsolute(Axis := _axisRef, Execute := FALSE);
END_IF
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>