<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="TcoOmnicore_v_1_x_x" Id="{523d8997-53b7-0732-3298-9eef38501e7f}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK TcoOmnicore_v_1_x_x EXTENDS TcoIo.TcoPnIoComponent IMPLEMENTS TcoAbstractions.ITcoRobotics
VAR_INPUT
    inEnable : BOOL;
END_VAR
VAR_OUTPUT
END_VAR
VAR_IN_OUT
    inoData : TcoOmnicore_IO_v_1_x_x;
END_VAR
VAR
    {attribute addProperty Name "<#Status#>"}
    {attribute clr [ReadOnly()]}
    _status : TcoAbbRobotics_Status_v_1_x_x;
    {attribute addProperty Name "<#Control#>"}
    _control : TcoAbbRobotics_Control_v_1_x_x;
    {attribute addProperty Name "<#Config#>"}
    _config : TcoAbbRobotics_Config_v_1_x_x;
    {attribute addProperty Name "<#PN Error#>"}
    {attribute clr [ReadOnly()]}
    _pnError : BOOL;
    _someTaskIsActive : BOOL;
    _stopTasksAreActive : BOOL;
END_VAR
VAR
    {attribute addProperty Name "<#Start at Main#>"}
    _startAtMainTask : StartAtMainTask(THIS^);
    {attribute addProperty Name "<#Start motors and program#>"}
    _startMotorsAndProgramTask : StartMotorsAndProgramTask(THIS^);
    {attribute addProperty Name "<#Start program#>"}
    _startProgramTask : StartProgramTask(THIS^);
    {attribute addProperty Name "<#Start motors#>"}
    _startMotorsTask : StartMotorsTask(THIS^);
    {attribute addProperty Name "<#Start movements#>"}
    _startMovementsTask : StartMovementsTask(THIS^);
    {attribute addProperty Name "<#Start motors program and movements#>"}
    _startMotorsProgramAndMovementsTask : StartMotorsProgramAndMovementsTask(THIS^);
    {attribute addProperty Name "<#Stop movements#>"}
    _stopMovementsTask : StopMovementsTask(THIS^);
    {attribute addProperty Name "<#Stop movenents and program#>"}
    _stopMovementsAndProgramTask : StopMovementsAndProgramTask(THIS^);
    {attribute addProperty Name "<#Stop program#>"}
    _stopProgramTask : StopMovementsAndProgramTask(THIS^);
    {attribute addProperty Name "<#Stop motors#>"}
    _stopMotorsTask : StopMotorsTask(THIS^);
    {attribute addProperty Name "<#Restore#>"}
    _restoreTask : TcoCore.TcoTask(THIS^);
END_VAR
VAR
    {attribute 'hide'}
    _sb : TcoCore.StringBuilder;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT __ISVALIDREF(inoData) THEN
    Messenger.Post('Invalid reference', TcoCore.eMessageCategory.ProgrammingError);
    RETURN;
END_IF

SUPER^(inPnIoBoxState := THIS^.inoData.PnIoBoxState, inPnIoBoxDiag := THIS^.inoData.PnIoBoxDiag);
_pnError := not _profinetReady;
UpdateStatus();
_stopTasksAreActive := _stopMovementsTask.Busy AND _stopMovementsAndProgramTask.Busy AND _stopProgramTask.Busy AND _stopMotorsTask.Busy;
_startAtMainTask.Enabled := NOT _stopTasksAreActive;
_startAtMainTask(inoConfig := _config, inoControl := _control, inoStatus := _status);
_startProgramTask.Enabled := NOT _stopTasksAreActive;
_startProgramTask(inoConfig := _config, inoControl := _control, inoStatus := _status);
_startMotorsTask.Enabled := NOT _stopTasksAreActive AND NOT _startMotorsProgramAndMovementsTask.Busy AND NOT _startMotorsAndProgramTask.Busy;
_startMotorsTask(inoConfig := _config, inoControl := _control, inoStatus := _status);
_startMotorsAndProgramTask.Enabled := NOT _stopTasksAreActive AND NOT _startProgramTask.Busy AND NOT _startMotorsTask.Busy;
_startMotorsAndProgramTask(inoConfig := _config, inoControl := _control, inoStatus := _status);
_startMovementsTask.Enabled := NOT _startMotorsProgramAndMovementsTask.Busy AND NOT _stopMotorsTask.Busy;
_startMovementsTask(inoConfig := _config, inoControl := _control, inoStatus := _status);
_startMotorsProgramAndMovementsTask.Enabled := NOT _startMovementsTask.Busy AND NOT _startMotorsAndProgramTask.Busy AND NOT _stopMotorsTask.Busy;

_startMotorsProgramAndMovementsTask(refStartMotorsAndProgramTask := _startMotorsAndProgramTask,
    inoConfig := _config,
    inoControl := _control,
    inoStatus := _status);

_stopMovementsTask.Enabled := TRUE;
_stopMovementsTask(inoConfig := _config, inoControl := _control, inoStatus := _status);
_stopMotorsTask.Enabled := TRUE;
_stopMotorsTask(inoConfig := _config, inoControl := _control, inoStatus := _status);
_stopProgramTask.Enabled := TRUE;
_stopProgramTask(inoConfig := _config, inoControl := _control, inoStatus := _status);
_stopMovementsAndProgramTask.Enabled := NOT _stopProgramTask.Busy AND NOT _stopProgramTask.Busy;
_stopMovementsAndProgramTask(inoConfig := _config, inoControl := _control, inoStatus := _status);
//*************RESTORE********************
_restoreTask.Enabled := TRUE;

IF _restoreTask.Execute() THEN
    Restore();
    _restoreTask.DoneWhen(TRUE);
END_IF

//****************************************
_someTaskIsActive := _startAtMainTask.Busy OR
    _startMotorsAndProgramTask.Busy OR
    _startMovementsTask.Busy OR
    _startMovementsTask.Busy OR
    _stopMovementsTask.Busy OR
    _stopMovementsAndProgramTask.Busy OR
    _stopProgramTask.Busy;

//do not publish diagnostic message when component is not used
IF _someTaskIsActive THEN
    IF (_status.State.EmgStop) THEN
        Messenger.Error('<#Emergency stop active#>');
    END_IF;

    IF (_status.State.ProgExecError) THEN
        Messenger.Error('<#Program execution error see robot panel for details#>');
    END_IF;

    IF (NOT _status.State.SafetyOk) THEN
        Messenger.Warning('<#Safety circuit open#>');
    END_IF;
END_IF;

IF (_status.State.Error) THEN
    Messenger.Error(_sb.Clear()
            .Append('<#Drive error no #>')
            .Append(UDINT_TO_STRING(_status.State.EventId))
            .Append(' |[[0]AdvancedDiagnosticMessage]|')
            .Append('.')
            .Append('For details see the service mode')
            .ToString());
END_IF;

UpdateControl();]]></ST>
    </Implementation>
    <Folder Name="Operations" Id="{6e3679c3-4561-09f4-182d-81434639d5ca}" />
    <Folder Name="Task" Id="{df2402d8-7133-011b-0653-3f7180f286b6}" />
    <Property Name="Config" Id="{098a183f-0296-04c3-0d60-ca75a1e45ac4}">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Gets the configuration of the IRC 5.
        </summary>
    </docu>
~*)
PROPERTY Config : REFERENCE TO TcoAbbRobotics_Config_v_1_x_x]]></Declaration>
      <Get Name="Get" Id="{62415f1e-ff4d-004d-23da-ba889a5864b9}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Config REF= _config;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Control" Id="{020b9cbd-40f0-0121-3244-37107c8ea202}">
      <Declaration><![CDATA[PROPERTY PUBLIC Control : REFERENCE TO TcoAbbRobotics_Control_v_1_x_x]]></Declaration>
      <Get Name="Get" Id="{ac30858f-5581-024e-1ccc-04e5659fb520}">
        <Declaration><![CDATA[VAR
END_VAR]]></Declaration>
        <Implementation>
          <ST><![CDATA[Control REF= _control;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="FB_init" Id="{7009383b-bad1-0d57-35c6-831115c4f0b7}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
    bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
    bInCopyCode : BOOL; // if TRUE, the instance afterwards gets moved into the copy code (online change)
    ParentObject : ITcoObject;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="Restore" Id="{6f91e9ed-41a3-0898-0147-5f580c838a5a}">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Restores this instance to the Ready state. Can be called explicitly or from within one of the restore mechanisms.
        </summary>
    </docu>
~*)
METHOD Restore : ITcoRestorable]]></Declaration>
      <Implementation>
        <ST><![CDATA[RestoreTasks();
_control.ActionNo := 255;
_control.GlobalSpeed := 0;
_control.Interupt := FALSE;
_control.LoadAndStartProg := FALSE;
_control.LoadProg := FALSE;
_control.MotorOff := FALSE;
_control.MotorOn := FALSE;
_control.MotorOnAndStart := FALSE;
_control.PointNo := 0;
_control.QuickStop := FALSE;
_control.ResetEmgStop := FALSE;
_control.ResetError := FALSE;
_control.SoftStop := FALSE;
_control.StartAtMain := FALSE;
_control.StartProgram := FALSE;
_control.StopCycle := FALSE;
_control.StopInstruction := FALSE;
_control.StopProgram := FALSE;
_control.LimitSpeed := FALSE;
_control.ToolNo := 0;
_control.WorkobjectNo := 0;
_control.PointNo := 0;
_control.UserSpecSpeed1 := 0;
_control.UserSpecSpeed2 := 0;
_control.Coordinates.X := 0;
_control.Coordinates.Y := 0;
_control.Coordinates.Z := 0;
_control.Coordinates.Rx := 0;
_control.Coordinates.Ry := 0;
_control.Coordinates.Rz := 0;]]></ST>
      </Implementation>
    </Method>
    <Method Name="RestoreTasks" Id="{948264b8-f9e7-01eb-0b82-8d6486b4a7ad}">
      <Declaration><![CDATA[METHOD INTERNAL RestoreTasks]]></Declaration>
      <Implementation>
        <ST><![CDATA[//_resetTask.Restore();
_startMovementsTask.Restore();
_startMotorsProgramAndMovementsTask.Restore();
_stopMovementsTask.Restore();
_startMotorsAndProgramTask.Restore();
_startAtMainTask.Restore();
_stopMovementsAndProgramTask.Restore();
_stopProgramTask.Restore();]]></ST>
      </Implementation>
    </Method>
    <Method Name="ServiceMode" Id="{246010cf-5d56-0444-1471-74610d16a46f}">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Custom service (manual, maintenance) logic.
            This method must be implemented in derived class.
        </summary>
    </docu>
~*)
METHOD PROTECTED ServiceMode]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="StartAtMain" Id="{c8f1f247-be07-06d1-3bfe-1d960ce0ed5b}" FolderPath="Operations\">
      <Declaration><![CDATA[METHOD PUBLIC StartAtMain : TcoCore.ITcoTaskStatus
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[StartAtMain := _startAtMainTask.Invoke();]]></ST>
      </Implementation>
    </Method>
    <Property Name="StartAtMainTask" Id="{32cdaf4b-af6e-09c1-0f8c-aba4ed912d01}" FolderPath="Task\">
      <Declaration><![CDATA[PROPERTY StartAtMainTask : TcoCore.ITcoTaskStatus]]></Declaration>
      <Get Name="Get" Id="{b44a777c-42b5-0868-1a97-399ee0283c28}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[StartAtMainTask := _startAtMainTask;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="StartMotors" Id="{540c98da-518d-0bb4-15d7-5a7eadbeed7a}" FolderPath="Operations\">
      <Declaration><![CDATA[METHOD PUBLIC StartMotors : TcoCore.ITcoTaskStatus]]></Declaration>
      <Implementation>
        <ST><![CDATA[StartMotors := _startMotorsTask.Invoke();]]></ST>
      </Implementation>
    </Method>
    <Method Name="StartMotorsAndProgram" Id="{bd331e3d-ad7e-0bab-0d49-d439d1647a91}" FolderPath="Operations\">
      <Declaration><![CDATA[METHOD StartMotorsAndProgram : TcoCore.ITcoTaskStatus
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[StartMotorsAndProgram := THIS^._startMotorsAndProgramTask.Invoke();]]></ST>
      </Implementation>
    </Method>
    <Property Name="StartMotorsAndProgramTask" Id="{6bbde16c-8eb0-08c9-328e-cc05ee079cbb}" FolderPath="Task\">
      <Declaration><![CDATA[PROPERTY StartMotorsAndProgramTask : TcoCore.ITcoTaskStatus]]></Declaration>
      <Get Name="Get" Id="{08eda246-f10e-02ec-1451-b993606f2a35}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[StartMotorsAndProgramTask := _startMotorsAndProgramTask;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="StartMotorsProgramAndMovements" Id="{9d01efcd-c94f-088a-1c01-d61704e37d5f}" FolderPath="Operations\">
      <Declaration><![CDATA[METHOD PUBLIC StartMotorsProgramAndMovements : TcoCore.ITcoTaskStatus
VAR_INPUT
    inData : TcoRoboticsMovementsParams;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[StartMotorsProgramAndMovements := _startMotorsProgramAndMovementsTask.InvokeWithParams(inData);]]></ST>
      </Implementation>
    </Method>
    <Property Name="StartMotorsProgramAndMovementsTask" Id="{d8af50fb-8f84-0dbd-28be-cece0d2b39aa}" FolderPath="Task\">
      <Declaration><![CDATA[PROPERTY StartMotorsProgramAndMovementsTask : TcoCore.ITcoTaskStatus]]></Declaration>
      <Get Name="Get" Id="{132d8788-b0f7-05d2-2909-ba09af3f686f}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[StartMotorsProgramAndMovementsTask := _startMotorsProgramAndMovementsTask;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="StartMotorsTask" Id="{b25255ff-4b20-02e2-32d3-fd57ec8f8092}" FolderPath="Task\">
      <Declaration><![CDATA[PROPERTY StartMotorsTask : TcoCore.ITcoTaskStatus]]></Declaration>
      <Get Name="Get" Id="{677527a2-078e-0f41-21e0-67dbcdc83428}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[StartMotorsTask := _startMotorsTask;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="StartMovements" Id="{22500e6e-00a8-0689-3d8b-db522d6f8971}" FolderPath="Operations\">
      <Declaration><![CDATA[METHOD PUBLIC StartMovements : TcoCore.ITcoTaskStatus
VAR_INPUT
    inData : TcoRoboticsMovementsParams;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[StartMovements := _startMovementsTask.InvokeWithParams(inData);]]></ST>
      </Implementation>
    </Method>
    <Property Name="StartMovementsTask" Id="{7843876f-e37d-0ffb-2766-b3d12f96d1f7}" FolderPath="Task\">
      <Declaration><![CDATA[PROPERTY StartMovementsTask : TcoCore.ITcoTaskStatus]]></Declaration>
      <Get Name="Get" Id="{b9aaeaee-bce5-01fd-2139-356e2e5de3a5}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[StartMovementsTask := _startMovementsTask;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="StartProgram" Id="{b0586b8d-5b97-0f21-3710-dcef86efccfe}" FolderPath="Operations\">
      <Declaration><![CDATA[METHOD PUBLIC StartProgram : TcoCore.ITcoTaskStatus]]></Declaration>
      <Implementation>
        <ST><![CDATA[StartProgram := _startProgramTask.Invoke();]]></ST>
      </Implementation>
    </Method>
    <Property Name="StartProgramTask" Id="{4085889a-9f71-07b4-2ef6-30459ad05627}" FolderPath="Task\">
      <Declaration><![CDATA[PROPERTY StartProgramTask : TcoCore.ITcoTaskStatus]]></Declaration>
      <Get Name="Get" Id="{4498ec9d-c25b-093f-3042-fd546e0afdfb}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[StartProgramTask := _startProgramTask;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Status" Id="{9c30dbef-f2d2-0205-1ccb-ee1d87b488ac}">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Gets the status of the IRC5.
        </summary>
    </docu>
~*)
PROPERTY Status : REFERENCE TO TcoAbbRobotics_Status_v_1_x_x]]></Declaration>
      <Get Name="Get" Id="{1f8a4b54-0010-0a41-310c-07588237a4cc}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Status REF= _status;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="StopMotors" Id="{850eef33-9b5f-0698-2906-a965d8da8145}" FolderPath="Operations\">
      <Declaration><![CDATA[METHOD PUBLIC StopMotors : TcoCore.ITcoTaskStatus]]></Declaration>
      <Implementation>
        <ST><![CDATA[StopMotors := _stopMotorsTask.Invoke();]]></ST>
      </Implementation>
    </Method>
    <Property Name="StopMotorsTask" Id="{47aabc5a-1fc4-0cf5-0b97-165e4f73573c}" FolderPath="Task\">
      <Declaration><![CDATA[PROPERTY StopMotorsTask : TcoCore.ITcoTaskStatus]]></Declaration>
      <Get Name="Get" Id="{bf56b222-51d9-0374-1cca-ccb6a87d9cad}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[StopMotorsTask := _stopMotorsTask;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="StopMovements" Id="{b5656bcd-cfb8-0001-0b43-50534d0cc388}" FolderPath="Operations\">
      <Declaration><![CDATA[METHOD PUBLIC StopMovements : TcoCore.ITcoTaskStatus
VAR_INPUT
    inStopType : eTcoRoboticsStopType;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[StopMovements := _stopMovementsTask.InvokeWithParams(inStopType);]]></ST>
      </Implementation>
    </Method>
    <Method Name="StopMovementsAndProgram" Id="{82c2772e-be4e-0a8d-0f83-5923e433291c}" FolderPath="Operations\">
      <Declaration><![CDATA[METHOD PUBLIC StopMovementsAndProgram : TcoCore.ITcoTaskStatus
VAR_INPUT
    inStopType : eTcoRoboticsStopType;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[StopMovementsAndProgram := _stopMovementsAndProgramTask.InvokeWithParams(inStopType);]]></ST>
      </Implementation>
    </Method>
    <Property Name="StopMovementsAndProgramTask" Id="{5a14d22c-080f-05a7-3ca0-7a6381551f0d}" FolderPath="Task\">
      <Declaration><![CDATA[PROPERTY StopMovementsAndProgramTask : TcoCore.ITcoTaskStatus]]></Declaration>
      <Get Name="Get" Id="{18d033f1-75d7-0f92-032d-048421833c49}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[StopMovementsAndProgramTask := _stopMovementsAndProgramTask;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="StopMovementsTask" Id="{50bdc77f-bca4-0b8a-1d60-5dea12bcab41}" FolderPath="Task\">
      <Declaration><![CDATA[PROPERTY StopMovementsTask : TcoCore.ITcoTaskStatus]]></Declaration>
      <Get Name="Get" Id="{d0eb92f2-68dc-0bec-03aa-0a191c30e577}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[StopMovementsTask := _stopMovementsTask;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="StopProgram" Id="{62643198-ac98-0de2-27c2-09b757cb1b1f}" FolderPath="Operations\">
      <Declaration><![CDATA[METHOD PUBLIC StopProgram : TcoCore.ITcoTaskStatus]]></Declaration>
      <Implementation>
        <ST><![CDATA[StopProgram := _stopProgramTask.Invoke();]]></ST>
      </Implementation>
    </Method>
    <Property Name="StopProgramTask" Id="{cbbf4388-a258-0a26-10f9-3e2c1c090018}" FolderPath="Task\">
      <Declaration><![CDATA[PROPERTY StopProgramTask : TcoCore.ITcoTaskStatus]]></Declaration>
      <Get Name="Get" Id="{da61c6b1-4664-0485-0c1e-7f80c7d469f1}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[StopProgramTask := _stopProgramTask;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="UpdateControl" Id="{b6a19e34-7d14-0d93-1abf-29d8b8bcea72}">
      <Declaration><![CDATA[METHOD INTERNAL UpdateControl
VAR_INPUT
END_VAR
VAR
    index : INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//SYSTEM OUTPUTS
index := 0;
inoData.Out.Outputs[index].0 := _control.Interupt;
inoData.Out.Outputs[index].1 := _control.LoadProg;
inoData.Out.Outputs[index].2 := _control.LoadAndStartProg;
inoData.Out.Outputs[index].3 := _control.MotorOff;
inoData.Out.Outputs[index].4 := _control.MotorOn;
inoData.Out.Outputs[index].5 := _control.MotorOnAndStart;
inoData.Out.Outputs[index].6 := _control.ResetEmgStop;
inoData.Out.Outputs[index].7 := _control.ResetError;
index := 1;
inoData.Out.Outputs[index].0 := _control.StartProgram;
inoData.Out.Outputs[index].1 := _control.StartAtMain;
inoData.Out.Outputs[index].2 := _control.StopProgram;
inoData.Out.Outputs[index].3 := _control.QuickStop;
inoData.Out.Outputs[index].4 := _control.SoftStop;
inoData.Out.Outputs[index].5 := _control.StopCycle;
inoData.Out.Outputs[index].6 := _control.StopInstruction;
inoData.Out.Outputs[index].7 := _control.LimitSpeed;
//Tool signals
index := 2;
inoData.Out.Outputs[index].0 := _control.Tool_1_Retract;
inoData.Out.Outputs[index].1 := _control.Tool_1_Extend;
inoData.Out.Outputs[index].2 := _control.Tool_2_Retract;
inoData.Out.Outputs[index].3 := _control.Tool_2_Extend;
inoData.Out.Outputs[index].4 := _control.Tool_3_Retract;
inoData.Out.Outputs[index].5 := _control.Tool_3_Extend;
inoData.Out.Outputs[index].6 := _control.Tool_4_Retract;
inoData.Out.Outputs[index].7 := _control.Tool_4_Extend;
//master mode  such as manual/auto ....
index := 3;
inoData.Out.Outputs[index] := _control.MasterMode;
//zone
index := 5;
inoData.Out.Outputs[index] := _control.Zone;
//position
index := 6;
inoData.Out.Outputs[index] := _control.InPosition;
//Movement parameters
index := 7;
inoData.Out.Outputs[index] := _control.ActionNo;
index := 8;
inoData.Out.Outputs[index] := _control.GlobalSpeed;
index := 9;
inoData.Out.Outputs[index] := _control.ToolNo;
index := 10;
inoData.Out.Outputs[index] := _control.WorkobjectNo;
index := 11;
inoData.Out.Outputs[index] := _control.PointNo;
index := 12;

TcoUtilities.TcoDintToBytes(inFormat := TcoUtilities.eTcoDataFormat.LittleEndian,
    inValue := REAL_TO_DINT(_control.UserSpecSpeed1),
    outByte0 := inoData.Out.Outputs[index],
    outByte1 := inoData.Out.Outputs[index + 1],
    outByte2 := inoData.Out.Outputs[index + 2],
    outByte3 := inoData.Out.Outputs[index + 3]);

index := 16;

TcoUtilities.TcoDintToBytes(inFormat := TcoUtilities.eTcoDataFormat.LittleEndian,
    inValue := REAL_TO_DINT(_control.UserSpecSpeed2),
    outByte0 := inoData.Out.Outputs[index],
    outByte1 := inoData.Out.Outputs[index + 1],
    outByte2 := inoData.Out.Outputs[index + 2],
    outByte3 := inoData.Out.Outputs[index + 3]);
////Coordinates
index := 20;

TcoUtilities.TcoDintToBytes(inFormat := TcoUtilities.eTcoDataFormat.LittleEndian,
    inValue := REAL_TO_DINT((_control.Coordinates.X + 10000.0) * 10000.0),
    outByte0 := inoData.Out.Outputs[index],
    outByte1 := inoData.Out.Outputs[index + 1],
    outByte2 := inoData.Out.Outputs[index + 2],
    outByte3 := inoData.Out.Outputs[index + 3]);

index := 24;

TcoUtilities.TcoDintToBytes(inFormat := TcoUtilities.eTcoDataFormat.LittleEndian,
    inValue := REAL_TO_DINT((_control.Coordinates.Y + 10000.0) * 10000.0),
    outByte0 := inoData.Out.Outputs[index],
    outByte1 := inoData.Out.Outputs[index + 1],
    outByte2 := inoData.Out.Outputs[index + 2],
    outByte3 := inoData.Out.Outputs[index + 3]);

index := 28;

TcoUtilities.TcoDintToBytes(inFormat := TcoUtilities.eTcoDataFormat.LittleEndian,
    inValue := REAL_TO_DINT((_control.Coordinates.Z + 10000.0) * 10000.0),
    outByte0 := inoData.Out.Outputs[index],
    outByte1 := inoData.Out.Outputs[index + 1],
    outByte2 := inoData.Out.Outputs[index + 2],
    outByte3 := inoData.Out.Outputs[index + 3]);

index := 32;

TcoUtilities.TcoDintToBytes(inFormat := TcoUtilities.eTcoDataFormat.LittleEndian,
    inValue := REAL_TO_DINT((_control.Coordinates.Rx + 360.0) * 10000.0),
    outByte0 := inoData.Out.Outputs[index],
    outByte1 := inoData.Out.Outputs[index + 1],
    outByte2 := inoData.Out.Outputs[index + 2],
    outByte3 := inoData.Out.Outputs[index + 3]);

index := 36;

TcoUtilities.TcoDintToBytes(inFormat := TcoUtilities.eTcoDataFormat.LittleEndian,
    inValue := REAL_TO_DINT((_control.Coordinates.Ry + 360.0) * 10000.0),
    outByte0 := inoData.Out.Outputs[index],
    outByte1 := inoData.Out.Outputs[index + 1],
    outByte2 := inoData.Out.Outputs[index + 2],
    outByte3 := inoData.Out.Outputs[index + 3]);

index := 40;

TcoUtilities.TcoDintToBytes(inFormat := TcoUtilities.eTcoDataFormat.LittleEndian,
    inValue := REAL_TO_DINT((_control.Coordinates.Rz + 360.0) * 10000.0),
    outByte0 := inoData.Out.Outputs[index],
    outByte1 := inoData.Out.Outputs[index + 1],
    outByte2 := inoData.Out.Outputs[index + 2],
    outByte3 := inoData.Out.Outputs[index + 3]);]]></ST>
      </Implementation>
    </Method>
    <Method Name="UpdateStatus" Id="{f08c2459-5b9e-0982-23a9-108345ca27d5}">
      <Declaration><![CDATA[METHOD INTERNAL UpdateStatus
VAR
    _message : STRING(125);
    tempOut : BYTE;
    index : INT;
    _bytes : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//SYSTEM INPUTS
index := 0;
_status.State.AutoOn := inoData.In.Inputs[index].0;
_status.State.CycleOn := inoData.In.Inputs[index].1;
_status.State.EmgStop := inoData.In.Inputs[index].2;
_status.State.Error := inoData.In.Inputs[index].3;
_status.State.MoveActive := inoData.In.Inputs[index].4;
_status.State.MoveInactive := inoData.In.Inputs[index].5;
_status.State.MotorOff := inoData.In.Inputs[index].6;
_status.State.MotorOn := inoData.In.Inputs[index].7;
index := 1;
_status.State.MotorOffState := inoData.In.Inputs[index].0;
_status.State.MotorOnState := inoData.In.Inputs[index].1;
_status.State.ProgExecError := inoData.In.Inputs[index].2;
_status.State.SafetyOk := inoData.In.Inputs[index].3;
_status.State.SystemInputBusy := inoData.In.Inputs[index].4;
_status.State.PpMoved := inoData.In.Inputs[index].5;
_status.State.MotionSupervision := inoData.In.Inputs[index].6;
_status.State.BatteryLow := inoData.In.Inputs[index].7;
//Area/positions flags this  should be obsolete because Zones and InPosition is used as byte below
index := 2;
_status.State.InArea_1 := inoData.In.Inputs[index].0;
_status.State.InArea_2 := inoData.In.Inputs[index].1;
_status.State.InArea_3 := inoData.In.Inputs[index].2;
_status.State.InArea_4 := inoData.In.Inputs[index].3;
_status.State.InPosition_1 := inoData.In.Inputs[index].4;
_status.State.InPosition_2 := inoData.In.Inputs[index].5;
_status.State.InPosition_3 := inoData.In.Inputs[index].6;
_status.State.InPosition_4 := inoData.In.Inputs[index].7;
//
//Tool signals
index := 3;
_status.State.Tool_1_Retract := inoData.In.Inputs[index].0;
_status.State.Tool_1_Extend := inoData.In.Inputs[index].1;
_status.State.Tool_2_Retract := inoData.In.Inputs[index].2;
_status.State.Tool_2_Extend := inoData.In.Inputs[index].3;
_status.State.Tool_3_Retract := inoData.In.Inputs[index].4;
_status.State.Tool_3_Extend := inoData.In.Inputs[index].5;
_status.State.Tool_4_Retract := inoData.In.Inputs[index].6;
_status.State.Tool_4_Extend := inoData.In.Inputs[index].7;
//Safety signals
index := 4;
_status.State.AutoStop_1 := inoData.In.Inputs[index].0;
_status.State.AutoStop_2 := inoData.In.Inputs[index].1;
_status.State.EmergencyStop_1 := inoData.In.Inputs[index].2;
_status.State.EmergencyStop_2 := inoData.In.Inputs[index].3;
_status.State.GeneralStop_1 := inoData.In.Inputs[index].4;
_status.State.GeneralStop_2 := inoData.In.Inputs[index].5;
_status.State.Enable_1 := inoData.In.Inputs[index].6;
_status.State.Enable_2 := inoData.In.Inputs[index].7;
index := 5;
_status.State.Zone := inoData.In.Inputs[index];
index := 6;
_status.State.InPosition := inoData.In.Inputs[index];
//Movement parameters
index := 7;
_status.State.ActionNo := inoData.In.Inputs[index];
index := 8;
_status.State.GlobalSpeed := inoData.In.Inputs[index];
index := 9;
_status.State.ToolNo := inoData.In.Inputs[index];
index := 10;
_status.State.WorkobjectNo := inoData.In.Inputs[index];
index := 11;
_status.State.PointNo := inoData.In.Inputs[index];
index := 12;

_status.State.UserSpecSpeed1 := TcoUtilities.TcoBytesToDint(inFormat := TcoUtilities.eTcoDataFormat.LittleEndian,
    inByte0 := inoData.In.Inputs[index],
    inByte1 := inoData.In.Inputs[index + 1],
    inByte2 := inoData.In.Inputs[index + 2],
    inByte3 := inoData.In.Inputs[index + 3]);

index := 16;

_status.State.UserSpecSpeed2 := TcoUtilities.TcoBytesToDint(inFormat := TcoUtilities.eTcoDataFormat.LittleEndian,
    inByte0 := inoData.In.Inputs[index],
    inByte1 := inoData.In.Inputs[index + 1],
    inByte2 := inoData.In.Inputs[index + 2],
    inByte3 := inoData.In.Inputs[index + 3]);

index := 20;

_bytes := TcoUtilities.TcoBytesToDint(inFormat := TcoUtilities.eTcoDataFormat.LittleEndian,
    inByte0 := inoData.In.Inputs[index],
    inByte1 := inoData.In.Inputs[index + 1],
    inByte2 := inoData.In.Inputs[index + 2],
    inByte3 := inoData.In.Inputs[index + 3]);

_status.State.Coordinates.X := (DINT_TO_REAL(_bytes) / 10000.0) - 10000.0;
index := 24;

_bytes := TcoUtilities.TcoBytesToDint(inFormat := TcoUtilities.eTcoDataFormat.LittleEndian,
    inByte0 := inoData.In.Inputs[index],
    inByte1 := inoData.In.Inputs[index + 1],
    inByte2 := inoData.In.Inputs[index + 2],
    inByte3 := inoData.In.Inputs[index + 3]);

_status.State.Coordinates.Y := (DINT_TO_REAL(_bytes) / 10000.0) - 10000.0;
index := 28;

_bytes := TcoUtilities.TcoBytesToDint(inFormat := TcoUtilities.eTcoDataFormat.LittleEndian,
    inByte0 := inoData.In.Inputs[index],
    inByte1 := inoData.In.Inputs[index + 1],
    inByte2 := inoData.In.Inputs[index + 2],
    inByte3 := inoData.In.Inputs[index + 3]);

_status.State.Coordinates.Z := (DINT_TO_REAL(_bytes) / 10000.0) - 10000.0;
index := 32;

_bytes := TcoUtilities.TcoBytesToDint(inFormat := TcoUtilities.eTcoDataFormat.LittleEndian,
    inByte0 := inoData.In.Inputs[index],
    inByte1 := inoData.In.Inputs[index + 1],
    inByte2 := inoData.In.Inputs[index + 2],
    inByte3 := inoData.In.Inputs[index + 3]);

_status.State.Coordinates.Rx := (DINT_TO_REAL(_bytes) / 10000.0) - 360.0;
index := 36;

_bytes := TcoUtilities.TcoBytesToDint(inFormat := TcoUtilities.eTcoDataFormat.LittleEndian,
    inByte0 := inoData.In.Inputs[index],
    inByte1 := inoData.In.Inputs[index + 1],
    inByte2 := inoData.In.Inputs[index + 2],
    inByte3 := inoData.In.Inputs[index + 3]);

_status.State.Coordinates.Ry := (DINT_TO_REAL(_bytes) / 10000.0) - 360.0;
index := 40;

_bytes := TcoUtilities.TcoBytesToDint(inFormat := TcoUtilities.eTcoDataFormat.LittleEndian,
    inByte0 := inoData.In.Inputs[index],
    inByte1 := inoData.In.Inputs[index + 1],
    inByte2 := inoData.In.Inputs[index + 2],
    inByte3 := inoData.In.Inputs[index + 3]);

_status.State.Coordinates.Rz := (DINT_TO_REAL(_bytes) / 10000.0) - 360.0;
index := 44;

_status.State.EventId := TcoUtilities.TcoBytesToUDint(inFormat := TcoUtilities.eTcoDataFormat.LittleEndian,
    inByte0 := inoData.In.Inputs[index],
    inByte1 := inoData.In.Inputs[index + 1],
    inByte2 := inoData.In.Inputs[index + 2],
    inByte3 := inoData.In.Inputs[index + 3]);]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>