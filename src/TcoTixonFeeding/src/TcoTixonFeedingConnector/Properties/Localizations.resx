<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="___Invalid_reference____" xml:space="preserve">
    <value>Invalid reference: </value>
  </data>
  <data name="___Tixon_control_system_not_in_auto___" xml:space="preserve">
    <value>Tixon control system not in auto </value>
  </data>
  <data name="___Waiting_for_buffer_is_Empty___" xml:space="preserve">
    <value>Waiting for buffer is Empty </value>
  </data>
  <data name="___Waiting_for_blow_on___" xml:space="preserve">
    <value>Waiting for blow on </value>
  </data>
  <data name="___Waiting_for_buffer_is_full_and_go_idle__" xml:space="preserve">
    <value>Waiting for buffer is full and go idle</value>
  </data>
  <data name="___Waiting_for_buffer_is_full_and_blow_ending__" xml:space="preserve">
    <value>Waiting for buffer is full and blow ending</value>
  </data>
  <data name="___Buffer_task__was_aborted___" xml:space="preserve">
    <value>Buffer task  was aborted.</value>
  </data>
  <data name="___Buffer_task__finished_successfully___" xml:space="preserve">
    <value>Buffer task  finished successfully.</value>
  </data>
  <data name="___Buffer_task_finished_with_error___" xml:space="preserve">
    <value>Buffer task finished with error.</value>
  </data>
  <data name="___Buffer_task_started___" xml:space="preserve">
    <value>Buffer task started.</value>
  </data>
  <data name="___Waiting_for_feeder_empty__" xml:space="preserve">
    <value>Waiting for feeder empty</value>
  </data>
  <data name="___Hopper_is_running__" xml:space="preserve">
    <value>Hopper is running</value>
  </data>
  <data name="___Hopper_task__was_aborted___" xml:space="preserve">
    <value>Hopper task  was aborted.</value>
  </data>
  <data name="___Hopper_task__finished_successfully___" xml:space="preserve">
    <value>Hopper task  finished successfully.</value>
  </data>
  <data name="___Hopper_task_finished_with_error___" xml:space="preserve">
    <value>Hopper task finished with error.</value>
  </data>
  <data name="___Hopper_task_started___" xml:space="preserve">
    <value>Hopper task started.</value>
  </data>
  <data name="___Waiting_for_buffer_empty__" xml:space="preserve">
    <value>Waiting for buffer empty</value>
  </data>
  <data name="___Stepper_to_home__" xml:space="preserve">
    <value>Stepper to home</value>
  </data>
  <data name="___Stepper_to_work__" xml:space="preserve">
    <value>Stepper to work</value>
  </data>
  <data name="___Waiting_for_buffer_full__" xml:space="preserve">
    <value>Waiting for buffer full</value>
  </data>
  <data name="___Stepper_task__was_aborted___" xml:space="preserve">
    <value>Stepper task  was aborted.</value>
  </data>
  <data name="___Stepper_task__finished_successfully___" xml:space="preserve">
    <value>Stepper task  finished successfully.</value>
  </data>
  <data name="___Stepper_task_finished_with_error___" xml:space="preserve">
    <value>Stepper task finished with error.</value>
  </data>
  <data name="___Stepper_task_started___" xml:space="preserve">
    <value>Stepper task started.</value>
  </data>
  <data name="___Waiting_for___" xml:space="preserve">
    <value>Waiting for </value>
  </data>
  <data name="___Waiting_for_component_in__separator__" xml:space="preserve">
    <value>Waiting for component in  separator</value>
  </data>
  <data name="___Waiting_for_component_in_Pick_position__" xml:space="preserve">
    <value>Waiting for component in Pick position</value>
  </data>
  <data name="___Separator_task__was_aborted___" xml:space="preserve">
    <value>Separator task  was aborted.</value>
  </data>
  <data name="___Separator_task__finished_successfully___" xml:space="preserve">
    <value>Separator task  finished successfully.</value>
  </data>
  <data name="___Separator_task_finished_with_error___" xml:space="preserve">
    <value>Separator task finished with error.</value>
  </data>
  <data name="___Separator_task_started___" xml:space="preserve">
    <value>Separator task started.</value>
  </data>
  <data name="___Status__" xml:space="preserve">
    <value>Status</value>
  </data>
  <data name="___Control__" xml:space="preserve">
    <value>Control</value>
  </data>
  <data name="___Config__" xml:space="preserve">
    <value>Config</value>
  </data>
  <data name="___Separator_task__" xml:space="preserve">
    <value>Separator task</value>
  </data>
  <data name="___Buffer_task__" xml:space="preserve">
    <value>Buffer task</value>
  </data>
  <data name="___Step_task__" xml:space="preserve">
    <value>Step task</value>
  </data>
  <data name="___Hopper_task__" xml:space="preserve">
    <value>Hopper task</value>
  </data>
  <data name="___Restore__" xml:space="preserve">
    <value>Restore</value>
  </data>
  <data name="___Waiting_for_blow_B_on___" xml:space="preserve">
    <value>Waiting for blow B on </value>
  </data>
  <data name="___Start__vibratorating_and_blowing__" xml:space="preserve">
    <value>Start  vibratorating and blowing</value>
  </data>
  <data name="___Waiting_for_buffer_is_full_adn_blow_ending__" xml:space="preserve">
    <value>Waiting for buffer is full adn blow ending</value>
  </data>
  <data name="___Vib__bin_task__was_aborted___" xml:space="preserve">
    <value>Vib. bin task  was aborted.</value>
  </data>
  <data name="___Vib__bin_task__finished_successfully___" xml:space="preserve">
    <value>Vib. bin task  finished successfully.</value>
  </data>
  <data name="___Vib__bin_task_finished_with_error___" xml:space="preserve">
    <value>Vib. bin task finished with error.</value>
  </data>
  <data name="___Vib__bin_task_started___" xml:space="preserve">
    <value>Vib. bin task started.</value>
  </data>
  <data name="___Vibrating_bin_task__" xml:space="preserve">
    <value>Vibrating bin task</value>
  </data>
  <data name="___Tixon_has_inconsistent_configuration___OutOfBoxSensorDisabled_is_not_disabled_instead_of_SeparatorHasWorkPosition_is_On____" xml:space="preserve">
    <value>Tixon has inconsistent configuration! (OutOfBoxSensorDisabled is not disabled instead of SeparatorHasWorkPosition is On!)</value>
  </data>
  <data name="___Check_component_at_the_separator_output__The_component_is_probably_stuck____" xml:space="preserve">
    <value>Check component at the separator output. The component is probably stuck!.</value>
  </data>
  <data name="___Waiting_for_component_out_of__separator__" xml:space="preserve">
    <value>Waiting for component out of  separator</value>
  </data>
  <data name="___Waiting_to_separator_to_reach_work_position___" xml:space="preserve">
    <value>Waiting to separator to reach work position.</value>
  </data>
  <data name="___Blink_period__" xml:space="preserve">
    <value>Blink period</value>
  </data>
  <data name="___Feeder_empty_time_to_report__" xml:space="preserve">
    <value>Feeder empty time to report</value>
  </data>
  <data name="___Buffer_empty_time_to_report__" xml:space="preserve">
    <value>Buffer empty time to report</value>
  </data>
  <data name="___Buffer_full_time_to_report__" xml:space="preserve">
    <value>Buffer full time to report</value>
  </data>
  <data name="___Buffer_blow_on_start__" xml:space="preserve">
    <value>Buffer blow on start</value>
  </data>
  <data name="___Buffer_time_to_idle__" xml:space="preserve">
    <value>Buffer time to idle</value>
  </data>
  <data name="___Buffer_full_blow_time_after__" xml:space="preserve">
    <value>Buffer full blow time after</value>
  </data>
  <data name="___Buffer_blow__active___" xml:space="preserve">
    <value>Buffer blow  active </value>
  </data>
  <data name="___Time_when_component_in_separator___" xml:space="preserve">
    <value>Time when component in separator </value>
  </data>
  <data name="___Time_when_component_is_out_of_separator___" xml:space="preserve">
    <value>Time when component is out of separator </value>
  </data>
  <data name="___Hooper_is_active__" xml:space="preserve">
    <value>Hooper is active</value>
  </data>
  <data name="___Time_to_hopper_start___" xml:space="preserve">
    <value>Time to hopper start </value>
  </data>
  <data name="___Time_to_hopper_run___" xml:space="preserve">
    <value>Time to hopper run </value>
  </data>
  <data name="___Separator__active___" xml:space="preserve">
    <value>Separator  active </value>
  </data>
  <data name="___Feeding_A___" xml:space="preserve">
    <value>Feeding A </value>
  </data>
  <data name="___Separe_component__" xml:space="preserve">
    <value>Separe component</value>
  </data>
  <data name="___Blow_A__" xml:space="preserve">
    <value>Blow A</value>
  </data>
  <data name="___Red_led__" xml:space="preserve">
    <value>Red led</value>
  </data>
  <data name="___Green_led__" xml:space="preserve">
    <value>Green led</value>
  </data>
  <data name="___Hooper__" xml:space="preserve">
    <value>Hooper</value>
  </data>
  <data name="___Component_is_ready__" xml:space="preserve">
    <value>Component is ready</value>
  </data>
  <data name="___Tixon_controller_in_auto__" xml:space="preserve">
    <value>Tixon controller in auto</value>
  </data>
  <data name="___Feeder_has_components__" xml:space="preserve">
    <value>Feeder has components</value>
  </data>
  <data name="___Separator_in_home_position__" xml:space="preserve">
    <value>Separator in home position</value>
  </data>
  <data name="___Filing_sensor__" xml:space="preserve">
    <value>Filing sensor</value>
  </data>
  <data name="___Separator_present__" xml:space="preserve">
    <value>Separator present</value>
  </data>
  <data name="___Time_when_stepper_in_work___" xml:space="preserve">
    <value>Time when stepper in work </value>
  </data>
  <data name="___Time_when_stepper_in_home___" xml:space="preserve">
    <value>Time when stepper in home </value>
  </data>
  <data name="___Error_time_separator___" xml:space="preserve">
    <value>Error time separator </value>
  </data>
  <data name="___Error_time_buffer___" xml:space="preserve">
    <value>Error time buffer </value>
  </data>
  <data name="___Error_time_Stepper___" xml:space="preserve">
    <value>Error time Stepper </value>
  </data>
  <data name="___Error_time_Hopper___" xml:space="preserve">
    <value>Error time Hopper </value>
  </data>
  <data name="___Stepper_valve__" xml:space="preserve">
    <value>Stepper valve</value>
  </data>
  <data name="___Separator_in_work_position__" xml:space="preserve">
    <value>Separator in work position</value>
  </data>
  <data name="___Stepper_in_home_position__" xml:space="preserve">
    <value>Stepper in home position</value>
  </data>
  <data name="___Stepper_in_work_position__" xml:space="preserve">
    <value>Stepper in work position</value>
  </data>
  <data name="___In_Pick_Zone__" xml:space="preserve">
    <value>In Pick Zone</value>
  </data>
  <data name="___Out_of_box_sensor_disabled__usualy_TRUE_when_pushing_to_up_direction____" xml:space="preserve">
    <value>Out of box sensor disabled (usualy TRUE when pushing to up direction) </value>
  </data>
  <data name="___Separator_has_work_position__usualy_TRUE_when_pushing_to_up_direction___" xml:space="preserve">
    <value>Separator has work position (usualy TRUE when pushing to up direction)</value>
  </data>
  <data name="___Buffer_stucked_on_filing_sensor__" xml:space="preserve">
    <value>Buffer stucked on filing sensor</value>
  </data>
  <data name="___Shot_component__" xml:space="preserve">
    <value>Shot component</value>
  </data>
  <data name="___Component_out_of_box__" xml:space="preserve">
    <value>Component out of box</value>
  </data>
  <data name="___Feeder_blow_B_on_start__" xml:space="preserve">
    <value>Feeder blow B on start</value>
  </data>
  <data name="___Feeder_full_blow_B_time_after__" xml:space="preserve">
    <value>Feeder full blow B time after</value>
  </data>
  <data name="___Feeder_blow_B__active___" xml:space="preserve">
    <value>Feeder blow B  active </value>
  </data>
  <data name="___Feeding_B__" xml:space="preserve">
    <value>Feeding B</value>
  </data>
  <data name="___Blow_B__" xml:space="preserve">
    <value>Blow B</value>
  </data>
</root>