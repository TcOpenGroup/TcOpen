<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="WpfContext" Id="{e2fd5f19-4bbe-0f00-36fe-5214d6f8a50d}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK WpfContext EXTENDS TcoCore.TcoContext
VAR
    _serviceModeActive : BOOL;
    {attribute addProperty Name "<#TcoTixonStep #>"}
    _tixonStepFeeder : TcoTixonFeeding.TcoTixonStep_v_1_x_x(THIS^);


	
	_sequence1      : TcoCore.TcoSequence(THIS^, eRestoreMode.None);
    _observer       : TcoCore.TcoSequencerObserver(THIS^);
    {attribute addProperty Name "Start sequence"}
    _sequence1Task 	: SequenceTask(THIS^);
    _dialog1        	: TcoCore.TcoDialog(THIS^);
    {attribute addProperty Name "Requred attempts"}
    _maxAllowedAttempts1: INT;


	_sequence2     : TcoCore.TcoSequence(THIS^, eRestoreMode.None);
    _observer2       : TcoCore.TcoSequencerObserver(THIS^);
    {attribute addProperty Name "Start sequence"}
    _sequence2Task 	: SequenceTask(THIS^);
	_enable: BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="Main" Id="{c7a9148d-1559-0f1e-1025-5dbaa255a357}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Main method of the TcoContext. This is the entry point of any control logic that belongs to this context. 
			The call of this method is ensured by calling the <c>InstanceName.Run()</c> method, and it must not be called explicitly.
			This method is abstract, and it must be overridden in derived block.
		</summary>
	</docu>
~*)
METHOD PROTECTED Main]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _serviceModeActive THEN
   	_tixonStepFeeder.Service();
 


END_IF
_tixonStepFeeder(
    inoData := GVL.TixonStep);




_sequence1Task.Enabled :=TRUE;
_sequence1Task(Sequence := _sequence1);
IF(_sequence1Task.Execute())THEN
	Sequence1();
END_IF;

]]></ST>
      </Implementation>
    </Method>
    <Method Name="Sequence1" Id="{89972cda-7244-09d3-0740-39764b7f2cff}">
      <Declaration><![CDATA[METHOD Sequence1
VAR
    seq    : REFERENCE TO TcoCore.TcoSequence;
    answer : TcoCore.eDialogAnswer;
	done: BOOL;
	ProbeDoneWhen: INT;

END_VAR

VAR_INST
	_noOfAttmets: INT;
	_timer:ton;

END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[seq REF= _sequence1;

seq.Open();
seq.Observer := _observer;


_tixonStepFeeder.CyclicBufferFeed(); 
_tixonStepFeeder.CyclicStepperFeed();
_tixonStepFeeder.CyclicHopperFeed();
_tixonStepFeeder.DefaultSignalisation();

 
		
IF (seq.Step(inStepID := 0,
    inEnabled := TRUE,
    inStepDescription := 'READY TO START')) THEN
    //--------------------------------------------------------

	_noOfAttmets:=0;

	answer := _dialog1			
			.Show()	
			.WithType(eDialogType.Question)				
			.WithCaption('Ready to go?')
			.WithText('Do you really want to start movements? Do we go ahead?')			
			.WithYesNo().Answer;
			//
			
	 IF (answer = TcoCore.eDialogAnswer.Yes) THEN    	 	
		seq.CompleteStep();
	 ELSIF(answer = TcoCore.eDialogAnswer.No) THEN
		_sequence1Task.Restore();
	 END_IF;	

    //--------------------------------------------------------			
END_IF;


IF (seq.Step(inStepID := 10,
    inEnabled := TRUE,
    inStepDescription := 'RESTORE')) THEN
//--------------------------------------------------------   
	
	_tixonStepFeeder.Restore();
	seq.CompleteStep();
	
		
//--------------------------------------------------------			
END_IF;
IF (seq.Step(inStepID := 11,
    inEnabled := TRUE,
    inStepDescription := 'START FEEDING TASK')) THEN
//--------------------------------------------------------   
	

  	 _tixonStepFeeder.Separe();
	seq.CompleteStep();
	
		
//--------------------------------------------------------			
END_IF;

IF (seq.Step(inStepID := 12,
    inEnabled := TRUE,
    inStepDescription := 'WAIT FOR COMPONENT')) THEN
//--------------------------------------------------------   
	
	 	IF _tixonStepFeeder.Status.State.ComponentReady  THEN
			seq.CompleteStep();
			_timer(IN:=FALSE);
		END_IF;
		
//--------------------------------------------------------			
END_IF;

IF (seq.Step(inStepID := 13,
    inEnabled := TRUE,
    inStepDescription := 'NASTREL')) THEN
//--------------------------------------------------------   
	_timer(IN:=TRUE,PT:= T#100MS);
	 _tixonStepFeeder.Push(TRUE);
    IF _timer.Q   THEN
		seq.CompleteStep();
		_tixonStepFeeder.Push(FALSE);
	END_IF;
		
//--------------------------------------------------------			
END_IF;



IF (seq.Step(inStepID := 16,
    inEnabled := TRUE,
    inStepDescription := 'COUNT')) THEN
//--------------------------------------------------------   


		IF _noOfAttmets<_maxAllowedAttempts1 THEN
			_noOfAttmets:=_noOfAttmets+1;
			seq.RequestStep(11);
		
		ELSE 
			seq.CompleteStep();
		end_if;

//--------------------------------------------------------			
END_IF;





IF (seq.Step(inStepID := 600,
    inEnabled := TRUE,
    inStepDescription := 'ASKING FOR RESTORING')) THEN
//    --------------------------------------------------------
	_tixonStepFeeder.Restore();
	answer := _dialog1			
			.Show()	
			.WithType(eDialogType.Question)				
			.WithCaption('Question?')
			.WithText('Do you want to repat it?')			
			.WithYesNo().Answer;
			
			
	 IF (answer = TcoCore.eDialogAnswer.Yes) THEN    	 	
		seq.CompleteStep();
	 ELSIF(answer = TcoCore.eDialogAnswer.No) THEN
		_sequence1Task.Restore();
	 END_IF;	
//    --------------------------------------------------------			
END_IF;

IF (seq.Step(inStepID := seq.RESTORE_STEP_ID,
    inEnabled := TRUE,
    inStepDescription := 'RETURN TO THE START OF THE SEQUENCE')) THEN
    //--------------------------------------------------------	

    	seq.CompleteSequence();
    //--------------------------------------------------------			
END_IF;

seq.Close();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>