<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="TcoTixonPickBufferTask" Id="{1f3423fb-e9bd-0f42-0fbc-88fd40aefa3b}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK TcoTixonPickBufferTask EXTENDS TcoTixonFeedingTask
VAR_IN_OUT
	inoConfig 	: TcoTixonGenericPickConfig;
   	inoControl 	: TcoTixonGenericControl;
	inoStatus 	: TcoTixonGenericStatus;	
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[
IF Execute() THEN
	
	
    IF _progress = 0 THEN
        IF NOT __ISVALIDREF(inoControl) THEN
            _varInfo := __VARINFO(inoControl);
            Messenger.Programming(_sb.Clear().Append('<#Invalid reference: #>').Append(_varInfo.Symbol).ToString()).Pin();
        ELSIF NOT __ISVALIDREF(inoConfig) THEN
            _varInfo := __VARINFO(inoConfig);
            Messenger.Programming(_sb.Clear().Append('<#Invalid reference: #>').Append(_varInfo.Symbol).ToString()).Pin();
        ELSIF NOT __ISVALIDREF(inoStatus) THEN
            _varInfo := __VARINFO(inoStatus);
            Messenger.Programming(_sb.Clear().Append('<#Invalid reference: #>').Append(_varInfo.Symbol).ToString()).Pin();
        ELSIF NOT inoStatus.ControllerInAuto THEN
            _varInfo := __VARINFO(inoStatus.ControllerInAuto);
            Messenger.Warning(_sb.Clear().Append('<#Tixon control system not in auto #>').Append(_varInfo.Symbol).ToString());
        ELSE
			IF NOT THIS^._errorMessage.Pinned THEN	
           		_progress := _progress + 1;
			END_IF;

        END_IF

    END_IF
  	IF _progress = 1 THEN
        Messenger.Debug('<#Waiting for buffer is Empty #>');
        _timer(IN := NOT inoStatus.FillingSensor OR (NOT inoStatus.SeparatorPresent),
            Pt := inoConfig.BufferEmptyTime);
			
        IF _timer.Q THEN
            _progress := _progress + 1;
            _timer(In := FALSE);
        END_IF;


    END_IF;
    IF _progress = 2 THEN
        Messenger.Debug('<#Waiting for blow on #>');
        _timer(IN :=TRUE,
            Pt := inoConfig.BufferBlowStartTime);
		  inoControl.BlowAValve := inoConfig.BufferBlowActive;	
        IF _timer.Q OR NOT inoConfig.BufferBlowActive THEN  
			inoControl.FeedingA:=TRUE;
            _progress := _progress + 1;
            _timer(In := FALSE);
        END_IF;


    END_IF;
	

    IF _progress = 3 THEN
        Messenger.Debug('<#Waiting for buffer is full and go idle#>');
        _timer(IN := inoStatus.FillingSensor AND InoStatus.SeparatorPresent, Pt := inoConfig.BufferIdleTime);

        IF _timer.Q THEN
            _progress := _progress + 1;
            _timer(In := FALSE);
        END_IF
    END_IF;

    IF _progress = 4 THEN
        inoControl.FeedingA := FALSE;
        Messenger.Debug('<#Waiting for buffer is full and blow ending#>');
        _timer(IN := TRUE, Pt := inoConfig.BufferBlowFullTime);
        IF _timer.Q OR NOT inoConfig.BufferBlowActive THEN
            inoControl.BlowAValve := FALSE;
            _progress := _progress + 1;
            _timer(In := FALSE);
        END_IF;

    END_IF;

    IF _progress = 5 THEN
        THIS^.DoneWhen(TRUE);
    END_IF;

    CallTimers(_progress>1);//empty and start feeding

    THIS^.ThrowWhen(_errorTimer.Q);

END_IF

IF THIS^.Error AND NOT _errorMessage.Pinned THEN
    THIS^.Restore();
END_IF]]></ST>
    </Implementation>
    <Method Name="OnAbort" Id="{89775d83-6f6b-0477-2d8b-7a053e2ed6c0}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Executes when task is aborted.
		</summary>			
	</docu>	
~*)
METHOD PROTECTED OnAbort
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF  __ISVALIDREF(inoStatus) THEN   THIS^.inoStatus.ActionDescription := '<#Buffer task  was aborted.#>'; END_IF;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnDone" Id="{a22fec2b-2ca5-0a5e-1f11-ed7b2a2bd701}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Executes when task reaches the ```Done``` state .
		</summary>			
	</docu>	
~*)
METHOD PROTECTED OnDone
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF  __ISVALIDREF(inoStatus) THEN   THIS^.inoStatus.ActionDescription := '<#Buffer task  finished successfully.#>'; END_IF;
_progress:=0;
IF AutoRestore THEN
	Restore();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnError" Id="{d3aa2a65-f7c7-0576-0c1d-387aea462eaa}">
      <Declaration><![CDATA[METHOD PROTECTED OnError
VAR
	description: STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[description := '<#Buffer task finished with error.#>'; 
inoControl.FeedingA:=FALSE;
inoControl.BlowAValve:=false;
IF  __ISVALIDREF(inoStatus) THEN   THIS^.inoStatus.ActionDescription := description; END_IF;
THIS^._errorMessage.Error(_sb.Clear().Append(description).Append(' To restore acknowledge this alarm.').ToString()).Pin();]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnStart" Id="{bf8ca941-d77c-0d42-08a1-3d1b38461945}">
      <Declaration><![CDATA[METHOD PROTECTED OnStart 
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF  __ISVALIDREF(inoStatus) THEN  THIS^.inoStatus.ActionDescription := '<#Buffer task started.#>'; END_IF; 

CallTimers(FALSE);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Restore" Id="{35aac45d-e26b-04f6-3815-6c2f7757386c}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Restores this instance to the Ready state. Can be called explicitly or from within one of the restore mechanisms.
			<para>
				See also <see cref="PlcDocu.TcoCore.TcoTask.AutoRestorable()"/>
			</para>
		</summary>			
	</docu>	
~*)
METHOD Restore : ITcoRestorable]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.Restore();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>