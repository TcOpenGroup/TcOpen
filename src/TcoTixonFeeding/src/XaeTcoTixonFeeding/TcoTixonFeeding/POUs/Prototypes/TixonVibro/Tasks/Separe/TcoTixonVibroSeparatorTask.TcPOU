<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="TcoTixonVibroSeparatorTask" Id="{53bec69b-abe6-0740-2a5c-97ce1a1e3e01}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK TcoTixonVibroSeparatorTask EXTENDS TcoTixonFeedingTask
VAR_IN_OUT
    inoConfig : TcoTixonVibro_Config_v_1_x_x;
    inoControl : TcoTixonVibro_Control_v_1_x_x;
    inoStatus : TcoTixonVibro_Status_v_1_x_x;
END_VAR
VAR
    _componentReady : BOOL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF Execute() THEN
    IF _progress = 0 THEN
        IF NOT __ISVALIDREF(inoControl) THEN
            _varInfo := __VARINFO(inoControl);
            Messenger.Programming(_sb.Clear().Append('<#Invalid reference: #>').Append(_varInfo.Symbol).ToString()).Pin();
        ELSIF NOT __ISVALIDREF(inoConfig) THEN
            _varInfo := __VARINFO(inoConfig);
            Messenger.Programming(_sb.Clear().Append('<#Invalid reference: #>').Append(_varInfo.Symbol).ToString()).Pin();
        ELSIF NOT __ISVALIDREF(inoStatus) THEN
            _varInfo := __VARINFO(inoStatus);
            Messenger.Programming(_sb.Clear().Append('<#Invalid reference: #>').Append(_varInfo.Symbol).ToString()).Pin();
        ELSIF NOT inoStatus.ControllerInAuto THEN
            _varInfo := __VARINFO(inoStatus.ControllerInAuto);
            Messenger.Warning(_sb.Clear().Append('<#Tixon control system not in auto #>').Append(_varInfo.Symbol).ToString());
        ELSE
            IF NOT inoConfig.OutOfBoxSensorDisabled AND inoConfig.SeparatorHasWorkPosition THEN
                Messenger.Error(_sb.Clear()
                        .Append('<#Tixon has inconsistent configuration! (OutOfBoxSensorDisabled is not disabled instead of SeparatorHasWorkPosition is On!)#>')
                        .ToString()).Pin();
            ELSE
                IF NOT THIS^._errorMessage.Pinned THEN
                    _progress := _progress + 1;
                END_IF;
            END_IF;
        END_IF
    END_IF

    IF _progress = 1 THEN
        inoControl.SepareComponent := FALSE;
        _varInfo := __VARINFO(inoStatus.SeparatorHomePos);

        THIS^.Messenger.OnCondition(_infoTimer.Q AND NOT inoStatus.SeparatorHomePos)
            .Warning(_sb.Clear().Append('<#Waiting for #>').Append(_varInfo.Symbol).ToString());

        THIS^.Messenger.OnCondition(_infoTimer.Q AND inoStatus.ComponentOutOfBox AND NOT inoConfig.OutOfBoxSensorDisabled)
            .Error(_sb.Clear()
                .Append('<#Check component at the separator output. The component is probably stuck!.#>')
                .Append(_varInfo.Symbol)
                .ToString()).Pin();

        IF _infoTimer.Q AND inoStatus.ComponentOutOfBox and NOT inoConfig.OutOfBoxSensorDisabled THEN
            THIS^.ThrowWhen(_errorTimer.Q);
        ELSIF inoStatus.SeparatorHomePos AND NOT inoStatus.ComponentOutOfBox THEN
            _progress := _progress + 1;
            _timer(In := FALSE);
        END_IF;
    END_IF;

    IF _progress = 2 THEN
        Messenger.Debug('<#Waiting for component in  separator#>');
        _timer(IN := inoStatus.SeparatorPresent, Pt := inoConfig.TimeToComponentInSeparator);

        IF _timer.Q THEN
            _progress := _progress + 1;
            _timer(In := FALSE);
        END_IF
    END_IF;

    IF _progress = 3 THEN
        inoControl.SepareComponent := TRUE;
        Messenger.OnCondition(NOT inoConfig.OutOfBoxSensorDisabled).Debug('<#Waiting for component out of  separator#>');

        Messenger.OnCondition(inoConfig.OutOfBoxSensorDisabled AND inoConfig.SeparatorHasWorkPosition)
            .Warning('<#Waiting to separator to reach work position.#>');

        _timer(IN := inoStatus.SeparatorPresent, Pt := inoConfig.TimeToComponentOutSeparator);

        IF inoStatus.ComponentOutOfBox AND NOT inoConfig.OutOfBoxSensorDisabled THEN
            _progress := _progress + 1;
            _timer(In := FALSE);
        ELSIF inoConfig.OutOfBoxSensorDisabled AND inoConfig.SeparatorHasWorkPosition AND inoStatus.SeparatorWorkPos THEN
            _progress := _progress + 1;
            _timer(In := FALSE);
        ELSIF inoConfig.OutOfBoxSensorDisabled AND NOT inoConfig.SeparatorHasWorkPosition AND _timer.Q THEN
            _progress := _progress + 1;
            _timer(In := FALSE);
        ELSIF _timer.Q AND NOT inoConfig.OutOfBoxSensorDisabled THEN
            _progress := 1;
            _timer(In := FALSE);
        END_IF
    END_IF;

    IF _progress = 4 THEN
        _componentReady := TRUE;
        THIS^.DoneWhen(TRUE);
    END_IF;

    CallTimers(TRUE);
    THIS^.ThrowWhen(_errorTimer.Q);
END_IF

inoStatus.ComponentReady := _componentReady;

IF THIS^.Error AND NOT _errorMessage.Pinned THEN
    THIS^.Restore();
END_IF]]></ST>
    </Implementation>
    <Property Name="ComponentReady" Id="{27e6e37e-04f9-09d4-3aa4-cdf124459b0e}">
      <Declaration><![CDATA[PROPERTY PUBLIC ComponentReady : bool]]></Declaration>
      <Get Name="Get" Id="{8c473351-c0ff-0455-23f4-831ec6d1ce9d}">
        <Declaration><![CDATA[VAR
END_VAR]]></Declaration>
        <Implementation>
          <ST><![CDATA[ComponentReady := _componentReady;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="OnAbort" Id="{0596b756-7e07-0869-1beb-5178229fdcba}">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Executes when task is aborted.
        </summary>
    </docu>
~*)
METHOD PROTECTED OnAbort]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF __ISVALIDREF(inoStatus) THEN
    THIS^.inoStatus.ActionDescription := '<#Separator task  was aborted.#>';
END_IF;]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnDone" Id="{a6570a8e-ab41-07b2-0935-c1f4e6f9fa6b}">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Executes when task reaches the ```Done``` state .
        </summary>
    </docu>
~*)
METHOD PROTECTED OnDone]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF __ISVALIDREF(inoStatus) THEN
    THIS^.inoStatus.ActionDescription := '<#Separator task  finished successfully.#>';
END_IF;

_progress := 0;

IF AutoRestore THEN
    Restore();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnError" Id="{5fb442ed-cd99-01b3-1350-6a2d1cc910b5}">
      <Declaration><![CDATA[METHOD PROTECTED OnError
VAR
    description : STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[description := '<#Separator task finished with error.#>';
_componentReady := false;

IF __ISVALIDREF(inoStatus) THEN
    THIS^.inoStatus.ActionDescription := description;
END_IF;

THIS^._errorMessage.Error(_sb.Clear().Append(description).Append(' To restore acknowledge this alarm.').ToString()).Pin();]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnStart" Id="{b13c96bc-245a-0755-0097-5dcd9ee2df3c}">
      <Declaration><![CDATA[METHOD PROTECTED OnStart]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF __ISVALIDREF(inoStatus) THEN
    THIS^.inoStatus.ActionDescription := '<#Separator task started.#>';
END_IF;

_componentReady := false;
CallTimers(FALSE);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Restore" Id="{e7228cd0-1490-0e28-2cb9-0f2ff30d3352}">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Restores this instance to the Ready state. Can be called explicitly or from within one of the restore mechanisms.
            <para>
                See also <see cref="PlcDocu.TcoCore.TcoTask.AutoRestorable()"/>
            </para>
        </summary>
    </docu>
~*)
METHOD Restore : ITcoRestorable]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.Restore();
_componentReady := false;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>