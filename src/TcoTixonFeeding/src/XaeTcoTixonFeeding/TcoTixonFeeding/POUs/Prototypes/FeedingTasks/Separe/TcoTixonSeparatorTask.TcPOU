<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="TcoTixonSeparatorTask" Id="{79e4a0a2-2aba-0fe3-02b6-d3c7511d43bc}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK TcoTixonSeparatorTask EXTENDS TcoTixonFeedingTask

VAR
	_componentReady: BOOL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[

IF Execute() THEN
	 
  	IF _progress = 0 THEN
		IF NOT __ISVALIDREF(inoControl) THEN
			_varInfo :=__VARINFO(inoControl);
			Messenger.Programming(_sb.Clear().Append('<#Invalid reference: #>').Append(_varInfo.Symbol).ToString()).Pin();
		ELSIF NOT __ISVALIDREF(inoConfig) THEN                                                  
			_varInfo :=__VARINFO(inoConfig);                                                    
			Messenger.Programming(_sb.Clear().Append('<#Invalid reference: #>').Append(_varInfo.Symbol).ToString()).Pin();
		ELSIF NOT __ISVALIDREF(inoStatus) THEN                                                  
			_varInfo :=__VARINFO(inoStatus);                                                    
			Messenger.Programming(_sb.Clear().Append('<#Invalid reference: #>').Append(_varInfo.Symbol).ToString()).Pin();
		ELSIF NOT inoStatus.State.ControllerInAuto THEN                                                  
			_varInfo :=__VARINFO(inoStatus.State.ControllerInAuto);                                                                                              
			Messenger.Warning(_sb.Clear().Append('<#Tixon control system not in auto #>').Append(_varInfo.Symbol).ToString());
		ELSE

			_progress := _progress + 1;

		END_IF

	END_IF
	IF _progress = 1 THEN
		inoControl.SepareComponent:=FALSE;
		_varInfo :=__VARINFO( inoStatus.State.SeparatorHomePos);                                                
		THIS^.Messenger.OnCondition(_infoTimer.Q AND NOT inoStatus.State.SeparatorHomePos).Warning(_sb.Clear().Append('<#Waiting for #>').Append(_varInfo.Symbol).ToString());
		IF  inoStatus.State.SeparatorHomePos THEN
			_progress := _progress + 1;
			_timer(In:=FALSE);
		END_IF;
	END_IF;
	
	
	IF _progress = 2 THEN	
		Messenger.Debug('<#Waiting for component in  separator#>');
		_timer(IN:=inoStatus.State.SeparatorPresent,Pt:=inoConfig.TimeToComponentInSeparator);
		IF _timer.Q THEN
			_progress := _progress + 1;
			_timer(In:=FALSE);
		END_IF
	END_IF;
	
	IF _progress = 3 THEN	
		inoControl.SepareComponent:=TRUE;
		Messenger.Debug('<#Waiting for component out of  separator#>');
		_timer(IN:=inoStatus.State.SeparatorPresent,Pt:=inoConfig.TimeToComponentOutSeparator);
		IF inoStatus.State.ComponentOutOfBox THEN
			_progress := _progress + 1;
			_timer(In:=FALSE);
		ELSIF _timer.Q THEN
			_progress := 1;
			_timer(In:=FALSE);
		END_IF
	END_IF;
	
	IF _progress = 4 THEN	
		_componentReady:=TRUE;
		THIS^.DoneWhen(TRUE);
	END_IF;		

   
    CallTimers(TRUE);
	
	THIS^.ThrowWhen(_errorTimer.Q );
	
END_IF

inoStatus.State.ComponentReady:=_componentReady;

IF  THIS^.Error AND NOT _errorMessage.Pinned THEN
	THIS^.Restore();
END_IF]]></ST>
    </Implementation>
    <Property Name="ComponentReady" Id="{c590319f-de61-07bc-244f-a2791b9d7341}">
      <Declaration><![CDATA[PROPERTY PUBLIC ComponentReady : bool]]></Declaration>
      <Get Name="Get" Id="{4069e66b-bb1c-076a-35b7-e76bb8cdc347}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ComponentReady:=_componentReady;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="OnAbort" Id="{ab572cbb-51d3-08e8-3bc8-a60c11d66152}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Executes when task is aborted.
		</summary>			
	</docu>	
~*)
METHOD PROTECTED OnAbort
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF  __ISVALIDREF(inoStatus) THEN   THIS^.inoStatus.ActionDescription := '<#Separator task  was aborted.#>'; END_IF;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnDone" Id="{7c69efd0-6310-08d9-095e-294dd9a11de8}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Executes when task reaches the ```Done``` state .
		</summary>			
	</docu>	
~*)
METHOD PROTECTED OnDone
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF  __ISVALIDREF(inoStatus) THEN   THIS^.inoStatus.ActionDescription := '<#Separator task  finished successfully.#>'; END_IF;
_progress:=0;
IF AutoRestore THEN
	Restore();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnError" Id="{9c79d590-f1e3-0d1d-19cf-3aaef8e86244}">
      <Declaration><![CDATA[METHOD PROTECTED OnError
VAR
	description: STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[description := '<#Separator task finished with error.#>'; 
_componentReady:=false;
IF  __ISVALIDREF(inoStatus) THEN   THIS^.inoStatus.ActionDescription := description; END_IF;
THIS^._errorMessage.Error(_sb.Clear().Append(description).Append(' To restore acknowledge this alarm.').ToString()).Pin();]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnStart" Id="{a308dfe5-ed72-0bbe-32ec-46f59c4fb7f2}">
      <Declaration><![CDATA[METHOD PROTECTED OnStart 
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF  __ISVALIDREF(inoStatus) THEN  THIS^.inoStatus.ActionDescription := '<#Separator task started.#>'; END_IF; 
_componentReady:=false;
CallTimers(FALSE);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Restore" Id="{32cf2a07-fb4e-0985-0e57-2a489568fefd}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Restores this instance to the Ready state. Can be called explicitly or from within one of the restore mechanisms.
			<para>
				See also <see cref="PlcDocu.TcoCore.TcoTask.AutoRestorable()"/>
			</para>
		</summary>			
	</docu>	
~*)
METHOD Restore : ITcoRestorable]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.Restore();
_componentReady:=false;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>