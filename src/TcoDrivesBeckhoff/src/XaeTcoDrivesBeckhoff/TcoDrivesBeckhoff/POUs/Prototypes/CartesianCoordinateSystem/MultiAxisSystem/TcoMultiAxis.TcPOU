<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="TcoMultiAxis" Id="{1b6e4beb-3425-02bb-27ac-cfc0f6fcffd4}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK TcoMultiAxis EXTENDS TcoCore.TcoComponent IMPLEMENTS ITcoMultiAxis
VAR_INPUT
	inEnableAxis1 : BOOL;
    inEnablePositiveAxis1 : BOOL;
    inEnableNegativeAxis1 : BOOL;
    inCalibrationCamAxis1 : BOOL;
	refAxis1 : REFERENCE TO TcoAxisRef;
	inEnableAxis2 : BOOL;
    inEnablePositiveAxis2 : BOOL;
    inEnableNegativeAxis2 : BOOL;
    inCalibrationCamAxis2 : BOOL;
	refAxis2 : REFERENCE TO TcoAxisRef;
	inEnableAxis3 : BOOL;
    inEnablePositiveAxis3 : BOOL;
    inEnableNegativeAxis3 : BOOL;
    inCalibrationCamAxis3 : BOOL;
	refAxis3 : REFERENCE TO TcoAxisRef;
	inEnableAxis4 : BOOL;
    inEnablePositiveAxis4 : BOOL;
    inEnableNegativeAxis4 : BOOL;
    inCalibrationCamAxis4 : BOOL;
	refAxis4 : REFERENCE TO TcoAxisRef;
END_VAR
VAR_IN_OUT

	inoPositions:TcoMultiAxisPositionsRootContainer;
END_VAR
VAR
	{attribute 'hide'}
    _axis1Ref : REFERENCE TO TcoAxisRef;
	{attribute addProperty Name "<#Axis 1#>"}
	_axis1 :   TcoDriveSimple(THIS^);
	{attribute 'hide'}
    _axis2Ref : REFERENCE TO TcoAxisRef;
	{attribute addProperty Name "<#Axis 2#>"}
	_axis2 :   TcoDriveSimple(THIS^);
	{attribute 'hide'}
    _axis3Ref : REFERENCE TO TcoAxisRef;
	{attribute addProperty Name "<#Axis 3#>"}
	_axis3 :   TcoDriveSimple(THIS^);
	{attribute 'hide'}
    _axis4Ref : REFERENCE TO TcoAxisRef;
	{attribute addProperty Name "<#Axis 4#>"}
	_axis4 :   TcoDriveSimple(THIS^);
	
	{attribute addProperty Name "<#Status#>"}
    {attribute clr [ReadOnly()]}
    _status : TcoMultiAxisStatus;
	{attribute addProperty Name "<#Config#>"}
    _config : TcoMultiAxisConfig;
	
	{attribute addProperty Name "<#Load positions Task#>"}
	_loadPositionTask :   TcoSingleAxisDataTask(THIS^);
	{attribute addProperty Name "<#Save positions Task#>"}
	_savePositionTask :   TcoSingleAxisDataTask(THIS^);
	{attribute addProperty Name "<#Positions#>"}
	{attribute clr [MemberByIdentity()]}
	_positions : TcoMultiAxisPositionsRootContainer(THIS^);
	
	{attribute addProperty Name "<#Move absolute Task#>"}
	_moveAbsoluteTask :   TcoCore.TcoTask (THIS^);

	{attribute addProperty Name "<#Restore Task#>"}
	_restoreTask :   TcoCore.TcoTask (THIS^);
	
	_moveParams: TcoMultiAxisMoveParam;
	_progress: INT;
	_hasError: BOOL;
	
	  {attribute 'hide'} 
	_infoTimer :  TON;
    {attribute 'hide'} 
	_errorTimer :  TON;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[_positions := inoPositions;







IF NOT __ISVALIDREF(refAxis1)  AND NOT _config.Axis1Disabled THEN
    Messenger.Post('<#Invalid reference axis 1#>', TcoCore.eMessageCategory.ProgrammingError);
    RETURN;
END_IF
_axis1Ref REF= refAxis1;


_axis1(
	inEnable:=inEnableAxis1 , 
	inEnablePositive:=inEnablePositiveAxis1 , 
	inEnableNegative:=inEnableNegativeAxis1 , 
	inCalibrationCam:=inCalibrationCamAxis1, 
	inoAxisRef:= _axis1Ref);

IF NOT __ISVALIDREF(refAxis2) AND NOT _config.Axis2Disabled THEN
    Messenger.Post('<#Invalid reference axis 2#>', TcoCore.eMessageCategory.ProgrammingError);
    RETURN;
END_IF
_axis2Ref REF= refAxis2;

_axis2(
	inEnable:=inEnableAxis2 , 
	inEnablePositive:=inEnablePositiveAxis2 , 
	inEnableNegative:=inEnableNegativeAxis2 , 
	inCalibrationCam:=inCalibrationCamAxis2, 
	inoAxisRef:= _axis2Ref);

IF NOT __ISVALIDREF(refAxis3) AND NOT _config.Axis3Disabled THEN
    Messenger.Post('<#Invalid reference axis 3#>', TcoCore.eMessageCategory.ProgrammingError);
    RETURN;
END_IF	
_axis3Ref REF= refAxis3;

_axis3(
	inEnable:=inEnableAxis3 , 
	inEnablePositive:=inEnablePositiveAxis3 , 
	inEnableNegative:=inEnableNegativeAxis3 , 
	inCalibrationCam:=inCalibrationCamAxis3, 
	inoAxisRef:= _axis3Ref);
	
IF NOT __ISVALIDREF(refAxis4) AND NOT _config.Axis4Disabled THEN
    Messenger.Post('<#Invalid reference axis 4#>', TcoCore.eMessageCategory.ProgrammingError);
    RETURN;
END_IF
_axis4Ref REF= refAxis4;

_axis4(
	inEnable:=inEnableAxis4 , 
	inEnablePositive:=inEnablePositiveAxis4 , 
	inEnableNegative:=inEnableNegativeAxis4 , 
	inCalibrationCam:=inCalibrationCamAxis4, 
	inoAxisRef:= _axis4Ref);

	
	
	
//*************MOVE ABSOLUTE********************
IF _moveAbsoluteTask.Execute() THEN
	
	IF _progress = 0 THEN
		IF  NOT _config.Axis1Disabled THEN 
			THIS^._axis1.MoveAbsolute(inPosition:=_moveParams.Axis1.Position,
												inVelocity:=_moveParams.Axis1.Position,
												inAcceleration:=_moveParams.Axis1.Acceleration,
												inDeceleration:=_moveParams.Axis1.Deceleration,		
												inJerk:=_moveParams.Axis1.Jerk);
		END_IF;
		IF  NOT _config.Axis2Disabled THEN 										
			THIS^._axis2.MoveAbsolute(inPosition:=_moveParams.Axis2.Position,
												inVelocity:=_moveParams.Axis2.Position,
												inAcceleration:=_moveParams.Axis2.Acceleration,
												inDeceleration:=_moveParams.Axis2.Deceleration,		
												inJerk:=_moveParams.Axis2.Jerk);
		END_IF;
		IF  NOT _config.Axis3Disabled THEN 
			THIS^._axis3.MoveAbsolute(inPosition:=_moveParams.Axis3.Position,
												inVelocity:=_moveParams.Axis3.Position,
												inAcceleration:=_moveParams.Axis3.Acceleration,
												inDeceleration:=_moveParams.Axis3.Deceleration,		
												inJerk:=_moveParams.Axis3.Jerk);
		END_IF;
		IF  NOT _config.Axis4Disabled THEN 
			THIS^._axis4.MoveAbsolute(inPosition:=_moveParams.Axis4.Position,
												inVelocity:=_moveParams.Axis4.Position,
												inAcceleration:=_moveParams.Axis4.Acceleration,
												inDeceleration:=_moveParams.Axis4.Deceleration,		
												inJerk:=_moveParams.Axis4.Jerk);
		END_IF;
		_progress:=_progress+10;
		
	ELSIF _progress = 10 THEN
		
		_hasError :=   (THIS^._axis1.MoveAbsoluteTask.Error AND NOT _config.Axis1Disabled)
					OR (THIS^._axis2.MoveAbsoluteTask.Error AND NOT _config.Axis2Disabled)
					OR (THIS^._axis3.MoveAbsoluteTask.Error AND NOT _config.Axis3Disabled) 
					OR (THIS^._axis4.MoveAbsoluteTask.Error AND NOT _config.Axis4Disabled) ;
				
		IF  (THIS^._axis1.MoveAbsoluteTask.Done XOR _config.Axis1Disabled)
			AND (THIS^._axis2.MoveAbsoluteTask.Done XOR _config.Axis2Disabled)
			AND (THIS^._axis3.MoveAbsoluteTask.Done XOR _config.Axis3Disabled)
			AND (THIS^._axis4.MoveAbsoluteTask.Done XOR _config.Axis4Disabled)  THEN
			
			_moveAbsoluteTask.DoneWhen(TRUE);
			CallTimers(false);
			_progress:=0;			
		
		END_IF;
		
	CallTimers(TRUE);
	_moveAbsoluteTask.ThrowWhen(_errorTimer.Q OR _hasError);	
	END_IF
END_IF;
//****************************************
	
	
_savePositionTask();
_loadPositionTask();	



//*************RESTORE********************

_restoreTask.Enabled := TRUE;
IF _restoreTask.Execute() THEN
	Restore();
END_IF
//****************************************

	
 inoPositions :=_positions;
 
 ]]></ST>
    </Implementation>
    <Folder Name="Tasks" Id="{f33bbd22-2614-07b9-35d1-d3903eabe01a}" />
    <Property Name="Axis_1" Id="{84abd4a4-3274-07cb-00bb-919cb048f67d}">
      <Declaration><![CDATA[PROPERTY Axis_1 : REFERENCE TO TcoDriveSimple]]></Declaration>
      <Get Name="Get" Id="{e9337e5f-c4ff-0cc7-3e9f-8b7fd388afe8}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Axis_1 REF=_axis1;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Axis_2" Id="{e040d7d0-d25f-0c6a-39ca-81ce96423fc9}">
      <Declaration><![CDATA[PROPERTY Axis_2 : REFERENCE TO TcoDriveSimple]]></Declaration>
      <Get Name="Get" Id="{181a605b-f35a-033d-2d75-7e4e47a86bfa}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Axis_2 REF=_axis2;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Axis_3" Id="{1009d1eb-f6d4-048d-1ff6-7282f21f07a1}">
      <Declaration><![CDATA[PROPERTY Axis_3 : REFERENCE TO TcoDriveSimple]]></Declaration>
      <Get Name="Get" Id="{a9f6ea67-9015-087e-364b-36f11d84b4b7}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Axis_3 REF=_axis3;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Axis_4" Id="{0bcb0f47-3047-0511-335a-b3fd34dc9abc}">
      <Declaration><![CDATA[PROPERTY Axis_4 : REFERENCE TO TcoDriveSimple]]></Declaration>
      <Get Name="Get" Id="{503885b3-6ce4-0613-116c-066e8c9d9224}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Axis_4 REF=_axis4;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="CallTimers" Id="{b1b1fc4f-bdb2-0c45-309b-683cd4f4a3a1}">
      <Declaration><![CDATA[METHOD CallTimers
VAR_INPUT
	inValue : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF  __ISVALIDREF(Config) THEN  
_infoTimer(IN := inValue, PT := THIS^.Config.InfoTime);
_errorTimer(IN := inValue, PT := THIS^.Config.ErrorTime);
END_IF;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Config" Id="{60f7667e-3d8f-4a6a-b9df-1321c8dd39cc}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Gets the configuration of the SFK. 					
		</summary>			
	</docu>	
~*)
PROPERTY Config : REFERENCE TO TcoMultiAxisConfig]]></Declaration>
      <Get Name="Get" Id="{40c6c354-c9a5-4f40-9262-c1766aa13786}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Config REF= _config;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="MoveAbsolute" Id="{e43a55c5-43cf-051f-3670-6a768345e9d5}">
      <Declaration><![CDATA[METHOD MoveAbsolute : ITcoTaskStatus
VAR_INPUT
	MoveParams : TcoMultiAxisMoveParam;
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[_moveParams:=MoveParams;
MoveAbsolute:=THIS^._moveAbsoluteTask.Invoke();


]]></ST>
      </Implementation>
    </Method>
    <Property Name="MoveAbsoluteTask" Id="{0c7bb685-acd1-0ee7-0df4-0adba29583f3}" FolderPath="Tasks\">
      <Declaration><![CDATA[PROPERTY PUBLIC MoveAbsoluteTask : REFERENCE TO TcoCore.TcoTask]]></Declaration>
      <Get Name="Get" Id="{e6018d57-b55d-0025-1ce0-b9345c2eeec7}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MoveAbsoluteTask REF=_moveAbsoluteTask;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Restore" Id="{fad6850c-749c-080e-1ff1-b31d79351934}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Restores this instance to the Ready state. Can be called explicitly or from within one of the restore mechanisms.	
		</summary>			
	</docu>	
~*)
METHOD  Restore : ITcoRestorable


]]></Declaration>
      <Implementation>
        <ST><![CDATA[_axis2.Restore();
_axis3.Restore();
_axis4.Restore();
_axis1.Restore();
_restoreTask.Restore();
_savePositionTask.Restore();
_loadPositionTask.Restore();
_moveAbsoluteTask.Restore();
_progress := 0;
CallTimers(FALSE);
Messenger.UnPin();]]></ST>
      </Implementation>
    </Method>
    <Method Name="ServiceMode" Id="{09e54034-b7ee-0c28-1877-f895c8d43d1e}">
      <Declaration><![CDATA[METHOD PROTECTED ServiceMode
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^._axis1.Service();
THIS^._axis2.Service();
THIS^._axis3.Service();
THIS^._axis4.Service();


]]></ST>
      </Implementation>
    </Method>
    <Property Name="Status" Id="{2f649483-230f-4ec5-a281-c0e5f85b4542}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Gets the status of the TcoMultiAxis system. 					
		</summary>			
	</docu>	
~*)
PROPERTY Status : REFERENCE TO TcoMultiAxisStatus]]></Declaration>
      <Get Name="Get" Id="{15d86d2d-9263-4f25-8906-5eb67ad2a976}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Status REF= _status;]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>