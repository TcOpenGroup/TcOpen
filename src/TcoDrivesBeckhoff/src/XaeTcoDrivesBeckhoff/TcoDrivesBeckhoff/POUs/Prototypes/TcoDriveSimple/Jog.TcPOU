<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="Jog" Id="{333a14ea-347e-019d-24ce-e5825219cd36}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK Jog EXTENDS TcoCore.TcoObject IMPLEMENTS ITcoDriveSimple, TcoCore.ITcoServiceable
VAR_INPUT
    inIsServiceMode : BOOL;
END_VAR
VAR
    {attribute 'hide'}
    _axisRef : REFERENCE TO TcoAxisRef;
    {attribute 'hide'}
    _mcJog : Tc2_MC2.MC_Jog;
    {attribute addProperty Name "<#Jog forward#>"}
    {attribute addProperty StateOnDesc "<#Running#>"}
    {attribute addProperty StateOffDesc "<#Stopped#>"}
    _jogForwardTask : TcoCore.TcoMomentaryTask(THIS^);
    {attribute addProperty Name "<#Jog backwards#>"}
    {attribute addProperty StateOnDesc "<#Running#>"}
    {attribute addProperty StateOffDesc "<#Stopped#>"}
    _jogBackwardsTask : TcoCore.TcoMomentaryTask(THIS^);
    {attribute addProperty Name "<#Jog mode#>"}
    _jogMode : eJogMode;
    {attribute addProperty Name "<#Position#>"}
    _position : LREAL;
    {attribute addProperty Name "<#Velocity#>"}
    _velocity : LREAL;
    {attribute addProperty Name "<#Acceleration#>"}
    _acceleration : LREAL;
    {attribute addProperty Name "<#Deceleration#>"}
    _deceleration : LREAL;
    {attribute addProperty Name "<#Jerk#>"}
    _jerk : LREAL;
	{attribute 'hide'}
	_dummyPreconditionOK : BOOL;
	
	_serviceContexCycle : ULINT;
	_myContextCycleCount : ULINT;
	_inServiceMode : BOOL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT __ISVALIDREF(_axisRef) THEN
    IF __ISVALIDREF(DriveRef) THEN
        _axisRef REF= DriveRef.AxisRef;
    ELSE
        RETURN;
    END_IF
END_IF

_jogForwardTask.Enabled := inIsServiceMode;
_jogBackwardsTask.Enabled := inIsServiceMode;
_jogForwardTask.Run();
_jogBackwardsTask.Run();


IF _jogForwardTask.State THEN
    _dummyPreconditionOK := DriveRef._power._mcPower.Enable_Positive;

    IF NOT DriveRef._movementState.JogPreconditionsOk(_jogForwardTask, _dummyPreconditionOK) THEN
        Messenger.Error('Movements to positive direction are disabled');
        RETURN;
    END_IF
END_IF

IF _jogBackwardsTask.State THEN
    _dummyPreconditionOK := DriveRef._power._mcPower.Enable_Negative;

    IF NOT DriveRef._movementState.JogPreconditionsOk(_jogBackwardsTask, _dummyPreconditionOK) THEN
        Messenger.Error('Movements to negative direction are disabled');
        RETURN;
    END_IF
END_IF

_mcJog(Axis := _axisRef,
    JogForward := _jogForwardTask.State AND NOT _mcJog.Error,
    JogBackwards := _jogBackwardsTask.State AND NOT _mcJog.Error,
    Mode := _jogMode,
    Position := _position,
    Velocity := _velocity,
    Acceleration := _acceleration,
    Deceleration := _deceleration,
    Jerk := _jerk,
    Done =>,
    Busy =>,
    Active =>,
    CommandAborted =>,
    Error =>,
    ErrorID =>);

IF _mcJog.Done OR _mcJog.CommandAborted OR _mcJog.Error THEN
    THIS^.DriveRef._movementState.Restore();
END_IF

IF NOT _axisRef.Status.Error AND _mcJog.Error THEN
    DriveRef.SetErrorID(_mcJog.ErrorID);
END_IF]]></ST>
    </Implementation>
    <Property Name="DriveRef" Id="{a758582b-6d85-0f34-1698-3786e034ee54}">
      <Declaration><![CDATA[PROPERTY DriveRef : REFERENCE TO TcoDriveSimple]]></Declaration>
      <Get Name="Get" Id="{15f8d2d2-51fd-0bc7-3628-cc945ba13fdc}">
        <Declaration><![CDATA[VAR
    _drive : ITcoDriveSimple := 0;
END_VAR]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF __QUERYINTERFACE(THIS^._Parent, _drive) THEN
    DriveRef REF= _drive.DriveRef;
END_IF]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="FB_init" Id="{755891a0-7e03-0106-1a40-9df64547eef6}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	Parent : TcoCore.ITcoObject;
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.FB_init(bInitRetains := bInitRetains, bInCopyCode := bInCopyCode, Parent := Parent);]]></ST>
      </Implementation>
    </Method>
    <Property Name="IsService" Id="{cf1024cb-ad94-05f4-12ee-2470c3c88234}">
      <Declaration><![CDATA[PROPERTY IsService : BOOL]]></Declaration>
      <Get Name="Get" Id="{5c177e94-bddc-0ffc-016c-e570be195dcc}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_myContextCycleCount := Context.StartCycleCount;
//When component.Service() is called "before" invoking its task _serviceContexCycle is equal to Context.StartCycleCount
//When component.Service() is called "after" invoking its task (_serviceContexCycle + 1) is equal to Context.StartCycleCount
//otherwise _serviceContexCycle should be lower then Context.StartCycleCount until Context.StartCycleCount overflow its range
//which should occur cca every 585 mil years at 1ms PLC task.    
_inServiceMode := _serviceContexCycle = _myContextCycleCount OR (_serviceContexCycle + 1) = _myContextCycleCount;

IsService := _inServiceMode;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Service" Id="{871179f7-f9a6-0093-224b-0caef669a4cb}">
      <Declaration><![CDATA[METHOD PUBLIC Service ]]></Declaration>
      <Implementation>
        <ST><![CDATA[_serviceContexCycle := Context.StartCycleCount;
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>