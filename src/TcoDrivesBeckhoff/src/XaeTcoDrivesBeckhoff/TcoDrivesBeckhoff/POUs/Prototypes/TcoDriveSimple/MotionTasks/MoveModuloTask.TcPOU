<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="MoveModuloTask" Id="{97d33168-afe5-0baf-3009-2681b67c9e09}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK MoveModuloTask EXTENDS TcoCore.TcoTask IMPLEMENTS ITcoDriveSimple
VAR
    {attribute addProperty Name "<#Position#>"}
    _position : LREAL;
    {attribute addProperty Name "<#Velocity#>"}
    _velocity : LREAL;
    {attribute addProperty Name "<#Acceleration#>"}
    _acceleration : LREAL;
    {attribute addProperty Name "<#Deceleration#>"}
    _deceleration : LREAL;
    {attribute addProperty Name "<#Jerk#>"}
    _jerk : LREAL;
    {attribute addProperty Name "<#Direction#>"}
    _direction : eDirection;
END_VAR
VAR
    {attribute 'hide'}
    _axisRef : REFERENCE TO TcoAxisRef;
    {attribute 'hide'}
    _mcMoveModulo : Tc2_MC2.MC_MoveModulo;
    {attribute 'hide'}
    _mc_direction : Tc2_MC2.MC_Direction;
    {attribute 'hide'}
    _message : STRING(125);
    {attribute 'hide'}
    _dummyPreconditionOK : BOOL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT __ISVALIDREF(_axisRef) THEN
    IF __ISVALIDREF(DriveRef) THEN
        _axisRef REF= DriveRef.AxisRef;
    ELSE
        RETURN;
    END_IF
END_IF

IF Execute() THEN
    _dummyPreconditionOK := TRUE;

    IF NOT DriveRef._movementState.MovePreconditionsOk(THIS^, _dummyPreconditionOK) THEN
        Messenger.Error('To be implemented');
        RETURN;
    END_IF

    _mcMoveModulo(Axis := _axisRef,
        Execute := NOT _mcMoveModulo.Busy,
        Position := _position,
        Velocity := _velocity,
        Acceleration := _acceleration,
        Deceleration := _deceleration,
        Jerk := _jerk,
        Direction := _mc_direction,
        BufferMode := Tc2_MC2.MC_Aborting,
        Done =>,
        Busy =>,
        Active =>,
        CommandAborted =>,
        Error =>,
        ErrorID =>);

    IF _mcMoveModulo.CommandAborted THEN
        THIS^.Abort();
    END_IF

    DoneWhen(_mcMoveModulo.Done);
    ThrowWhen(_mcMoveModulo.Error);

 END_IF]]></ST>
    </Implementation>
    <Property Name="DriveRef" Id="{9f62bfdc-cf3d-0974-0415-259a7574476a}">
      <Declaration><![CDATA[PROPERTY DriveRef : REFERENCE TO TcoDriveSimple]]></Declaration>
      <Get Name="Get" Id="{63716eab-7f4c-0fc8-31cf-5a66556c1a76}">
        <Declaration><![CDATA[VAR
    _drive : ITcoDriveSimple := 0;
END_VAR]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF __QUERYINTERFACE(THIS^._Parent, _drive) THEN
    DriveRef REF= _drive.DriveRef;
END_IF]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="FB_init" Id="{ca66cc71-b5a1-021f-121c-8c2669618f1f}">
      <Declaration><![CDATA[METHOD PUBLIC FB_init : BOOL
VAR_INPUT
    bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
    bInCopyCode : BOOL; // if TRUE, the instance afterwards gets moved into the copy code (online change)
    Parent : ITcoObject;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.FB_init(bInitRetains := bInitRetains, bInCopyCode := bInCopyCode, Parent := Parent);]]></ST>
      </Implementation>
    </Method>
    <Method Name="InvokeWithParams" Id="{731e95c3-91fa-0043-348a-0a7b4be23187}">
      <Declaration><![CDATA[METHOD INTERNAL InvokeWithParams : ITcoTaskStatus
VAR_INPUT
    inPosition : LREAL;
    inVelocity : LREAL;
    inAcceleration : LREAL;
    inDeceleration : LREAL;
    inJerk : LREAL;
    inDirection : eDirection;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_position := inPosition;
_velocity := inVelocity;
_acceleration := inAcceleration;
_deceleration := inDeceleration;
_jerk := inJerk;
_direction := inDirection;
InvokeWithParams := THIS^.Invoke();]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnAbort" Id="{e3764582-a9eb-0721-300c-943562611114}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Executes when task is aborted.
		</summary>			
	</docu>	
~*)
METHOD PROTECTED OnAbort]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT __ISVALIDREF(_axisRef) THEN
    IF __ISVALIDREF(DriveRef) THEN
        _axisRef REF= DriveRef.AxisRef;
    ELSE
        RETURN;
    END_IF
END_IF

THIS^.DriveRef.Stop(-1, -1);
_mcMoveModulo(Axis := _axisRef, Execute := FALSE);
THIS^.DriveRef._movementState.Restore();]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnDone" Id="{02f1074f-d270-0406-275f-a7e121d5e4b7}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Executes when task reaches the ```Done``` state .
		</summary>			
	</docu>	
~*)
METHOD PROTECTED OnDone
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_mcMoveModulo(Axis := _axisRef, Execute := FALSE);
THIS^.DriveRef._movementState.Restore();]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnError" Id="{1162b272-9d04-02d1-121e-f32f7f955372}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Executes when task reaches the ```Error``` state.
			<para>
				Do not confuse with <see cref="TcoTask.PlcTcoTask.WhileError()"/>, that is called cyclically until '''Error''' state is left.
			</para>
		</summary>			
	</docu>	
~*)
METHOD PROTECTED OnError
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.DriveRef._movementState.Restore();
IF NOT _axisRef.Status.Error THEN
	DriveRef.SetErrorID(DriveRef._moveModuloTask._mcMoveModulo.ErrorID);
END_IF
_mcMoveModulo(Axis := _axisRef, Execute := FALSE);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnStart" Id="{ca3b5016-83e1-0994-2ff7-70a41fead783}">
      <Declaration><![CDATA[METHOD PROTECTED OnStart 
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT Tco_TO_Tc2MC2_Direction(_direction, _mc_direction) THEN
    _message := Tc2_Standard.CONCAT('Unable to cast _direction variable of type TcoDrivesBeckhoff.eDirection (', TO_STRING(_mc_direction));
    _message := Tc2_Standard.CONCAT(_message, ') to the type Tc2_MC2.MC_Direction!!!');
    THIS^.Messenger.Post(_message, TcoCore.eMessageCategory.ProgrammingError);
    ThrowWhen(TRUE);
    RETURN;
END_IF

_mcMoveModulo(Axis := _axisRef, Execute := FALSE);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Restore" Id="{e76d73f7-c997-0281-1a04-764cb6b2dce1}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Restores this instance to the Ready state. Can be called explicitly or from within one of the restore mechanisms.
			<para>
				See also <see cref="TcoTask.PlcTcoTask.AutoRestorable()"/>
			</para>
		</summary>			
	</docu>	
~*)
METHOD Restore : ITcoRestorable]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.Restore();]]></ST>
      </Implementation>
    </Method>
    <Method Name="WhileError" Id="{60d094a0-a4d7-0a68-3fc6-9de964ed28a7}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Executes until task is in ```Error``` state .
		</summary>			
	</docu>	
~*)
METHOD PROTECTED WhileError
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT _axisRef.Status.Error THEN
	DriveRef.SetErrorID(DriveRef._moveModuloTask._mcMoveModulo.ErrorID);
    _mcMoveModulo(Axis := _axisRef, Execute := FALSE);
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>