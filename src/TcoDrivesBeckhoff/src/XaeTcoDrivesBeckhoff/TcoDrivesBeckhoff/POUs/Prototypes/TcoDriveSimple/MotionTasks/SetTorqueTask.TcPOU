<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="SetTorqueTask" Id="{202acf02-6d0d-4bca-9f77-4501493a923b}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK SetTorqueTask EXTENDS TcoCore.TcoTask IMPLEMENTS ITcoDriveSimple
VAR_INPUT
    inIsServiceMode : BOOL;
END_VAR
VAR
    {attribute addProperty Name "<#Torque/Force#>"}
    _torque : LREAL;
    {attribute addProperty Name "<#Relative#>"}
    _relative : BOOL;
    {attribute addProperty Name "<#Velocity limit high#>"}
    _velocityLimitHigh : LREAL;
    {attribute addProperty Name "<#Velocity limit low#>"}
    _velocityLimitLow : LREAL;
    {attribute addProperty Name "<#Continuous update#>"}
    _continuousUpdate : BOOL := TRUE;
    {attribute addProperty Name "<#Torque ramp#>"}
    _torqueRamp : LREAL;
    {attribute addProperty Name "<#Torque Options: Enable Manual Torque Start value #>"}
    _enableManualTorqueStartValue : BOOL;
    {attribute addProperty Name "<#Torque Options:Manual Torque Start value#>"}
    _manualTorqueStartValue : LREAL;
END_VAR
VAR
    {attribute 'hide'}
    _axisRef : REFERENCE TO TcoAxisRef;
    {attribute 'hide'}
    _mcTorqueControl : Tc2_MC2.MC_TorqueControl;
    {attribute 'hide'}
    _torqueOptions : Tc2_MC2.ST_TorqueControlOptions;
    {attribute 'hide'}
    _message : STRING(125);
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT __ISVALIDREF(_axisRef) THEN
    IF __ISVALIDREF(DriveRef) THEN
        _axisRef REF= DriveRef.AxisRef;
    ELSE
        RETURN;
    END_IF
END_IF

IF Execute() THEN
    IF inIsServiceMode AND _enableManualTorqueStartValue THEN
        _torqueOptions.EnableManualTorqueStartValue := _enableManualTorqueStartValue;
        _torqueOptions.ManualTorqueStartValue := _manualTorqueStartValue;
    END_IF;

    _mcTorqueControl(Axis := _axisRef,
        Execute := NOT _mcTorqueControl.Busy,
        ContinuousUpdate := _continuousUpdate,
        Relative := _relative,
        Torque := _torque,
        TorqueRamp := _torqueRamp,
        VelocityLimitHigh := _velocityLimitHigh,
        VelocityLimitLow := _velocityLimitLow,
        BufferMode := Tc2_MC2.MC_Aborting,
        Options := _torqueOptions,
        InTorque =>,
        Busy =>,
        Active =>,
        CommandAborted =>,
        Error =>,
        ErrorId =>);

    IF _mcTorqueControl.CommandAborted THEN
        THIS^.Abort();
    END_IF

    DoneWhen(_mcTorqueControl.InTorque);
    ThrowWhen(_mcTorqueControl.Error);
END_IF]]></ST>
    </Implementation>
    <Property Name="DriveRef" Id="{3d05b5df-cf94-4ecb-a8c7-154657b19d59}">
      <Declaration><![CDATA[PROPERTY DriveRef : REFERENCE TO TcoDriveSimple]]></Declaration>
      <Get Name="Get" Id="{5be2c727-f826-4b2c-b293-d8b1aed20eb9}">
        <Declaration><![CDATA[VAR
    _drive : ITcoDriveSimple := 0;
END_VAR]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF __QUERYINTERFACE(THIS^.Parent, _drive) THEN
    DriveRef REF= _drive.DriveRef;
END_IF]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="InTorque" Id="{07615de5-82e8-0962-3b23-9a16f7555453}">
      <Declaration><![CDATA[PROPERTY PUBLIC InTorque : BOOL]]></Declaration>
      <Get Name="Get" Id="{c6d386ad-c5b5-0a81-1a00-81d8c3c290d3}">
        <Declaration><![CDATA[VAR
END_VAR]]></Declaration>
        <Implementation>
          <ST><![CDATA[InTorque := _mcTorqueControl.InTorque;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="InvokeWithParams" Id="{96f3ce16-2674-4918-9288-6d9cb1447a5e}">
      <Declaration><![CDATA[METHOD INTERNAL InvokeWithParams : ITcoTaskStatus
VAR_INPUT
    inTorque : LREAL;
    inRelative : BOOL;
    inVelocityLimitHigh : LREAL;
    inVelocityLimitLow : LREAL;
    inContinuousUpdate : BOOL := TRUE;
    inTorqueRamp : LREAL;
    inTorqueOptions : Tc2_MC2.ST_TorqueControlOptions;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_torque := inTorque;
_relative := inRelative;
_velocityLimitHigh := inVelocityLimitHigh;
_velocityLimitLow := inVelocityLimitLow;
_continuousUpdate := inContinuousUpdate;
_torqueRamp := inTorqueRamp;
_torqueOptions := inTorqueOptions;
InvokeWithParams := THIS^.Invoke();]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnAbort" Id="{7b302d13-93b1-428d-b6d4-ce1dbc732d0e}">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Executes when task is aborted.
        </summary>
    </docu>
~*)
METHOD PROTECTED OnAbort]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT __ISVALIDREF(_axisRef) THEN
    IF __ISVALIDREF(DriveRef) THEN
        _axisRef REF= DriveRef.AxisRef;
    ELSE
        RETURN;
    END_IF
END_IF

THIS^.DriveRef.Stop(-1, -1);
_mcTorqueControl(Axis := _axisRef, Execute := FALSE);
THIS^.DriveRef._movementState.Restore();]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnDone" Id="{9007e457-9563-4c42-bf13-1f19f60b8de2}">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Executes when task reaches the ```Done``` state .
        </summary>
    </docu>
~*)
METHOD PROTECTED OnDone]]></Declaration>
      <Implementation>
        <ST><![CDATA[_mcTorqueControl(Axis := _axisRef, Execute := FALSE);
THIS^.DriveRef._movementState.Restore();]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnError" Id="{4e24a163-b359-47b6-a0a7-57e7d9a45c78}">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Executes when task reaches the ```Error``` state.
            <para>
                Do not confuse with <see cref="PlcDocu.TcoCore.TcoTask.WhileError()"/>, that is called cyclically until '''Error''' state is left.
            </para>
        </summary>
    </docu>
~*)
METHOD PROTECTED OnError]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.DriveRef._movementState.Restore();

IF NOT _axisRef.Status.Error THEN
    DriveRef.SetErrorID(DriveRef._axisStatus.ErrorId);
END_IF

_mcTorqueControl(Axis := _axisRef, Execute := FALSE);]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnStart" Id="{be299f11-c5f4-4588-8158-9ce4a7891dec}">
      <Declaration><![CDATA[METHOD PROTECTED OnStart]]></Declaration>
      <Implementation>
        <ST><![CDATA[_mcTorqueControl(Axis := _axisRef, Execute := FALSE);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Restore" Id="{19576e01-4841-4d6a-b398-2b5fa2d47cbe}">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Restores this instance to the Ready state. Can be called explicitly or from within one of the restore mechanisms.
            <para>
                See also <see cref="PlcDocu.TcoCore.TcoTask.AutoRestorable()"/>
            </para>
        </summary>
    </docu>
~*)
METHOD Restore : ITcoRestorable]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.Restore();]]></ST>
      </Implementation>
    </Method>
    <Method Name="WhileError" Id="{0cbfbbef-bcc6-42db-b8c2-8a980d0b2822}">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Executes until task is in ```Error``` state .
            <para>
                Do not confuse with <see cref="PlcDocu.TcoCore.TcoTask.OnError()"/>, that is called just ones when '''Error''' state is entered.
            </para>
        </summary>
    </docu>
~*)
METHOD PROTECTED WhileError]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT _axisRef.Status.Error THEN
    DriveRef.SetErrorID(_mcTorqueControl.ErrorID);
    _mcTorqueControl(Axis := _axisRef, Execute := FALSE);
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>