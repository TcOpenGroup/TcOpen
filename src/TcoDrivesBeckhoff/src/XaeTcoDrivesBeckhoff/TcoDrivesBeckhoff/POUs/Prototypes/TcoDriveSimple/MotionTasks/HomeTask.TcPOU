<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="HomeTask" Id="{7ecafe63-8f35-0724-200c-30974ec145e2}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK HomeTask EXTENDS TcoCore.TcoTask IMPLEMENTS ITcoDriveSimple
VAR
	_position		:	LREAL;
	_homingMode		:	Tc2_MC2.MC_HomingMode;
	_homingOptions	:	Tc2_MC2.ST_HomingOptions;
	_calibrationCam	:	BOOL;
END_VAR
VAR
	_axisRef		:	REFERENCE TO TcoAxisRef;
	_mcHome         : 	Tc2_MC2.MC_Home;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT __ISVALIDREF(_axisRef) THEN
	IF __ISVALIDREF(DriveRef) THEN
		_axisRef REF=	DriveRef.AxisRef;
	ELSE
		RETURN;
	END_IF
END_IF

IF THIS^.Ready OR THIS^.Done THEN
	_mcHome(Axis := _axisRef, Execute := FALSE);
END_IF

IF THIS^.State = TcoCore.eTaskState.Requested THEN
	//In case of error, drive  is reseted first.
	IF THIS^.DriveRef._axisRef.Status.Error THEN
		THIS^.DriveRef.Reset();
		RETURN;	
	// When drive input is enabled, but MC_Power.Status has not yet reached value true, this condition postpone execution 
	//to ensure that movement is not triggered before drive is powered up. 
	ELSIF THIS^.DriveRef.inEnable AND NOT THIS^.DriveRef._mcPower.Status THEN
		RETURN;
	END_IF
END_IF

IF Execute() THEN
	_calibrationCam 		:=	DriveRef.inCalibrationCam;
	_mcHome(Axis			:=	_axisRef,
			Execute			:=	NOT _mcHome.Busy,
			Position		:=	_position, 
			HomingMode		:= 	_homingMode, 
			BufferMode		:=	Tc2_MC2.MC_Aborting, 
			Options			:=	_homingOptions, 
			bCalibrationCam	:=	_CalibrationCam, 
			Done=> , 
			Busy=> , 
			Active=> , 
			CommandAborted=> , 
			Error=> , 
			ErrorID=> );
				
	IF _mcHome.CommandAborted THEN
		THIS^.Abort();		
	END_IF
	
	DoneWhen(_mcHome.Done);					

	ThrowWhen(_mcHome.Error);
END_IF					
]]></ST>
    </Implementation>
    <Property Name="DriveRef" Id="{e8364453-3188-0da4-2572-9954580193ec}">
      <Declaration><![CDATA[PROPERTY DriveRef : REFERENCE TO TcoDriveSimple]]></Declaration>
      <Get Name="Get" Id="{c7a45ed2-8ce0-0a57-282a-4d78317bac8e}">
        <Declaration><![CDATA[VAR
	_drive : ITcoDriveSimple :=0;
END_VAR]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF __QUERYINTERFACE(THIS^._Parent, _drive) THEN
	DriveRef REF= _drive.DriveRef;
END_IF	]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="FB_init" Id="{ace7084d-0728-0a40-0885-9671c50d42bd}">
      <Declaration><![CDATA[METHOD PUBLIC FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	Parent : ITcoObject;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.FB_init(	bInitRetains	:=	bInitRetains,
				bInCopyCode		:=	bInCopyCode,	
				Parent			:=	Parent);		    
                                ]]></ST>
      </Implementation>
    </Method>
    <Method Name="InvokeWithParams" Id="{b9629926-bd6a-0cc3-14df-68dbf121997f}">
      <Declaration><![CDATA[METHOD INTERNAL InvokeWithParams : ITcoTaskStatus
VAR_INPUT
	inPosition			:	LREAL;
	inHomingMode		:	Tc2_MC2.MC_HomingMode;
	inClearPositionLag	:	BOOL;
	inSearchDirection	:	Tc2_MC2.MC_Direction;
	inSearchVelocity	:	LREAL;
	inSyncDirection		:	Tc2_MC2.MC_Direction;
	inSyncVelocity		:	LREAL;
	inReferenceMode		:	Tc2_MC2.E_EncoderReferenceMode;
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[_position		:=  inPosition;  
_homingMode		:= 	inHomingMode; 

_homingOptions.ClearPositionLag	:=	inClearPositionLag;
_homingOptions.SearchDirection	:=	inSearchDirection;
_homingOptions.SearchVelocity	:=	inSearchVelocity;
_homingOptions.SyncDirection	:=	inSyncDirection;
_homingOptions.SearchVelocity	:=	inSyncVelocity;
_homingOptions.ReferenceMode	:=	inReferenceMode;

InvokeWithParams := THIS^.Invoke();

]]></ST>
      </Implementation>
    </Method>
    <Method Name="Restore" Id="{f2b89535-f59f-07c3-0011-97ecb4188bc9}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Restores this instance to the Ready state. Can be called explicitly or from within one of the restore mechanisms.
			<para>
				See also <see cref="TcoTask.PlcTcoTask.AutoRestorable()"/>
			</para>
		</summary>			
	</docu>	
~*)
METHOD Restore : ITcoRestorable]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.Restore();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>