<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="HomeTask" Id="{7ecafe63-8f35-0724-200c-30974ec145e2}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK HomeTask EXTENDS TcoCore.TcoTask IMPLEMENTS ITcoDriveSimple
VAR
    {attribute addProperty Name "<#Position#>"}
    _position : LREAL;
    {attribute addProperty Name "<#Mode#>"}
    _homingMode : eHomingMode;
    {attribute addProperty Name "<#Clear position lag#>"}
    _homingOptions_ClearPositionLag : BOOL;
    {attribute addProperty Name "<#Search direction#>"}
    _homingOptions_SearchDirection : eDirection;
    {attribute addProperty Name "<#Search velocity#>"}
    _homingOptions_SearchVelocity : LREAL;
    {attribute addProperty Name "<#Synchronization direction#>"}
    _homingOptions_SyncDirection : eDirection;
    {attribute addProperty Name "<#Synchronization velocity#>"}
    _homingOptions_SyncVelocity : LREAL;
    {attribute addProperty Name "<#Reference mode#>"}
    _homingOptions_ReferenceMode : eEncoderReferenceMode;
END_VAR
VAR
    {attribute 'hide'}
    _calibrationCam : BOOL;
    {attribute 'hide'}
    _axisRef : REFERENCE TO TcoAxisRef;
    {attribute 'hide'}
    _mcHome : Tc2_MC2.MC_Home;
    {attribute 'hide'}
    _mc_homingMode : Tc2_MC2.MC_HomingMode;
    {attribute 'hide'}
    _mc_homingOptions_SearchDirection : Tc2_MC2.MC_Direction;
    {attribute 'hide'}
    _mc_homingOptions_SyncDirection : Tc2_MC2.MC_Direction;
    {attribute 'hide'}
    _mc_homingOptions_ReferenceMode : Tc2_MC2.E_EncoderReferenceMode;
    {attribute 'hide'}
    _mc_homingOptions : Tc2_MC2.ST_HomingOptions;
    {attribute 'hide'}
    _message : STRING(125);
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT __ISVALIDREF(_axisRef) THEN
    IF __ISVALIDREF(DriveRef) THEN
        _axisRef REF= DriveRef.AxisRef;
    ELSE
        RETURN;
    END_IF
END_IF

IF THIS^.Ready OR THIS^.Done THEN
    _mcHome(Axis := _axisRef, Execute := FALSE);
END_IF

IF THIS^.State = TcoCore.eTaskState.Requested THEN
    //In case of error, drive  is reseted first.
    IF THIS^.DriveRef._axisRef.Status.Error THEN
        THIS^.DriveRef.Reset();
        RETURN;
        // When drive input is enabled, but MC_Power.Status has not yet reached value true, this condition postpone execution 
        //to ensure that movement is not triggered before drive is powered up. 
    ELSIF THIS^.DriveRef.inEnable AND NOT THIS^.DriveRef._axisStatus.Operational THEN
        RETURN;
    END_IF
END_IF

IF Execute() THEN
    IF NOT Tco_TO_Tc2MC2_HomingMode(_homingMode, _mc_homingMode) THEN
        _message := Tc2_Standard.CONCAT('Unable to cast _homingMode variable of type TcoDrivesBeckhoff.eHomingMode (', TO_STRING(_homingMode));
        _message := Tc2_Standard.CONCAT(_message, ') to the type Tc2_MC2.MC_HomingMode!!!');
        THIS^.Messenger.Post(_message, TcoCore.eMessageCategory.ProgrammingError);
        ThrowWhen(TRUE);
        RETURN;
    END_IF

    IF NOT Tco_TO_Tc2MC2_Direction(_homingOptions_SearchDirection, _mc_homingOptions_SyncDirection) THEN
        _message := Tc2_Standard.CONCAT('Unable to cast _homingOptions_SearchDirection variable of type TcoDrivesBeckhoff.eDirection (',
            TO_STRING(_homingOptions_SearchDirection));

        _message := Tc2_Standard.CONCAT(_message, ') to the type Tc2_MC2.MC_Direction!!!');
        THIS^.Messenger.Post(_message, TcoCore.eMessageCategory.ProgrammingError);
        ThrowWhen(TRUE);
        RETURN;
    END_IF

    IF NOT Tco_TO_Tc2MC2_Direction(_homingOptions_SyncDirection, _mc_homingOptions_SyncDirection) THEN
        _message := Tc2_Standard.CONCAT('Unable to cast _homingOptions_SearchDirection variable of type TcoDrivesBeckhoff.eDirection (',
            TO_STRING(_homingOptions_SyncDirection));

        _message := Tc2_Standard.CONCAT(_message, ') to the type Tc2_MC2.MC_Direction!!!');
        THIS^.Messenger.Post(_message, TcoCore.eMessageCategory.ProgrammingError);
        ThrowWhen(TRUE);
        RETURN;
    END_IF

    IF NOT Tco_TO_Tc2MC2_EncRefMode(_homingOptions_ReferenceMode, _mc_homingOptions_ReferenceMode) THEN
        _message := Tc2_Standard.CONCAT('Unable to cast _homingOptions_ReferenceMode variable of type TcoDrivesBeckhoff.eEncoderReferenceMode (',
            TO_STRING(_homingOptions_ReferenceMode));

        _message := Tc2_Standard.CONCAT(_message, ') to the type Tc2_MC2.E_EncoderReferenceMode!!!');
        THIS^.Messenger.Post(_message, TcoCore.eMessageCategory.ProgrammingError);
        ThrowWhen(TRUE);
        RETURN;
    END_IF

    _mc_homingOptions.ClearPositionLag := _homingOptions_ClearPositionLag;
    _mc_homingOptions.SearchDirection := _homingOptions_SearchDirection;
    _mc_homingOptions.SearchVelocity := _homingOptions_SearchVelocity;
    _mc_homingOptions.SyncDirection := _homingOptions_SyncDirection;
    _mc_homingOptions.SyncVelocity := _homingOptions_SyncVelocity;
    _mc_homingOptions.ReferenceMode := _homingOptions_ReferenceMode;
    _calibrationCam := DriveRef.inCalibrationCam;

    _mcHome(Axis := _axisRef,
        Execute := NOT _mcHome.Busy,
        Position := _position,
        HomingMode := _mc_homingMode,
        BufferMode := Tc2_MC2.MC_Aborting,
        Options := _mc_homingOptions,
        bCalibrationCam := _CalibrationCam,
        Done =>,
        Busy =>,
        Active =>,
        CommandAborted =>,
        Error =>,
        ErrorID =>);

    IF _mcHome.CommandAborted THEN
        THIS^.Abort();
    END_IF

    DoneWhen(_mcHome.Done);
    ThrowWhen(_mcHome.Error);
END_IF]]></ST>
    </Implementation>
    <Property Name="DriveRef" Id="{e8364453-3188-0da4-2572-9954580193ec}">
      <Declaration><![CDATA[PROPERTY DriveRef : REFERENCE TO TcoDriveSimple]]></Declaration>
      <Get Name="Get" Id="{c7a45ed2-8ce0-0a57-282a-4d78317bac8e}">
        <Declaration><![CDATA[VAR
    _drive : ITcoDriveSimple := 0;
END_VAR]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF __QUERYINTERFACE(THIS^._Parent, _drive) THEN
    DriveRef REF= _drive.DriveRef;
END_IF]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="FB_init" Id="{ace7084d-0728-0a40-0885-9671c50d42bd}">
      <Declaration><![CDATA[METHOD PUBLIC FB_init : BOOL
VAR_INPUT
    bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
    bInCopyCode : BOOL; // if TRUE, the instance afterwards gets moved into the copy code (online change)
    Parent : ITcoObject;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.FB_init(bInitRetains := bInitRetains, bInCopyCode := bInCopyCode, Parent := Parent);]]></ST>
      </Implementation>
    </Method>
    <Method Name="InvokeWithParams" Id="{b9629926-bd6a-0cc3-14df-68dbf121997f}">
      <Declaration><![CDATA[METHOD INTERNAL InvokeWithParams : ITcoTaskStatus
VAR_INPUT
    inPosition : LREAL;
    inHomingMode : eHomingMode;
    inClearPositionLag : BOOL;
    inSearchDirection : eDirection;
    inSearchVelocity : LREAL;
    inSyncDirection : eDirection;
    inSyncVelocity : LREAL;
    inReferenceMode : eEncoderReferenceMode;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_position := inPosition;
_homingMode := inHomingMode;
_homingOptions_ClearPositionLag := inClearPositionLag;
_homingOptions_SearchDirection := inSearchDirection;
_homingOptions_SearchVelocity := inSearchVelocity;
_homingOptions_SyncDirection := inSyncDirection;
_homingOptions_SyncVelocity := inSyncVelocity;
_homingOptions_ReferenceMode := inReferenceMode;
InvokeWithParams := THIS^.Invoke();]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnAbort" Id="{9ee2033f-4162-05e9-21d9-a85d0b910c5c}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Executes when task is aborted.
		</summary>			
	</docu>	
~*)
METHOD PROTECTED OnAbort]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT __ISVALIDREF(_axisRef) THEN
    IF __ISVALIDREF(DriveRef) THEN
        _axisRef REF= DriveRef.AxisRef;
    ELSE
        RETURN;
    END_IF
END_IF

THIS^.DriveRef.Stop(-1, -1);]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnTaskError" Id="{79cc0927-fae8-0574-05cf-4d461dfcefc6}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Executes until task is in ```Error``` state .
		</summary>			
	</docu>	
~*)
METHOD PROTECTED OnTaskError
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT _axisRef.Status.Error THEN
	DriveRef.SetErrorID(DriveRef._homeTask._mcHome.ErrorID);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Restore" Id="{f2b89535-f59f-07c3-0011-97ecb4188bc9}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Restores this instance to the Ready state. Can be called explicitly or from within one of the restore mechanisms.
			<para>
				See also <see cref="TcoTask.PlcTcoTask.AutoRestorable()"/>
			</para>
		</summary>			
	</docu>	
~*)
METHOD Restore : ITcoRestorable]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.Restore();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>