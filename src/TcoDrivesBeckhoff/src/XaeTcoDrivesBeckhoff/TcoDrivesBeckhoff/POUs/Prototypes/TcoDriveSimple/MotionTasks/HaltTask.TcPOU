<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="HaltTask" Id="{7b2095f5-1f56-0a11-251d-e8dd47e39c60}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK HaltTask EXTENDS TcoCore.TcoTask IMPLEMENTS ITcoDriveSimple
VAR
    {attribute addProperty Name "<#Deceleration#>"}
    _deceleration : LREAL;
    {attribute addProperty Name "<#Jerk#>"}
    _jerk : LREAL;
END_VAR
VAR
    {attribute 'hide'}
    _axisRef : REFERENCE TO TcoAxisRef;
    {attribute 'hide'}
    _mcHalt : Tc2_MC2.MC_Halt;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT __ISVALIDREF(_axisRef) THEN
    IF __ISVALIDREF(DriveRef) THEN
        _axisRef REF= DriveRef.AxisRef;
    ELSE
        RETURN;
    END_IF
END_IF

IF THIS^.Ready OR THIS^.Done THEN
    _mcHalt(Axis := _axisRef, Execute := FALSE);
END_IF

IF THIS^.State = TcoCore.eTaskState.Requested THEN
    //In case of error, drive  is reseted first.
    IF THIS^.DriveRef._axisRef.Status.Error THEN
        THIS^.DriveRef.Reset();
        RETURN;
        // When drive input is enabled, but MC_Power.Status has not yet reached value true, this condition postpone execution 
        //to ensure that movement is not triggered before drive is powered up. 
    ELSIF THIS^.DriveRef.inEnable AND NOT THIS^.DriveRef._axisStatus.Operational THEN
        RETURN;
    END_IF
END_IF

IF Execute() THEN
    _mcHalt(Axis := _axisRef,
        Execute := NOT _mcHalt.Busy,
        Deceleration := _deceleration,
        Jerk := _jerk,
        Done =>,
        Busy =>,
        Active =>,
        CommandAborted =>,
        Error =>,
        ErrorID =>);

    IF _mcHalt.CommandAborted THEN
        THIS^.Abort();
    END_IF

    DoneWhen(_mcHalt.Done);
    ThrowWhen(_mcHalt.Error);
END_IF]]></ST>
    </Implementation>
    <Property Name="DriveRef" Id="{05a8f2c1-5c4a-032e-391c-6015609bba63}">
      <Declaration><![CDATA[PROPERTY DriveRef : REFERENCE TO TcoDriveSimple]]></Declaration>
      <Get Name="Get" Id="{c577432b-6bf0-02c1-2d8c-999bc8637657}">
        <Declaration><![CDATA[VAR
    _drive : ITcoDriveSimple := 0;
END_VAR]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF __QUERYINTERFACE(THIS^._Parent, _drive) THEN
    DriveRef REF= _drive.DriveRef;
END_IF]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="FB_init" Id="{d2ee9d25-2557-0248-1e0b-2092fdeb9e20}">
      <Declaration><![CDATA[METHOD PUBLIC FB_init : BOOL
VAR_INPUT
    bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
    bInCopyCode : BOOL; // if TRUE, the instance afterwards gets moved into the copy code (online change)
    Parent : ITcoObject;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.FB_init(bInitRetains := bInitRetains, bInCopyCode := bInCopyCode, Parent := Parent);]]></ST>
      </Implementation>
    </Method>
    <Method Name="InvokeWithParams" Id="{e0f5b9d1-b2ab-028e-0981-014cb0964a83}">
      <Declaration><![CDATA[METHOD INTERNAL InvokeWithParams : ITcoTaskStatus
VAR_INPUT
    inDeceleration : LREAL;
    inJerk : LREAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_deceleration := inDeceleration;
_jerk := inJerk;
InvokeWithParams := THIS^.Invoke();]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnTaskError" Id="{18785d6e-b3bd-04ec-1a40-8d17a3911928}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Executes until task is in ```Error``` state .
		</summary>			
	</docu>	
~*)
METHOD PROTECTED OnTaskError
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT _axisRef.Status.Error THEN
	DriveRef.SetErrorID(DriveRef._haltTask._mcHalt.ErrorID);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Restore" Id="{5b189d9a-d345-0f25-1831-45a12b9aee90}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Restores this instance to the Ready state. Can be called explicitly or from within one of the restore mechanisms.
			<para>
				See also <see cref="TcoTask.PlcTcoTask.AutoRestorable()"/>
			</para>
		</summary>			
	</docu>	
~*)
METHOD Restore : ITcoRestorable]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.Restore();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>