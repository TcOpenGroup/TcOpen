<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="MoveVelocityTask" Id="{21f51042-7e1b-0b36-15a2-b7971f2b743b}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK MoveVelocityTask EXTENDS TcoCore.TcoTask IMPLEMENTS ITcoDriveSimple
VAR
    {attribute addProperty Name "<#Velocity#>"}
    _velocity : LREAL;
    {attribute addProperty Name "<#Acceleration#>"}
    _acceleration : LREAL;
    {attribute addProperty Name "<#Deceleration#>"}
    _deceleration : LREAL;
    {attribute addProperty Name "<#Jerk#>"}
    _jerk : LREAL;
    {attribute addProperty Name "<#Direction#>"}
    _direction : eDirection;
END_VAR
VAR
    {attribute 'hide'}
    _axisRef : REFERENCE TO TcoAxisRef;
    {attribute 'hide'}
    _mcMoveVelocity : Tc2_MC2.MC_MoveVelocity;
    {attribute 'hide'}
    _mc_direction : Tc2_MC2.MC_Direction;
    {attribute 'hide'}
    _message : STRING(125);
    {attribute 'hide'}
    _dummyPreconditionOK : BOOL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT __ISVALIDREF(_axisRef) THEN
    IF __ISVALIDREF(DriveRef) THEN
        _axisRef REF= DriveRef.AxisRef;
    ELSE
        RETURN;
    END_IF
END_IF

IF Execute() THEN
    _dummyPreconditionOK := TRUE;

    IF NOT DriveRef._movementState.MovePreconditionsOk(THIS^, _dummyPreconditionOK) THEN
        Messenger.Error('To be implemented');
        RETURN;
    END_IF

    _mcMoveVelocity(Axis := _axisRef,
        Execute := NOT _mcMoveVelocity.Busy,
        Velocity := _velocity,
        Acceleration := _acceleration,
        Deceleration := _deceleration,
        Jerk := _jerk,
        Direction := _mc_direction,
        BufferMode := Tc2_MC2.MC_Aborting,
        InVelocity =>,
        Busy =>,
        Active =>,
        CommandAborted =>,
        Error =>,
        ErrorID =>);

    IF _mcMoveVelocity.CommandAborted THEN
        THIS^.Abort();
    END_IF

    DoneWhen(_mcMoveVelocity.InVelocity);
    ThrowWhen(_mcMoveVelocity.Error);
END_IF]]></ST>
    </Implementation>
    <Property Name="DriveRef" Id="{6acb42d1-2ebd-0307-25cc-94ab5f3ec6d4}">
      <Declaration><![CDATA[PROPERTY DriveRef : REFERENCE TO TcoDriveSimple]]></Declaration>
      <Get Name="Get" Id="{56c44a64-6727-0b1b-3cb7-410eb24a025e}">
        <Declaration><![CDATA[VAR
    _drive : ITcoDriveSimple := 0;
END_VAR]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF __QUERYINTERFACE(THIS^._Parent, _drive) THEN
    DriveRef REF= _drive.DriveRef;
END_IF]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="FB_init" Id="{26d32b0c-be91-0cb4-1d12-934623dce2f9}">
      <Declaration><![CDATA[METHOD PUBLIC FB_init : BOOL
VAR_INPUT
    bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
    bInCopyCode : BOOL; // if TRUE, the instance afterwards gets moved into the copy code (online change)
    Parent : ITcoObject;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.FB_init(bInitRetains := bInitRetains, bInCopyCode := bInCopyCode, Parent := Parent);]]></ST>
      </Implementation>
    </Method>
    <Method Name="InvokeWithParams" Id="{a12cf93b-f374-0fd0-3a32-7a0f0ba29d34}">
      <Declaration><![CDATA[METHOD INTERNAL InvokeWithParams : ITcoTaskStatus
VAR_INPUT
    inVelocity : LREAL;
    inAcceleration : LREAL;
    inDeceleration : LREAL;
    inJerk : LREAL;
    inDirection : eDirection;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_velocity := inVelocity;
_acceleration := inAcceleration;
_deceleration := inDeceleration;
_jerk := inJerk;
_direction := inDirection;
InvokeWithParams := THIS^.Invoke();]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnAbort" Id="{babcd355-abf7-08fc-2366-1e66c4d13ea1}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Executes when task is aborted.
		</summary>			
	</docu>	
~*)
METHOD PROTECTED OnAbort]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT __ISVALIDREF(_axisRef) THEN
    IF __ISVALIDREF(DriveRef) THEN
        _axisRef REF= DriveRef.AxisRef;
    ELSE
        RETURN;
    END_IF
END_IF

THIS^.DriveRef.Stop(-1, -1);
THIS^.DriveRef._movementState.Restore();
_mcMoveVelocity(Axis := _axisRef, Execute := FALSE);]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnDone" Id="{96770dc1-d77b-0d06-28ec-6e3167e9e773}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Executes when task reaches the ```Done``` state .
		</summary>			
	</docu>	
~*)
METHOD PROTECTED OnDone
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.DriveRef._movementState.Restore();
_mcMoveVelocity(Axis := _axisRef, Execute := FALSE);]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnError" Id="{abb00f67-21f9-053d-09c1-019d906bb7e8}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Executes when task reaches the ```Error``` state.
			<para>
				Do not confuse with <see cref="TcoTask.PlcTcoTask.WhileError()"/>, that is called cyclically until '''Error''' state is left.
			</para>
		</summary>			
	</docu>	
~*)
METHOD PROTECTED OnError
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.DriveRef._movementState.Restore();

IF NOT _axisRef.Status.Error THEN
	DriveRef.SetErrorID(DriveRef._moveVelocityTask._mcMoveVelocity.ErrorID);
END_IF
_mcMoveVelocity(Axis := _axisRef, Execute := FALSE);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnStart" Id="{d386c88e-21df-09a6-2cd8-6c624c70bb2d}">
      <Declaration><![CDATA[METHOD PROTECTED OnStart 
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT Tco_TO_Tc2MC2_Direction(_direction, _mc_direction) THEN
    _message := Tc2_Standard.CONCAT('Unable to cast _direction variable of type TcoDrivesBeckhoff.eDirection (', TO_STRING(_direction));
    _message := Tc2_Standard.CONCAT(_message, ') to the type Tc2_MC2.MC_Direction!!!');
    THIS^.Messenger.Post(_message, TcoCore.eMessageCategory.ProgrammingError);
    ThrowWhen(TRUE);
    RETURN;
END_IF

_mcMoveVelocity(Axis := _axisRef, Execute := FALSE);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Restore" Id="{34542aed-2dff-0b9c-33f6-8b4f3f7d756a}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Restores this instance to the Ready state. Can be called explicitly or from within one of the restore mechanisms.
			<para>
				See also <see cref="TcoTask.PlcTcoTask.AutoRestorable()"/>
			</para>
		</summary>			
	</docu>	
~*)
METHOD Restore : ITcoRestorable]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.Restore();]]></ST>
      </Implementation>
    </Method>
    <Method Name="WhileError" Id="{e57cb2e4-6de2-08f9-3560-1da4dc675da8}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Executes until task is in ```Error``` state .
		</summary>			
	</docu>	
~*)
METHOD PROTECTED WhileError
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT _axisRef.Status.Error THEN
	DriveRef.SetErrorID(DriveRef._moveVelocityTask._mcMoveVelocity.ErrorID);
    _mcMoveVelocity(Axis := _axisRef, Execute := FALSE);
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>