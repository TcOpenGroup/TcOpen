<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="StopTask" Id="{74d9043e-4117-01d9-3a62-1eb57ed666eb}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK StopTask EXTENDS TcoCore.TcoTask IMPLEMENTS ITcoDriveSimple
VAR
    {attribute addProperty Name "<#Deceleration#>"}
    _deceleration : LREAL;
    {attribute addProperty Name "<#Jerk#>"}
    _jerk : LREAL;
END_VAR
VAR
    {attribute 'hide'}
    _axisRef : REFERENCE TO TcoAxisRef;
    {attribute 'hide'}
    _mcStop : Tc2_MC2.MC_Stop;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT __ISVALIDREF(_axisRef) THEN
    IF __ISVALIDREF(DriveRef) THEN
        _axisRef REF= DriveRef.AxisRef;
    ELSE
        RETURN;
    END_IF
END_IF

_mcStop(Axis := _axisRef, Execute := FALSE);

IF Execute() THEN
    _mcStop(Axis := _axisRef,
        Execute := NOT _mcStop.Busy,
        Deceleration := _deceleration,
        Jerk := _jerk,
        Done =>,
        Busy =>,
        Active =>,
        CommandAborted =>,
        Error =>,
        ErrorID =>);

    IF _mcStop.CommandAborted THEN
        THIS^.Abort();
    END_IF

    DoneWhen(_mcStop.Done);
    ThrowWhen(_mcStop.Error);
END_IF]]></ST>
    </Implementation>
    <Property Name="DriveRef" Id="{9b09ccb4-872f-0610-145e-0f12d134830d}">
      <Declaration><![CDATA[PROPERTY DriveRef : REFERENCE TO TcoDriveSimple]]></Declaration>
      <Get Name="Get" Id="{7837dcdc-9ef2-02df-3ea8-2c4ce8461cd5}">
        <Declaration><![CDATA[VAR
    _drive : ITcoDriveSimple := 0;
END_VAR]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF __QUERYINTERFACE(THIS^._Parent, _drive) THEN
    DriveRef REF= _drive.DriveRef;
END_IF]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="FB_init" Id="{602d6098-db54-0ea0-0640-8cf967f0aeae}">
      <Declaration><![CDATA[METHOD PUBLIC FB_init : BOOL
VAR_INPUT
    bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
    bInCopyCode : BOOL; // if TRUE, the instance afterwards gets moved into the copy code (online change)
    Parent : ITcoObject;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.FB_init(	bInitRetains	:=	bInitRetains,
				bInCopyCode		:=	bInCopyCode,	
				Parent			:=	Parent);		    
                                ]]></ST>
      </Implementation>
    </Method>
    <Method Name="InvokeWithParams" Id="{c0055189-f8d8-0731-3212-5e2c8124424f}">
      <Declaration><![CDATA[METHOD INTERNAL InvokeWithParams : ITcoTaskStatus
VAR_INPUT
    inDeceleration : LREAL;
    inJerk : LREAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_deceleration := inDeceleration;
_jerk := inJerk;
InvokeWithParams := THIS^.Invoke();]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnAbort" Id="{d0a3dc6b-4c8e-0987-3c36-af549dd26d91}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Executes when task is aborted.
		</summary>			
	</docu>	
~*)
METHOD PROTECTED OnAbort
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.DriveRef._movementState.Restore();
_mcStop(Axis := _axisRef, Execute := FALSE);]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnDone" Id="{c874e640-3d05-0ded-2097-a893b01f1d3e}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Executes when task reaches the ```Done``` state .
		</summary>			
	</docu>	
~*)
METHOD PROTECTED OnDone
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.DriveRef._movementState.Restore();
_mcStop(Axis := _axisRef, Execute := FALSE);]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnError" Id="{87de4dba-aa3a-0989-326a-6ca96ac7d7da}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Executes when task reaches the ```Error``` state.
			<para>
				Do not confuse with <see cref="TcoTask.PlcTcoTask.WhileError()"/>, that is called cyclically until '''Error''' state is left.
			</para>
		</summary>			
	</docu>	
~*)
METHOD PROTECTED OnError
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.DriveRef._movementState.Restore();

IF NOT _axisRef.Status.Error THEN
	DriveRef.SetErrorID(DriveRef._stopTask._mcStop.ErrorID);
END_IF

_mcStop(Axis := _axisRef, Execute := FALSE);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnStart" Id="{4d323d3b-ad15-0e24-365a-5a28c20ce63e}">
      <Declaration><![CDATA[METHOD PROTECTED OnStart 
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_mcStop(Axis := _axisRef, Execute := FALSE);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Restore" Id="{60f9bd15-fddc-0be4-0113-68a2b17125e1}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Restores this instance to the Ready state. Can be called explicitly or from within one of the restore mechanisms.
			<para>
				See also <see cref="TcoTask.PlcTcoTask.AutoRestorable()"/>
			</para>
		</summary>			
	</docu>	
~*)
METHOD Restore : ITcoRestorable]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.Restore();]]></ST>
      </Implementation>
    </Method>
    <Method Name="WhileError" Id="{1652617e-0e81-0ba5-3d31-1306f4740188}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Executes until task is in ```Error``` state .
		</summary>			
	</docu>	
~*)
METHOD PROTECTED WhileError
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT _axisRef.Status.Error THEN
	DriveRef.SetErrorID(DriveRef._stopTask._mcStop.ErrorID);
    _mcStop(Axis := _axisRef, Execute := FALSE);
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>