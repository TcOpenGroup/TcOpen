<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="TcoMultiAxisContext" Id="{a48ac94a-d861-0e81-141c-35d6781e3e9b}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK TcoMultiAxisContext EXTENDS TcoCore._internals_TcoContext
VAR
    _sut : TcoMultiAxisTest(THIS^);
    _callMyPlcInstance : BOOL := FALSE;
    _enable : BOOL;
    _enablePositive : BOOL;
    _enableNegative : BOOL;
    _calibrationCam : BOOL;
    _positionAxis1 : LREAL;
	_positionAxis2 : LREAL;
	_positionAxis3 : LREAL;
	_positionAxis4 : LREAL;
    _velocity : LREAL;
    _acceleration : LREAL;
    _deceleration : LREAL;
    _jerk : LREAL;	
    _inString : STRING;
    _done : BOOL;
    _arranged : BOOL;

	_axis1Disabled:BOOL;
	_axis2Disabled:BOOL;
	_axis3Disabled:BOOL;
	_axis4Disabled:BOOL;
	
	_axisReferenceType : INT;

	_positions: SomeTestMultiPositions(THIS^);
	_moveParam: TcoMultiAxisMoveParam;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="Main" Id="{4426e68f-97d6-0724-3e3f-272f3100a678}">
      <Declaration><![CDATA[METHOD PROTECTED Main
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_sut.Config.ErrorTime:=T#1000MS;
_sut.Config.InfoTime:=T#1000MS;
_sut.Config.Axis1Disabled:=_axis1Disabled;
_sut.Config.Axis2Disabled:=_axis2Disabled;
_sut.Config.Axis3Disabled:=_axis3Disabled;
_sut.Config.Axis4Disabled:=_axis4Disabled;


_sut(inEnableAxis1 := _enable,
    inEnablePositiveAxis1  := _enablePositive,
    inEnableNegativeAxis1  := _enableNegative,
    inCalibrationCamAxis1  := _calibrationCam,
    refAxis1 := GVL.Axis1,
	inEnableAxis2 := _enable,
	inEnablePositiveAxis2  := _enablePositive,
    inEnableNegativeAxis2  := _enableNegative,
    inCalibrationCamAxis2  := _calibrationCam,
    refAxis2 := GVL.Axis2,
	inEnableAxis3 := _enable,
	inEnablePositiveAxis3  := _enablePositive,
    inEnableNegativeAxis3  := _enableNegative,
    inCalibrationCamAxis3  := _calibrationCam,
    refAxis3 := GVL.Axis3,
	inEnableAxis4 := _enable,
	inEnablePositiveAxis4  := _enablePositive,
    inEnableNegativeAxis4  := _enableNegative,
    inCalibrationCamAxis4  := _calibrationCam,
    refAxis4 := GVL.Axis4,
	inoPositions:=_positions);

CASE _testId OF
    eTcoMultiAxisTests.Restore:
		_axis1Disabled :=false;
		_axis2Disabled :=FALSE;
		_axis3Disabled :=FALSE;
		_axis4Disabled :=FALSE;
        _sut.Restore();
    eTcoMultiAxisTests.CleanUp:
        _sut._messenger.Clear();
		_sut.ResetDrivesTask.Restore();
		_sut.SoeResetDrivesTask.Restore();
		_sut.MoveAbsoluteTask.Restore();

    {region "T003_Message"}
    eTcoMultiAxisTests.Message:
        _sut.Messenger.Error(_inString);
        _done := _plcCycleCounter > 1;
        ProbeDoneWhen(_done);
    {endregion}
    {region "T004_PowerDisable"}
    eTcoMultiAxisTests.PowerDisable:
        _enable := FALSE;
        _done := _sut.Axis_1._axisStatus.Disabled 
				AND _sut.Axis_2._axisStatus.Disabled
				AND _sut.Axis_3._axisStatus.Disabled
				AND _sut.Axis_4._axisStatus.Disabled;

        ProbeDoneWhen(_done);
    {endregion}
    {region "T005_PowerEnable"}
    eTcoMultiAxisTests.PowerEnable:
        _enable := TRUE;
         _done := _sut.Axis_1._axisStatus.StandStill 
				AND _sut.Axis_2._axisStatus.StandStill
				AND _sut.Axis_3._axisStatus.StandStill
				AND _sut.Axis_4._axisStatus.StandStill;
        ProbeDoneWhen(_done);
    {endregion}
    {region "T006_Reset"}
    eTcoMultiAxisTests.Reset:
        IF NOT _arranged THEN		
            _sut.Axis_1.MoveRelative(inDistance := 500,
                inVelocity := 50000000,
                inAcceleration := -1,
                inDeceleration := -1,
                inJerk := -1);
			_sut.Axis_2.MoveRelative(inDistance := 500,
                inVelocity := 50000000,
                inAcceleration := -1,
                inDeceleration := -1,
                inJerk := -1);
			_sut.Axis_3.MoveRelative(inDistance := 500,
                inVelocity := 50000000,
                inAcceleration := -1,
                inDeceleration := -1,
                inJerk := -1);
			_sut.Axis_4.MoveRelative(inDistance := 500,
                inVelocity := 50000000,
                inAcceleration := -1,
                inDeceleration := -1,
                inJerk := -1);

            IF _sut.Axis_1._axisStatus.Error 
				OR _sut.Axis_2._axisStatus.Error
				OR _sut.Axis_3._axisStatus.Error
				OR _sut.Axis_4._axisStatus.Error THEN
                _arranged := TRUE;
            END_IF

            RETURN;
        END_IF
		
        _sut.ResetDrives();
        _done :=  _sut.ResetDrivesTask.Done;
        ProbeDoneWhen(_done);
  
    {endregion}
    {region "T011_HommingDirect"}
    eTcoMultiAxisTests.HommingDirect:
        IF NOT _arranged THEN
            _enable := TRUE;
            _enablePositive := TRUE;
            _enableNegative := TRUE;

            IF _sut.Axis_1._axisStatus.Operational 
			 AND _sut.Axis_2._axisStatus.Operational 
			 AND _sut.Axis_3._axisStatus.Operational 
			 AND _sut.Axis_4._axisStatus.Operational THEN
		
                _arranged := TRUE;
            END_IF

            RETURN;
        END_IF;

        _sut.Axis_1.Home(inPosition := _positionAxis1,
            inHomingMode := TcoDrivesBeckhoff.eHomingMode.MC_Direct,
            inClearPositionLag := FALSE,
            inSearchDirection := TcoDrivesBeckhoff.eDirection.MC_Undefined_Direction,
            inSearchVelocity := _velocity,
            inSyncDirection := TcoDrivesBeckhoff.eDirection.MC_Undefined_Direction,
            inSyncVelocity := _velocity,
            inReferenceMode := TcoDrivesBeckhoff.eEncoderReferenceMode.ENCODERREFERENCEMODE_DEFAULT);
				 
		 _sut.Axis_2.Home(inPosition := _positionAxis2,
            inHomingMode := TcoDrivesBeckhoff.eHomingMode.MC_Direct,
            inClearPositionLag := FALSE,
            inSearchDirection := TcoDrivesBeckhoff.eDirection.MC_Undefined_Direction,
            inSearchVelocity := _velocity,
            inSyncDirection := TcoDrivesBeckhoff.eDirection.MC_Undefined_Direction,
            inSyncVelocity := _velocity,
            inReferenceMode := TcoDrivesBeckhoff.eEncoderReferenceMode.ENCODERREFERENCEMODE_DEFAULT);
				 
		 _sut.Axis_3.Home(inPosition := _positionAxis3,
            inHomingMode := TcoDrivesBeckhoff.eHomingMode.MC_Direct,
            inClearPositionLag := FALSE,
            inSearchDirection := TcoDrivesBeckhoff.eDirection.MC_Undefined_Direction,
            inSearchVelocity := _velocity,
            inSyncDirection := TcoDrivesBeckhoff.eDirection.MC_Undefined_Direction,
            inSyncVelocity := _velocity,
            inReferenceMode := TcoDrivesBeckhoff.eEncoderReferenceMode.ENCODERREFERENCEMODE_DEFAULT);
		
		_sut.Axis_4.Home(inPosition := _positionAxis4,
            inHomingMode := TcoDrivesBeckhoff.eHomingMode.MC_Direct,
            inClearPositionLag := FALSE,
            inSearchDirection := TcoDrivesBeckhoff.eDirection.MC_Undefined_Direction,
            inSearchVelocity := _velocity,
            inSyncDirection := TcoDrivesBeckhoff.eDirection.MC_Undefined_Direction,
            inSyncVelocity := _velocity,
            inReferenceMode := TcoDrivesBeckhoff.eEncoderReferenceMode.ENCODERREFERENCEMODE_DEFAULT);

        _done := (_sut.Axis_1.HomeTask.Done OR _sut.Axis_1.HomeTask.Error)
			 AND (_sut.Axis_2.HomeTask.Done OR _sut.Axis_2.HomeTask.Error)
			 AND (_sut.Axis_3.HomeTask.Done OR _sut.Axis_3.HomeTask.Error)
			 AND (_sut.Axis_4.HomeTask.Done OR _sut.Axis_4.HomeTask.Error);
        ProbeDoneWhen(_done);
    
    {endregion}
    {region "T017_MoveAbsoluteDisabled"}
    eTcoMultiAxisTests.MoveAbsoluteDisabled:
        IF NOT _arranged THEN
            _enable := FALSE;
            _enablePositive := FALSE;
            _enableNegative := FALSE;
            _arranged := TRUE;
            RETURN;
        END_IF;

        _sut.Axis_1.MoveAbsolute(inPosition := _positionAxis1,
            inVelocity := _velocity,
            inAcceleration := _acceleration,
            inDeceleration := _deceleration,
            inJerk := _jerk);
				 
		 _sut.Axis_2.MoveAbsolute(inPosition := _positionAxis2,
            inVelocity := _velocity,
            inAcceleration := _acceleration,
            inDeceleration := _deceleration,
            inJerk := _jerk);
				 
		 _sut.Axis_3.MoveAbsolute(inPosition := _positionAxis3,
            inVelocity := _velocity,
            inAcceleration := _acceleration,
            inDeceleration := _deceleration,
            inJerk := _jerk);
				 
					  
		 _sut.Axis_4.MoveAbsolute(inPosition := _positionAxis4,
            inVelocity := _velocity,
            inAcceleration := _acceleration,
            inDeceleration := _deceleration,
            inJerk := _jerk);

        _done := (_sut.Axis_1.MoveAbsoluteTask.Done OR _sut.Axis_1.MoveAbsoluteTask.Error OR _plcCycleCounter > 10)
				AND (_sut.Axis_2.MoveAbsoluteTask.Done OR _sut.Axis_2.MoveAbsoluteTask.Error OR _plcCycleCounter > 10)
				AND (_sut.Axis_3.MoveAbsoluteTask.Done OR _sut.Axis_3.MoveAbsoluteTask.Error OR _plcCycleCounter > 10)
				AND (_sut.Axis_4.MoveAbsoluteTask.Done OR _sut.Axis_4.MoveAbsoluteTask.Error OR _plcCycleCounter > 10);
        ProbeDoneWhen(_done);
	{endregion}
    {region "T018_MoveAbsoluteDisabledPositiveDirection"}
    eTcoMultiAxisTests.MoveAbsoluteDisabledPositiveDirection:
        IF NOT _arranged THEN
            _enable := TRUE;
            _enablePositive := FALSE;
            _enableNegative := TRUE;
            _arranged := TRUE;
            RETURN;
        END_IF;

      	_sut.Axis_1.MoveAbsolute(inPosition := _positionAxis1,
            inVelocity := _velocity,
            inAcceleration := _acceleration,
            inDeceleration := _deceleration,
            inJerk := _jerk);
				 
		 _sut.Axis_2.MoveAbsolute(inPosition := _positionAxis2,
            inVelocity := _velocity,
            inAcceleration := _acceleration,
            inDeceleration := _deceleration,
            inJerk := _jerk);
				 
		 _sut.Axis_3.MoveAbsolute(inPosition := _positionAxis3,
            inVelocity := _velocity,
            inAcceleration := _acceleration,
            inDeceleration := _deceleration,
            inJerk := _jerk);
				 
					  
		 _sut.Axis_4.MoveAbsolute(inPosition := _positionAxis4,
            inVelocity := _velocity,
            inAcceleration := _acceleration,
            inDeceleration := _deceleration,
            inJerk := _jerk);

        _done := (_sut.Axis_1.MoveAbsoluteTask.Done OR _sut.Axis_1.MoveAbsoluteTask.Error)
				AND (_sut.Axis_2.MoveAbsoluteTask.Done OR _sut.Axis_2.MoveAbsoluteTask.Error )
				AND (_sut.Axis_3.MoveAbsoluteTask.Done OR _sut.Axis_3.MoveAbsoluteTask.Error )
				AND (_sut.Axis_4.MoveAbsoluteTask.Done OR _sut.Axis_4.MoveAbsoluteTask.Error );
        ProbeDoneWhen(_done);
	{endregion}
    {region "T019_MoveAbsoluteEnabledPositiveDirection"}
    eTcoMultiAxisTests.MoveAbsoluteEnabledPositiveDirection:
        IF NOT _arranged THEN
            _enable := TRUE;
            _enablePositive := TRUE;
            _enableNegative := FALSE;
            _arranged := TRUE;
            RETURN;
        END_IF;

         _sut.Axis_1.MoveAbsolute(inPosition := _positionAxis1,
            inVelocity := _velocity,
            inAcceleration := _acceleration,
            inDeceleration := _deceleration,
            inJerk := _jerk);
				 
		 _sut.Axis_2.MoveAbsolute(inPosition := _positionAxis2,
            inVelocity := _velocity,
            inAcceleration := _acceleration,
            inDeceleration := _deceleration,
            inJerk := _jerk);
				 
		 _sut.Axis_3.MoveAbsolute(inPosition := _positionAxis3,
            inVelocity := _velocity,
            inAcceleration := _acceleration,
            inDeceleration := _deceleration,
            inJerk := _jerk);
				 
					  
		 _sut.Axis_4.MoveAbsolute(inPosition := _positionAxis4,
            inVelocity := _velocity,
            inAcceleration := _acceleration,
            inDeceleration := _deceleration,
            inJerk := _jerk);

        _done := (_sut.Axis_1.MoveAbsoluteTask.Done OR _sut.Axis_1.MoveAbsoluteTask.Error)
				AND (_sut.Axis_2.MoveAbsoluteTask.Done OR _sut.Axis_2.MoveAbsoluteTask.Error )
				AND (_sut.Axis_3.MoveAbsoluteTask.Done OR _sut.Axis_3.MoveAbsoluteTask.Error )
				AND (_sut.Axis_4.MoveAbsoluteTask.Done OR _sut.Axis_4.MoveAbsoluteTask.Error );
        
        ProbeDoneWhen(_done);
	{endregion}
    {region "T020_MoveAbsoluteDisabledNegativeDirection"}
    eTcoMultiAxisTests.MoveAbsoluteDisabledNegativeDirection:
        IF NOT _arranged THEN
            _enable := TRUE;
            _enablePositive := FALSE;
            _enableNegative := FALSE;
            _arranged := TRUE;
            RETURN;
        END_IF;

         _sut.Axis_1.MoveAbsolute(inPosition := _positionAxis1,
            inVelocity := _velocity,
            inAcceleration := _acceleration,
            inDeceleration := _deceleration,
            inJerk := _jerk);
				 
		 _sut.Axis_2.MoveAbsolute(inPosition := _positionAxis2,
            inVelocity := _velocity,
            inAcceleration := _acceleration,
            inDeceleration := _deceleration,
            inJerk := _jerk);
				 
		 _sut.Axis_3.MoveAbsolute(inPosition := _positionAxis3,
            inVelocity := _velocity,
            inAcceleration := _acceleration,
            inDeceleration := _deceleration,
            inJerk := _jerk);
				 
					  
		 _sut.Axis_4.MoveAbsolute(inPosition := _positionAxis4,
            inVelocity := _velocity,
            inAcceleration := _acceleration,
            inDeceleration := _deceleration,
            inJerk := _jerk);

        _done := (_sut.Axis_1.MoveAbsoluteTask.Done OR _sut.Axis_1.MoveAbsoluteTask.Error)
				AND (_sut.Axis_2.MoveAbsoluteTask.Done OR _sut.Axis_2.MoveAbsoluteTask.Error )
				AND (_sut.Axis_3.MoveAbsoluteTask.Done OR _sut.Axis_3.MoveAbsoluteTask.Error )
				AND (_sut.Axis_4.MoveAbsoluteTask.Done OR _sut.Axis_4.MoveAbsoluteTask.Error );
        ProbeDoneWhen(_done);

	{endregion}
    {region "T021_MoveAbsoluteEnabledNegativeDirection"}
    eTcoMultiAxisTests.MoveAbsoluteEnabledNegativeDirection:
        IF NOT _arranged THEN
            _enable := TRUE;
            _enablePositive := FALSE;
            _enableNegative := TRUE;
            _arranged := TRUE;
            RETURN;
        END_IF;

         _sut.Axis_1.MoveAbsolute(inPosition := _positionAxis1,
            inVelocity := _velocity,
            inAcceleration := _acceleration,
            inDeceleration := _deceleration,
            inJerk := _jerk);
				 
		 _sut.Axis_2.MoveAbsolute(inPosition := _positionAxis2,
            inVelocity := _velocity,
            inAcceleration := _acceleration,
            inDeceleration := _deceleration,
            inJerk := _jerk);
				 
		 _sut.Axis_3.MoveAbsolute(inPosition := _positionAxis3,
            inVelocity := _velocity,
            inAcceleration := _acceleration,
            inDeceleration := _deceleration,
            inJerk := _jerk);
				 
					  
		 _sut.Axis_4.MoveAbsolute(inPosition := _positionAxis4,
            inVelocity := _velocity,
            inAcceleration := _acceleration,
            inDeceleration := _deceleration,
            inJerk := _jerk);

        _done := (_sut.Axis_1.MoveAbsoluteTask.Done OR _sut.Axis_1.MoveAbsoluteTask.Error)
				AND (_sut.Axis_2.MoveAbsoluteTask.Done OR _sut.Axis_2.MoveAbsoluteTask.Error )
				AND (_sut.Axis_3.MoveAbsoluteTask.Done OR _sut.Axis_3.MoveAbsoluteTask.Error )
				AND (_sut.Axis_4.MoveAbsoluteTask.Done OR _sut.Axis_4.MoveAbsoluteTask.Error );
        ProbeDoneWhen(_done);
	{endregion}



		 
	{region "T022_MoveAbsoluteAxisDisabled"}
    eTcoMultiAxisTests.MoveAbsoluteAxisDisabled:
        IF NOT _arranged THEN
            _enable := FALSE;
            _enablePositive := FALSE;
            _enableNegative := FALSE;
            _arranged := TRUE;
            RETURN;
        END_IF;

		_moveParam.Axis1.Position:= _positionAxis1;
		_moveParam.Axis1.Velocity := _velocity;
		_moveParam.Axis1.Acceleration := _acceleration;
		_moveParam.Axis1.Deceleration := _deceleration;
		_moveParam.Axis1.Jerk :=  _jerk;
			 
		_moveParam.Axis2.Position:= _positionAxis1;
		_moveParam.Axis2.Velocity := _velocity;
		_moveParam.Axis2.Acceleration := _acceleration;
		_moveParam.Axis2.Deceleration := _deceleration;
		_moveParam.Axis2.Jerk :=  _jerk;

		_moveParam.Axis3.Position:= _positionAxis1;
		_moveParam.Axis3.Velocity := _velocity;
		_moveParam.Axis3.Acceleration := _acceleration;
		_moveParam.Axis3.Deceleration := _deceleration;
		_moveParam.Axis3.Jerk :=  _jerk;

		_moveParam.Axis4.Position:= _positionAxis1;
		_moveParam.Axis4.Velocity := _velocity;
		_moveParam.Axis4.Acceleration := _acceleration;
		_moveParam.Axis4.Deceleration := _deceleration;
		_moveParam.Axis4.Jerk :=  _jerk;		  
        _sut.MoveAbsolute(_moveParam);
			 
			 
			

     
        _done := (_sut.MoveAbsoluteTask.Done OR (_sut.Axis_1.MoveAbsoluteTask.Error AND _sut.MoveAbsoluteTask.Error ))
			 	AND (_sut.MoveAbsoluteTask.Done OR (_sut.Axis_2.MoveAbsoluteTask.Error AND _sut.MoveAbsoluteTask.Error))
				AND (_sut.MoveAbsoluteTask.Done OR (_sut.Axis_3.MoveAbsoluteTask.Error AND _sut.MoveAbsoluteTask.Error))
				AND (_sut.MoveAbsoluteTask.Done OR (_sut.Axis_4.MoveAbsoluteTask.Error AND _sut.MoveAbsoluteTask.Error)) ; 
        ProbeDoneWhen(_done);

	{endregion}
		 
 	{region "T023_MoveAbsoluteAxisDisabledPositiveDirection"}
    eTcoMultiAxisTests.MoveAbsoluteAxisDisabledPositiveDirection:
        IF NOT _arranged THEN
            _enable := TRUE;
            _enablePositive := FALSE;
            _enableNegative := TRUE;
            _arranged := TRUE;
            RETURN;
        END_IF;

    	_moveParam.Axis1.Position:= _positionAxis1;
		_moveParam.Axis1.Velocity := _velocity;
		_moveParam.Axis1.Acceleration := _acceleration;
		_moveParam.Axis1.Deceleration := _deceleration;
		_moveParam.Axis1.Jerk :=  _jerk;
			 
		_moveParam.Axis2.Position:= _positionAxis1;
		_moveParam.Axis2.Velocity := _velocity;
		_moveParam.Axis2.Acceleration := _acceleration;
		_moveParam.Axis2.Deceleration := _deceleration;
		_moveParam.Axis2.Jerk :=  _jerk;

		_moveParam.Axis3.Position:= _positionAxis1;
		_moveParam.Axis3.Velocity := _velocity;
		_moveParam.Axis3.Acceleration := _acceleration;
		_moveParam.Axis3.Deceleration := _deceleration;
		_moveParam.Axis3.Jerk :=  _jerk;

		_moveParam.Axis4.Position:= _positionAxis1;
		_moveParam.Axis4.Velocity := _velocity;
		_moveParam.Axis4.Acceleration := _acceleration;
		_moveParam.Axis4.Deceleration := _deceleration;
		_moveParam.Axis4.Jerk :=  _jerk;		  
        _sut.MoveAbsolute(_moveParam);

        _done := (_sut.MoveAbsoluteTask.Done OR (_sut.Axis_1.MoveAbsoluteTask.Error AND _sut.MoveAbsoluteTask.Error))
			 	AND (_sut.MoveAbsoluteTask.Done OR (_sut.Axis_2.MoveAbsoluteTask.Error AND _sut.MoveAbsoluteTask.Error))
				AND (_sut.MoveAbsoluteTask.Done OR (_sut.Axis_3.MoveAbsoluteTask.Error AND _sut.MoveAbsoluteTask.Error))
				AND (_sut.MoveAbsoluteTask.Done OR (_sut.Axis_4.MoveAbsoluteTask.Error AND _sut.MoveAbsoluteTask.Error)) ; 
        ProbeDoneWhen(_done);
	{endregion}
    {region "T024_MoveAbsoluteAxisEnabledPositiveDirection"}
    eTcoMultiAxisTests.MoveAbsoluteAxisEnabledPositiveDirection:
        IF NOT _arranged THEN
		     _enable := TRUE;
            _enablePositive := TRUE;
            _enableNegative := FALSE;
            _arranged := TRUE;
            RETURN;
        END_IF;

     	_moveParam.Axis1.Position:= _positionAxis1;
		_moveParam.Axis1.Velocity := _velocity;
		_moveParam.Axis1.Acceleration := _acceleration;
		_moveParam.Axis1.Deceleration := _deceleration;
		_moveParam.Axis1.Jerk :=  _jerk;
			 
		_moveParam.Axis2.Position:= _positionAxis1;
		_moveParam.Axis2.Velocity := _velocity;
		_moveParam.Axis2.Acceleration := _acceleration;
		_moveParam.Axis2.Deceleration := _deceleration;
		_moveParam.Axis2.Jerk :=  _jerk;

		_moveParam.Axis3.Position:= _positionAxis1;
		_moveParam.Axis3.Velocity := _velocity;
		_moveParam.Axis3.Acceleration := _acceleration;
		_moveParam.Axis3.Deceleration := _deceleration;
		_moveParam.Axis3.Jerk :=  _jerk;

		_moveParam.Axis4.Position:= _positionAxis1;
		_moveParam.Axis4.Velocity := _velocity;
		_moveParam.Axis4.Acceleration := _acceleration;
		_moveParam.Axis4.Deceleration := _deceleration;
		_moveParam.Axis4.Jerk :=  _jerk;		  
        _sut.MoveAbsolute(_moveParam);
			 
        _done := (_sut.MoveAbsoluteTask.Done OR (_sut.Axis_1.MoveAbsoluteTask.Error AND _sut.MoveAbsoluteTask.Error))
			 	AND (_sut.MoveAbsoluteTask.Done OR (_sut.Axis_2.MoveAbsoluteTask.Error AND _sut.MoveAbsoluteTask.Error))
				AND (_sut.MoveAbsoluteTask.Done OR (_sut.Axis_3.MoveAbsoluteTask.Error AND _sut.MoveAbsoluteTask.Error))
				AND (_sut.MoveAbsoluteTask.Done OR (_sut.Axis_4.MoveAbsoluteTask.Error AND _sut.MoveAbsoluteTask.Error)) ; 
        ProbeDoneWhen(_done);
	{endregion}
    {region "T025_MoveAbsoluteAxisDisabledNegativeDirection"}
    eTcoMultiAxisTests.MoveAbsoluteAxisDisabledNegativeDirection:
        IF NOT _arranged THEN
			
            _enable := TRUE;
            _enablePositive := FALSE;
            _enableNegative := FALSE;
            _arranged := TRUE;
            RETURN;
        END_IF;

  		_moveParam.Axis1.Position:= _positionAxis1;
		_moveParam.Axis1.Velocity := _velocity;
		_moveParam.Axis1.Acceleration := _acceleration;
		_moveParam.Axis1.Deceleration := _deceleration;
		_moveParam.Axis1.Jerk :=  _jerk;
			 
		_moveParam.Axis2.Position:= _positionAxis1;
		_moveParam.Axis2.Velocity := _velocity;
		_moveParam.Axis2.Acceleration := _acceleration;
		_moveParam.Axis2.Deceleration := _deceleration;
		_moveParam.Axis2.Jerk :=  _jerk;

		_moveParam.Axis3.Position:= _positionAxis1;
		_moveParam.Axis3.Velocity := _velocity;
		_moveParam.Axis3.Acceleration := _acceleration;
		_moveParam.Axis3.Deceleration := _deceleration;
		_moveParam.Axis3.Jerk :=  _jerk;

		_moveParam.Axis4.Position:= _positionAxis1;
		_moveParam.Axis4.Velocity := _velocity;
		_moveParam.Axis4.Acceleration := _acceleration;
		_moveParam.Axis4.Deceleration := _deceleration;
		_moveParam.Axis4.Jerk :=  _jerk;		  
        _sut.MoveAbsolute(_moveParam);

       _done := (_sut.MoveAbsoluteTask.Done OR (_sut.Axis_1.MoveAbsoluteTask.Error AND _sut.MoveAbsoluteTask.Error))
			 	AND (_sut.MoveAbsoluteTask.Done OR (_sut.Axis_2.MoveAbsoluteTask.Error AND _sut.MoveAbsoluteTask.Error))
				AND (_sut.MoveAbsoluteTask.Done OR (_sut.Axis_3.MoveAbsoluteTask.Error AND _sut.MoveAbsoluteTask.Error))
				AND (_sut.MoveAbsoluteTask.Done OR (_sut.Axis_4.MoveAbsoluteTask.Error AND _sut.MoveAbsoluteTask.Error)) ; 
        ProbeDoneWhen(_done);
	{endregion}
    {region "T026_MoveAbsoluteAxisEnabledNegativeDirection"}
    eTcoMultiAxisTests.MoveAbsoluteAxisEnabledNegativeDirection:
        IF NOT _arranged THEN
            _enable := TRUE;
            _enablePositive := FALSE;
            _enableNegative := TRUE;
            _arranged := TRUE;
            RETURN;
        END_IF;

        _moveParam.Axis1.Position:= _positionAxis1;
		_moveParam.Axis1.Velocity := _velocity;
		_moveParam.Axis1.Acceleration := _acceleration;
		_moveParam.Axis1.Deceleration := _deceleration;
		_moveParam.Axis1.Jerk :=  _jerk;
			 
		_moveParam.Axis2.Position:= _positionAxis1;
		_moveParam.Axis2.Velocity := _velocity;
		_moveParam.Axis2.Acceleration := _acceleration;
		_moveParam.Axis2.Deceleration := _deceleration;
		_moveParam.Axis2.Jerk :=  _jerk;

		_moveParam.Axis3.Position:= _positionAxis1;
		_moveParam.Axis3.Velocity := _velocity;
		_moveParam.Axis3.Acceleration := _acceleration;
		_moveParam.Axis3.Deceleration := _deceleration;
		_moveParam.Axis3.Jerk :=  _jerk;

		_moveParam.Axis4.Position:= _positionAxis1;
		_moveParam.Axis4.Velocity := _velocity;
		_moveParam.Axis4.Acceleration := _acceleration;
		_moveParam.Axis4.Deceleration := _deceleration;
		_moveParam.Axis4.Jerk :=  _jerk;		  
        _sut.MoveAbsolute(_moveParam);

        _done := (_sut.MoveAbsoluteTask.Done OR (_sut.Axis_1.MoveAbsoluteTask.Error AND _sut.MoveAbsoluteTask.Error))
			 	AND (_sut.MoveAbsoluteTask.Done OR (_sut.Axis_2.MoveAbsoluteTask.Error AND _sut.MoveAbsoluteTask.Error))
				AND (_sut.MoveAbsoluteTask.Done OR (_sut.Axis_3.MoveAbsoluteTask.Error AND _sut.MoveAbsoluteTask.Error))
				AND (_sut.MoveAbsoluteTask.Done OR (_sut.Axis_4.MoveAbsoluteTask.Error AND _sut.MoveAbsoluteTask.Error)) ; 
        ProbeDoneWhen(_done);
	{endregion}


	{region "T027_MoveAbsoluteAxisDisabledPositiveDirectionAxisDisabled"}
    eTcoMultiAxisTests.MoveAbsoluteAxisDisabledPositiveDirectionAxisDisabled:
        IF NOT _arranged THEN
            _enable := TRUE;
            _enablePositive := FALSE;
            _enableNegative := TRUE;
            _arranged := TRUE;
            RETURN;
        END_IF;

    	_moveParam.Axis1.Position:= _positionAxis1;
		_moveParam.Axis1.Velocity := _velocity;
		_moveParam.Axis1.Acceleration := _acceleration;
		_moveParam.Axis1.Deceleration := _deceleration;
		_moveParam.Axis1.Jerk :=  _jerk;
			 
		_moveParam.Axis2.Position:= _positionAxis1;
		_moveParam.Axis2.Velocity := _velocity;
		_moveParam.Axis2.Acceleration := _acceleration;
		_moveParam.Axis2.Deceleration := _deceleration;
		_moveParam.Axis2.Jerk :=  _jerk;

		_moveParam.Axis3.Position:= _positionAxis1;
		_moveParam.Axis3.Velocity := _velocity;
		_moveParam.Axis3.Acceleration := _acceleration;
		_moveParam.Axis3.Deceleration := _deceleration;
		_moveParam.Axis3.Jerk :=  _jerk;

		_moveParam.Axis4.Position:= _positionAxis1;
		_moveParam.Axis4.Velocity := _velocity;
		_moveParam.Axis4.Acceleration := _acceleration;
		_moveParam.Axis4.Deceleration := _deceleration;
		_moveParam.Axis4.Jerk :=  _jerk;		  
        _sut.MoveAbsolute(_moveParam);

        _done := _sut.MoveAbsoluteTask.Done OR  _sut.MoveAbsoluteTask.Error ; 
        ProbeDoneWhen(_done);
	{endregion}
    {region "T028_MoveAbsoluteAxisEnabledPositiveDirectionAxisDisabled"}
    eTcoMultiAxisTests.MoveAbsoluteAxisEnabledPositiveDirectionAxisDisabled:
        IF NOT _arranged THEN
		     _enable := TRUE;
            _enablePositive := TRUE;
            _enableNegative := FALSE;
            _arranged := TRUE;
            RETURN;
        END_IF;

     	_moveParam.Axis1.Position:= _positionAxis1;
		_moveParam.Axis1.Velocity := _velocity;
		_moveParam.Axis1.Acceleration := _acceleration;
		_moveParam.Axis1.Deceleration := _deceleration;
		_moveParam.Axis1.Jerk :=  _jerk;
			 
		_moveParam.Axis2.Position:= _positionAxis1;
		_moveParam.Axis2.Velocity := _velocity;
		_moveParam.Axis2.Acceleration := _acceleration;
		_moveParam.Axis2.Deceleration := _deceleration;
		_moveParam.Axis2.Jerk :=  _jerk;

		_moveParam.Axis3.Position:= _positionAxis1;
		_moveParam.Axis3.Velocity := _velocity;
		_moveParam.Axis3.Acceleration := _acceleration;
		_moveParam.Axis3.Deceleration := _deceleration;
		_moveParam.Axis3.Jerk :=  _jerk;

		_moveParam.Axis4.Position:= _positionAxis1;
		_moveParam.Axis4.Velocity := _velocity;
		_moveParam.Axis4.Acceleration := _acceleration;
		_moveParam.Axis4.Deceleration := _deceleration;
		_moveParam.Axis4.Jerk :=  _jerk;		  
        _sut.MoveAbsolute(_moveParam);
			 
        _done := (_sut.MoveAbsoluteTask.Done OR (_sut.Axis_1.MoveAbsoluteTask.Error AND _sut.MoveAbsoluteTask.Error))
			 	AND (_sut.MoveAbsoluteTask.Done OR (_sut.Axis_2.MoveAbsoluteTask.Error AND _sut.MoveAbsoluteTask.Error))
				AND (_sut.MoveAbsoluteTask.Done OR (_sut.Axis_3.MoveAbsoluteTask.Error AND _sut.MoveAbsoluteTask.Error))
				AND (_sut.MoveAbsoluteTask.Done OR (_sut.Axis_4.MoveAbsoluteTask.Error AND _sut.MoveAbsoluteTask.Error)) ; 
        ProbeDoneWhen(_done);
	{endregion}
    {region "T029_MoveAbsoluteAxisDisabledNegativeDirectionAxisDisabled"}
    eTcoMultiAxisTests.MoveAbsoluteAxisDisabledNegativeDirectionAxisDisabled:
        IF NOT _arranged THEN
			
            _enable := TRUE;
            _enablePositive := FALSE;
            _enableNegative := FALSE;
            _arranged := TRUE;
            RETURN;
        END_IF;

  		_moveParam.Axis1.Position:= _positionAxis1;
		_moveParam.Axis1.Velocity := _velocity;
		_moveParam.Axis1.Acceleration := _acceleration;
		_moveParam.Axis1.Deceleration := _deceleration;
		_moveParam.Axis1.Jerk :=  _jerk;
			 
		_moveParam.Axis2.Position:= _positionAxis1;
		_moveParam.Axis2.Velocity := _velocity;
		_moveParam.Axis2.Acceleration := _acceleration;
		_moveParam.Axis2.Deceleration := _deceleration;
		_moveParam.Axis2.Jerk :=  _jerk;

		_moveParam.Axis3.Position:= _positionAxis1;
		_moveParam.Axis3.Velocity := _velocity;
		_moveParam.Axis3.Acceleration := _acceleration;
		_moveParam.Axis3.Deceleration := _deceleration;
		_moveParam.Axis3.Jerk :=  _jerk;

		_moveParam.Axis4.Position:= _positionAxis1;
		_moveParam.Axis4.Velocity := _velocity;
		_moveParam.Axis4.Acceleration := _acceleration;
		_moveParam.Axis4.Deceleration := _deceleration;
		_moveParam.Axis4.Jerk :=  _jerk;		  
        _sut.MoveAbsolute(_moveParam);

       _done := (_sut.MoveAbsoluteTask.Done OR (_sut.Axis_1.MoveAbsoluteTask.Error AND _sut.MoveAbsoluteTask.Error))
			 	AND (_sut.MoveAbsoluteTask.Done OR (_sut.Axis_2.MoveAbsoluteTask.Error AND _sut.MoveAbsoluteTask.Error))
				AND (_sut.MoveAbsoluteTask.Done OR (_sut.Axis_3.MoveAbsoluteTask.Error AND _sut.MoveAbsoluteTask.Error))
				AND (_sut.MoveAbsoluteTask.Done OR (_sut.Axis_4.MoveAbsoluteTask.Error AND _sut.MoveAbsoluteTask.Error)) ; 
        ProbeDoneWhen(_done);
	{endregion}
    {region "T030_MoveAbsoluteAxisEnabledNegativeDirectionAxisDisabled"}
    eTcoMultiAxisTests.MoveAbsoluteAxisEnabledNegativeDirectionAxisDisabled:
        IF NOT _arranged THEN
            _enable := TRUE;
            _enablePositive := FALSE;
            _enableNegative := TRUE;
            _arranged := TRUE;
            RETURN;
        END_IF;

        _moveParam.Axis1.Position:= _positionAxis1;
		_moveParam.Axis1.Velocity := _velocity;
		_moveParam.Axis1.Acceleration := _acceleration;
		_moveParam.Axis1.Deceleration := _deceleration;
		_moveParam.Axis1.Jerk :=  _jerk;
			 
		_moveParam.Axis2.Position:= _positionAxis1;
		_moveParam.Axis2.Velocity := _velocity;
		_moveParam.Axis2.Acceleration := _acceleration;
		_moveParam.Axis2.Deceleration := _deceleration;
		_moveParam.Axis2.Jerk :=  _jerk;

		_moveParam.Axis3.Position:= _positionAxis1;
		_moveParam.Axis3.Velocity := _velocity;
		_moveParam.Axis3.Acceleration := _acceleration;
		_moveParam.Axis3.Deceleration := _deceleration;
		_moveParam.Axis3.Jerk :=  _jerk;

		_moveParam.Axis4.Position:= _positionAxis1;
		_moveParam.Axis4.Velocity := _velocity;
		_moveParam.Axis4.Acceleration := _acceleration;
		_moveParam.Axis4.Deceleration := _deceleration;
		_moveParam.Axis4.Jerk :=  _jerk;		  
        _sut.MoveAbsolute(_moveParam);

        _done := (_sut.MoveAbsoluteTask.Done OR (_sut.Axis_1.MoveAbsoluteTask.Error AND _sut.MoveAbsoluteTask.Error))
			 	AND (_sut.MoveAbsoluteTask.Done OR (_sut.Axis_2.MoveAbsoluteTask.Error AND _sut.MoveAbsoluteTask.Error))
				AND (_sut.MoveAbsoluteTask.Done OR (_sut.Axis_3.MoveAbsoluteTask.Error AND _sut.MoveAbsoluteTask.Error))
				AND (_sut.MoveAbsoluteTask.Done OR (_sut.Axis_4.MoveAbsoluteTask.Error AND _sut.MoveAbsoluteTask.Error)) ; 
        ProbeDoneWhen(_done);
	{endregion}



END_CASE]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>