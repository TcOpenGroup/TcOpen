<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="TcoSingleAxisContext" Id="{f7088b30-1550-051e-36b6-fc61c1890722}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK TcoSingleAxisContext EXTENDS TcoCore._internals_TcoContext
VAR
    _sut : TcoSingleAxisTest(THIS^);
    _callMyPlcInstance : BOOL := FALSE;
    _enable : BOOL;
    _enablePositive : BOOL;
    _enableNegative : BOOL;
    _calibrationCam : BOOL;
    _position : LREAL;
    _velocity : LREAL;
    _acceleration : LREAL;
    _deceleration : LREAL;
    _jerk : LREAL;
    _inString : STRING;
    _done : BOOL;
    _arranged : BOOL;
    _axisReferenceType : INT;
    _positions : SomeTestPositions(THIS^);
    _moveParam : TcoSingleAxisMoveParam;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="Main" Id="{9d72f18c-b94e-0903-30f8-3e611d8283f3}">
      <Declaration><![CDATA[METHOD PROTECTED Main]]></Declaration>
      <Implementation>
        <ST><![CDATA[_sut.Config.ErrorTime := T#1000MS;
_sut.Config.InfoTime := T#1000MS;

_sut(inEnable := _enable,
    inEnablePositive := _enablePositive,
    inEnableNegative := _enableNegative,
    inCalibrationCam := _calibrationCam,
    refAxis := GVL.Axis1,
    inoPositions := _positions);

CASE _testId OF
    eTcoSingleAxisTests.Restore:
        _sut.Restore();
    eTcoSingleAxisTests.CleanUp:
        _sut._messenger.Clear();
        {region "T003_Message"}
    eTcoSingleAxisTests.Message:
        _sut.Messenger.Error(_inString);
        _done := _plcCycleCounter > 1;
        ProbeDoneWhen(_done);
        {endregion}
        {region "T004_PowerDisable"}
    eTcoSingleAxisTests.PowerDisable:
        _enable := FALSE;
        _done := _sut.Axis._axisStatus.Disabled; // OR _plcCycleCounter > 1;
        ProbeDoneWhen(_done);
        {endregion}
        {region "T005_PowerEnable"}
    eTcoSingleAxisTests.PowerEnable:
        _enable := TRUE;
        _done := _sut.Axis._axisStatus.Operational; // OR _plcCycleCounter > 15;
        ProbeDoneWhen(_done);
        {endregion}
        {region "T006_Reset"}
    eTcoSingleAxisTests.Reset:
        IF NOT _arranged THEN
            _sut.Axis.MoveRelative(inDistance := 500,
                inVelocity := 50000000,
                inAcceleration := -1,
                inDeceleration := -1,
                inJerk := -1);

            IF _sut.Axis._axisStatus.Error THEN
                _arranged := true;
            END_IF

            RETURN;
        END_IF

        _sut.Axis.Reset();
        _done := _sut.Axis.ResetTask.Done OR _sut.Axis.ResetTask.Error; // OR _plcCycleCounter > 1;
        ProbeDoneWhen(_done);
        {endregion}
        {region "T007_MoveRelativePositiveWithDisabledPositiveDirection"}
    eTcoSingleAxisTests.MoveRelativePositiveWithDisabledPositiveDirection:
        IF NOT _arranged THEN
            _enable := TRUE;
            _enablePositive := FALSE;
            _enableNegative := FALSE;

            IF _sut.Axis._axisStatus.Operational THEN
                _arranged := TRUE;
            END_IF

            RETURN;
        END_IF;

        _sut.Axis.MoveRelative(inDistance := _position,
            inVelocity := _velocity,
            inAcceleration := _acceleration,
            inDeceleration := _deceleration,
            inJerk := _jerk);

        _done := _sut.Axis.MoveRelativeTask.Done OR _sut.Axis.MoveRelativeTask.Error; // OR _sut._axisStatus.Error;// OR _plcCycleCounter > 5;
        ProbeDoneWhen(_done);
        {endregion}
        {region "T008_MoveRelativePositiveWithEnabledPositiveDirection"}
    eTcoSingleAxisTests.MoveRelativePositiveWithEnabledPositiveDirection:
        IF NOT _arranged THEN
            _enable := TRUE;
            _enablePositive := TRUE;
            _enableNegative := FALSE;

            IF _sut.Axis._axisStatus.Operational THEN
                _arranged := TRUE;
            END_IF

            RETURN;
        END_IF;

        _sut.Axis.MoveRelative(inDistance := _position,
            inVelocity := _velocity,
            inAcceleration := _acceleration,
            inDeceleration := _deceleration,
            inJerk := _jerk);

        _done := _sut.Axis.MoveRelativeTask.Done OR _sut.Axis.MoveRelativeTask.Error; // OR  _plcCycleCounter > 1000;
        ProbeDoneWhen(_done);
        {endregion}
        {region "T009_MoveRelativeNegativeWithDisabledNegativeDirection"}
    eTcoSingleAxisTests.MoveRelativeNegativeWithDisabledNegativeDirection:
        IF NOT _arranged THEN
            _enable := TRUE;
            _enablePositive := FALSE;
            _enableNegative := FALSE;

            IF _sut.Axis._axisStatus.Operational THEN
                _arranged := TRUE;
            END_IF

            RETURN;
        END_IF;

        _sut.Axis.MoveRelative(inDistance := _position,
            inVelocity := _velocity,
            inAcceleration := _acceleration,
            inDeceleration := _deceleration,
            inJerk := _jerk);

        _done := _sut.Axis.MoveRelativeTask.Done OR _sut.Axis.MoveRelativeTask.Error; // OR _sut._axisStatus.Error;// OR _plcCycleCounter > 5;
        ProbeDoneWhen(_done);
        {endregion}
        {region "T010_MoveRelativeNegativeWithEnabledNegativeDirection"}
    eTcoSingleAxisTests.MoveRelativeNegativeWithEnabledNegativeDirection:
        IF NOT _arranged THEN
            _enable := TRUE;
            _enablePositive := TRUE;
            _enableNegative := TRUE;

            IF _sut.Axis._axisStatus.Operational THEN
                _arranged := TRUE;
            END_IF

            RETURN;
        END_IF;

        _sut.Axis.MoveRelative(inDistance := _position,
            inVelocity := _velocity,
            inAcceleration := _acceleration,
            inDeceleration := _deceleration,
            inJerk := _jerk);

        _done := _sut.Axis.MoveRelativeTask.Done OR _sut.Axis.MoveRelativeTask.Error; // OR  _plcCycleCounter > 1000;
        ProbeDoneWhen(_done);
        {endregion}
        {region "T011_HommingDirect"}
    eTcoSingleAxisTests.HommingDirect:
        IF NOT _arranged THEN
            _enable := TRUE;
            _enablePositive := FALSE;
            _enableNegative := TRUE;

            IF _sut.Axis._axisStatus.Operational THEN
                _arranged := TRUE;
            END_IF

            RETURN;
        END_IF;

        _sut.Axis.Home(inPosition := _position,
            inHomingMode := TcoDrivesBeckhoff.eHomingMode.MC_Direct,
            inClearPositionLag := FALSE,
            inSearchDirection := TcoDrivesBeckhoff.eDirection.MC_Undefined_Direction,
            inSearchVelocity := _velocity,
            inSyncDirection := TcoDrivesBeckhoff.eDirection.MC_Undefined_Direction,
            inSyncVelocity := _velocity,
            inReferenceMode := TcoDrivesBeckhoff.eEncoderReferenceMode.ENCODERREFERENCEMODE_DEFAULT);

        _done := _sut.Axis.HomeTask.Done OR _sut.Axis.HomeTask.Error; //OR _plcCycleCounter > 1000;
        ProbeDoneWhen(_done);
        {endregion}
        {region "T012_MoveVelocityPositiveWithDisabledPositiveDirection"}
    eTcoSingleAxisTests.MoveVelocityPositiveWithDisabledPositiveDirection:
        IF NOT _arranged THEN
            _enable := TRUE;
            _enablePositive := FALSE;
            _enableNegative := FALSE;

            IF _sut.Axis._axisStatus.Operational THEN
                _arranged := TRUE;
            END_IF

            RETURN;
        END_IF;

        _sut.Axis.MoveVelocity(inVelocity := _velocity,
            inAcceleration := _acceleration,
            inDeceleration := _deceleration,
            inJerk := _jerk,
            inDirection := TcoDrivesBeckhoff.eDirection.MC_Positive_Direction);

        _done := _sut.Axis.MoveVelocityTask.Done OR _sut.Axis.MoveVelocityTask.Error; // OR  _sut._axisStatus.Error;// OR _plcCycleCounter > 5;
        ProbeDoneWhen(_done);
        {endregion}
        {region "T013_MoveVelocityPositiveWithEnabledPositiveDirection"}
    eTcoSingleAxisTests.MoveVelocityPositiveWithEnabledPositiveDirection:
        IF NOT _arranged THEN
            _enable := TRUE;
            _enablePositive := TRUE;
            _enableNegative := FALSE;

            IF _sut.Axis._axisStatus.Operational THEN
                _arranged := TRUE;
            END_IF

            RETURN;
        END_IF;

        _sut.Axis.MoveVelocity(inVelocity := _velocity,
            inAcceleration := _acceleration,
            inDeceleration := _deceleration,
            inJerk := _jerk,
            inDirection := TcoDrivesBeckhoff.eDirection.MC_Positive_Direction);

        _done := _sut.Axis.MoveVelocityTask.Done OR _sut.Axis.MoveVelocityTask.Error; // OR  _plcCycleCounter > 1000;
        ProbeDoneWhen(_done);
        {endregion}
        {region "T014_Stop"}
    eTcoSingleAxisTests.Stop:
        IF NOT _arranged THEN
            _enable := TRUE;
            _enablePositive := TRUE;
            _enableNegative := TRUE;

            IF _sut.Axis._axisStatus.Operational THEN
                _arranged := TRUE;
            END_IF

            RETURN;
        END_IF;

        _sut.Axis.Stop(inDeceleration := _deceleration, inJerk := _jerk);
        _done := _sut.Axis.StopTask.Done OR _sut.Axis.StopTask.Error; // OR  _plcCycleCounter > 1000;
        ProbeDoneWhen(_done);
        {endregion}
        {region "T015_MoveVelocityNegativeWithDisabledNegativeDirection"}
    eTcoSingleAxisTests.MoveVelocityNegativeWithDisabledNegativeDirection:
        IF NOT _arranged THEN
            _enable := TRUE;
            _enablePositive := FALSE;
            _enableNegative := FALSE;

            IF _sut.Axis._axisStatus.Operational THEN
                _arranged := TRUE;
            END_IF

            RETURN;
        END_IF;

        _sut.Axis.MoveVelocity(inVelocity := _velocity,
            inAcceleration := _acceleration,
            inDeceleration := _deceleration,
            inJerk := _jerk,
            inDirection := TcoDrivesBeckhoff.eDirection.MC_Negative_Direction);

        _done := _sut.Axis.MoveVelocityTask.Done OR _sut.Axis.MoveVelocityTask.Error; // OR  _sut._axisStatus.Error;// OR _plcCycleCounter > 5;
        ProbeDoneWhen(_done);
        {endregion}
        {region "T016_MoveVelocityNegativeWithEnabledNegativeDirection"}
    eTcoSingleAxisTests.MoveVelocityNegativeWithEnabledNegativeDirection:
        IF NOT _arranged THEN
            _enable := TRUE;
            _enablePositive := FALSE;
            _enableNegative := TRUE;

            IF _sut.Axis._axisStatus.Operational THEN
                _arranged := TRUE;
            END_IF

            RETURN;
        END_IF;

        _sut.Axis.MoveVelocity(inVelocity := _velocity,
            inAcceleration := _acceleration,
            inDeceleration := _deceleration,
            inJerk := _jerk,
            inDirection := TcoDrivesBeckhoff.eDirection.MC_Negative_Direction);

        _done := _sut.Axis.MoveVelocityTask.Done OR _sut.Axis.MoveVelocityTask.Error; // OR  _plcCycleCounter > 1000;
        ProbeDoneWhen(_done);
        {endregion}
        {region "T017_MoveAbsoluteDisabled"}
    eTcoSingleAxisTests.MoveAbsoluteDisabled:
        IF NOT _arranged THEN
            _enable := FALSE;
            _enablePositive := FALSE;
            _enableNegative := FALSE;
            _arranged := TRUE;
            RETURN;
        END_IF;

        _sut.Axis.MoveAbsolute(inPosition := _position,
            inVelocity := _velocity,
            inAcceleration := _acceleration,
            inDeceleration := _deceleration,
            inJerk := _jerk);

        _done := _sut.Axis.MoveAbsoluteTask.Done OR _sut.Axis.MoveAbsoluteTask.Error OR _plcCycleCounter > 10;
        ProbeDoneWhen(_done);
        {endregion}
        {region "T018_MoveAbsoluteDisabledPositiveDirection"}
    eTcoSingleAxisTests.MoveAbsoluteDisabledPositiveDirection:
        IF NOT _arranged THEN
            _enable := TRUE;
            _enablePositive := FALSE;
            _enableNegative := TRUE;
            _arranged := TRUE;
            RETURN;
        END_IF;

        _sut.Axis.MoveAbsolute(inPosition := _position,
            inVelocity := _velocity,
            inAcceleration := _acceleration,
            inDeceleration := _deceleration,
            inJerk := _jerk);

        _done := _sut.Axis.MoveAbsoluteTask.Done OR _sut.Axis.MoveAbsoluteTask.Error; // OR _sut._axisStatus.Error;// OR _plcCycleCounter > 5;
        ProbeDoneWhen(_done);
        {endregion}
        {region "T019_MoveAbsoluteEnabledPositiveDirection"}
    eTcoSingleAxisTests.MoveAbsoluteEnabledPositiveDirection:
        IF NOT _arranged THEN
            _enable := TRUE;
            _enablePositive := TRUE;
            _enableNegative := FALSE;
            _arranged := TRUE;
            RETURN;
        END_IF;

        _sut.Axis.MoveAbsolute(inPosition := _position,
            inVelocity := _velocity,
            inAcceleration := _acceleration,
            inDeceleration := _deceleration,
            inJerk := _jerk);

        _done := _sut.Axis.MoveAbsoluteTask.Done OR _sut.Axis.MoveAbsoluteTask.Error; // OR _sut._axisStatus.Error;// OR _plcCycleCounter > 5;
        ProbeDoneWhen(_done);
        {endregion}
        {region "T020_MoveAbsoluteDisabledNegativeDirection"}
    eTcoSingleAxisTests.MoveAbsoluteDisabledNegativeDirection:
        IF NOT _arranged THEN
            _enable := TRUE;
            _enablePositive := FALSE;
            _enableNegative := FALSE;
            _arranged := TRUE;
            RETURN;
        END_IF;

        _sut.Axis.MoveAbsolute(inPosition := _position,
            inVelocity := _velocity,
            inAcceleration := _acceleration,
            inDeceleration := _deceleration,
            inJerk := _jerk);

        _done := _sut.Axis.MoveAbsoluteTask.Done OR _sut.Axis.MoveAbsoluteTask.Error; // OR _sut._axisStatus.Error;// OR _plcCycleCounter > 5;
        ProbeDoneWhen(_done);
        {endregion}
        {region "T021_MoveAbsoluteEnabledNegativeDirection"}
    eTcoSingleAxisTests.MoveAbsoluteEnabledNegativeDirection:
        IF NOT _arranged THEN
            _enable := TRUE;
            _enablePositive := FALSE;
            _enableNegative := TRUE;
            _arranged := TRUE;
            RETURN;
        END_IF;

        _sut.Axis.MoveAbsolute(inPosition := _position,
            inVelocity := _velocity,
            inAcceleration := _acceleration,
            inDeceleration := _deceleration,
            inJerk := _jerk);

        _done := _sut.Axis.MoveAbsoluteTask.Done OR _sut.MoveAbsoluteTask.Error; // OR _sut._axisStatus.Error;// OR _plcCycleCounter > 5;
        ProbeDoneWhen(_done);
        {endregion}
        {region "T022_MoveAbsoluteAxisDisabled"}
    eTcoSingleAxisTests.MoveAbsoluteAxisDisabled:
        IF NOT _arranged THEN
            _sut.Restore();
            _enable := FALSE;
            _enablePositive := FALSE;
            _enableNegative := FALSE;
            _arranged := TRUE;
            RETURN;
        END_IF;

        _moveParam.Position := _position;
        _moveParam.Velocity := _velocity;
        _moveParam.Acceleration := _acceleration;
        _moveParam.Deceleration := _deceleration;
        _moveParam.Jerk := _jerk;
        _sut.MoveAbsolute(_moveParam);
        _done := _sut.MoveAbsoluteTask.Done OR (_sut.Axis.MoveAbsoluteTask.Error AND _sut.MoveAbsoluteTask.Error) OR _plcCycleCounter > 10;
        ProbeDoneWhen(_done);
        {endregion}
        {region "T023_MoveAbsoluteAxisDisabledPositiveDirection"}
    eTcoSingleAxisTests.MoveAbsoluteAxisDisabledPositiveDirection:
        IF NOT _arranged THEN
            _sut.Restore();
            _enable := TRUE;
            _enablePositive := FALSE;
            _enableNegative := TRUE;
            _arranged := TRUE;
            RETURN;
        END_IF;

        _moveParam.Position := _position;
        _moveParam.Velocity := _velocity;
        _moveParam.Acceleration := _acceleration;
        _moveParam.Deceleration := _deceleration;
        _moveParam.Jerk := _jerk;
        _sut.MoveAbsolute(_moveParam);
        _done := _sut.MoveAbsoluteTask.Done OR (_sut.Axis.MoveAbsoluteTask.Error AND _sut.MoveAbsoluteTask.Error);
        ProbeDoneWhen(_done);
        {endregion}
        {region "T024_MoveAbsoluteAxisEnabledPositiveDirection"}
    eTcoSingleAxisTests.MoveAbsoluteAxisEnabledPositiveDirection:
        IF NOT _arranged THEN
            _sut.Restore();
            _enable := TRUE;
            _enablePositive := TRUE;
            _enableNegative := FALSE;
            _arranged := TRUE;
            RETURN;
        END_IF;

        _moveParam.Position := _position;
        _moveParam.Velocity := _velocity;
        _moveParam.Acceleration := _acceleration;
        _moveParam.Deceleration := _deceleration;
        _moveParam.Jerk := _jerk;
        _sut.MoveAbsolute(_moveParam);
        _done := _sut.MoveAbsoluteTask.Done OR (_sut.Axis.MoveAbsoluteTask.Error AND _sut.MoveAbsoluteTask.Error);
        ProbeDoneWhen(_done);
        {endregion}
        {region "T025_MoveAbsoluteAxisDisabledNegativeDirection"}
    eTcoSingleAxisTests.MoveAbsoluteAxisDisabledNegativeDirection:
        IF NOT _arranged THEN
            _sut.Restore();
            _enable := TRUE;
            _enablePositive := FALSE;
            _enableNegative := FALSE;
            _arranged := TRUE;
            RETURN;
        END_IF;

        _moveParam.Position := _position;
        _moveParam.Velocity := _velocity;
        _moveParam.Acceleration := _acceleration;
        _moveParam.Deceleration := _deceleration;
        _moveParam.Jerk := _jerk;
        _sut.MoveAbsolute(_moveParam);
        _done := _sut.MoveAbsoluteTask.Done OR (_sut.Axis.MoveAbsoluteTask.Error AND _sut.MoveAbsoluteTask.Error);
        ProbeDoneWhen(_done);
        {endregion}
        {region "T026_MoveAbsoluteAxisEnabledNegativeDirection"}
    eTcoSingleAxisTests.MoveAbsoluteAxisEnabledNegativeDirection:
        IF NOT _arranged THEN
            _sut.Restore();
            _enable := TRUE;
            _enablePositive := FALSE;
            _enableNegative := TRUE;
            _arranged := TRUE;
            RETURN;
        END_IF;

        _moveParam.Position := _position;
        _moveParam.Velocity := _velocity;
        _moveParam.Acceleration := _acceleration;
        _moveParam.Deceleration := _deceleration;
        _moveParam.Jerk := _jerk;
        _sut.MoveAbsolute(_moveParam);
        _done := _sut.MoveAbsoluteTask.Done OR (_sut.MoveAbsoluteTask.Error AND _sut.MoveAbsoluteTask.Error);
        ProbeDoneWhen(_done);
        {endregion}
        {region "T027_MoveRelativeAxisDisabled"}
    eTcoSingleAxisTests.MoveRelativeAxisDisabled:
        IF NOT _arranged THEN
            _sut.Restore();
            _enable := FALSE;
            _enablePositive := FALSE;
            _enableNegative := FALSE;
            _arranged := TRUE;
            RETURN;
        END_IF;

        _moveParam.Position := _position;
        _moveParam.Velocity := _velocity;
        _moveParam.Acceleration := _acceleration;
        _moveParam.Deceleration := _deceleration;
        _moveParam.Jerk := _jerk;
        _sut.MoveRelative(_moveParam);
        _done := _sut.MoveRelativeTask.Done OR (_sut.Axis.MoveRelativeTask.Error AND _sut.MoveRelativeTask.Error) OR _plcCycleCounter > 10;
        ProbeDoneWhen(_done);
        {endregion}
        {region "T028_MoveRelativeAxisDisabledPositiveDirection"}
    eTcoSingleAxisTests.MoveRelativeAxisDisabledPositiveDirection:
        IF NOT _arranged THEN
            _sut.Restore();
            _enable := TRUE;
            _enablePositive := FALSE;
            _enableNegative := TRUE;
            _arranged := TRUE;
            RETURN;
        END_IF;

        _moveParam.Position := _position;
        _moveParam.Velocity := _velocity;
        _moveParam.Acceleration := _acceleration;
        _moveParam.Deceleration := _deceleration;
        _moveParam.Jerk := _jerk;
        _sut.MoveRelative(_moveParam);
        _done := _sut.MoveRelativeTask.Done OR (_sut.Axis.MoveRelativeTask.Error AND _sut.MoveRelativeTask.Error);
        ProbeDoneWhen(_done);
        {endregion}
        {region "T029_MoveRelativeAxisEnabledPositiveDirection"}
    eTcoSingleAxisTests.MoveRelativeAxisEnabledPositiveDirection:
        IF NOT _arranged THEN
            _sut.Restore();
            _enable := TRUE;
            _enablePositive := TRUE;
            _enableNegative := FALSE;
            _arranged := TRUE;
            RETURN;
        END_IF;

        _moveParam.Position := _position;
        _moveParam.Velocity := _velocity;
        _moveParam.Acceleration := _acceleration;
        _moveParam.Deceleration := _deceleration;
        _moveParam.Jerk := _jerk;
        _sut.MoveRelative(_moveParam);
        _done := _sut.MoveRelativeTask.Done OR (_sut.Axis.MoveRelativeTask.Error AND _sut.MoveRelativeTask.Error);
        ProbeDoneWhen(_done);
        {endregion}
        {region "T030_MoveRelativeAxisDisabledNegativeDirection"}
    eTcoSingleAxisTests.MoveRelativeAxisDisabledNegativeDirection:
        IF NOT _arranged THEN
            _sut.Restore();
            _enable := TRUE;
            _enablePositive := FALSE;
            _enableNegative := FALSE;
            _arranged := TRUE;
            RETURN;
        END_IF;

        _moveParam.Position := _position;
        _moveParam.Velocity := _velocity;
        _moveParam.Acceleration := _acceleration;
        _moveParam.Deceleration := _deceleration;
        _moveParam.Jerk := _jerk;
        _sut.MoveRelative(_moveParam);
        _done := _sut.MoveRelativeTask.Done OR (_sut.Axis.MoveRelativeTask.Error AND _sut.MoveRelativeTask.Error);
        ProbeDoneWhen(_done);
        {endregion}
        {region "T031_MoveRelativeAxisEnabledNegativeDirection"}
    eTcoSingleAxisTests.MoveRelativeAxisEnabledNegativeDirection:
        IF NOT _arranged THEN
            _sut.Restore();
            _enable := TRUE;
            _enablePositive := FALSE;
            _enableNegative := TRUE;
            _arranged := TRUE;
            RETURN;
        END_IF;

        _moveParam.Position := _position;
        _moveParam.Velocity := _velocity;
        _moveParam.Acceleration := _acceleration;
        _moveParam.Deceleration := _deceleration;
        _moveParam.Jerk := _jerk;
        _sut.MoveRelative(_moveParam);
        _done := _sut.MoveRelativeTask.Done OR (_sut.MoveRelativeTask.Error AND _sut.MoveRelativeTask.Error);
        ProbeDoneWhen(_done);
        {endregion}
END_CASE]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>