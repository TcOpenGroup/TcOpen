<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="TcoAiAny" Id="{0456be9b-b485-0bc2-3cd4-f89b3e825ad9}" SpecialFunc="None">
    <Declaration><![CDATA[(*~
    <docu>
        <summary>
                Generic component for monitoring of a continuous signal input. (e.g. AnalogSensor).
        </summary>
    </docu>
~*)
FUNCTION_BLOCK TcoAiAny EXTENDS TcoCore.TcoComponent
VAR_INPUT
    (*~
    <docu>
        <summary>
            Input  continious signal. Typically an `%I* : INT` or `%I* : DINT`  variable.
        </summary>
    </docu>
    ~*)
    inSignal : DINT;
    (*~
    <docu>
        <summary>
            Input additional symbol information about continious signal. Typically an `%I* : INT` or `%I* : DINT`  variable.
        </summary>
    </docu>
    ~*)
    inSignalInfo : TcoCore.TcoSignalInfo;
END_VAR
VAR
    (*~
    <docu>
        <summary>
            Backing variable for signal; this variable is used directly by the component. It updates `inoSingal` in FB body call.
        </summary>
    </docu>
    ~*)
    _signal : DINT;
END_VAR
VAR
    (*~
    <docu>
        <summary>
            Provides information about the input signal of this instance of `TcoAi`.
        </summary>
    </docu>
    ~*)
    {attribute addProperty Name "<#Signal#>"}
    _signalInfo : TcoCore.TcoSignalInfo;
    (*~
    <docu>
        <summary>
            Contains information about the settings and configuration of this instance of `TcoAi`.
        </summary>
    </docu>
    ~*)
    {attribute addProperty Name "<#Config#>"}
    _config : TcoAiConfig;
    (*~
    <docu>
        <summary>
            Contains information about the status if this instance of `TcoAi`.
        </summary>
    </docu>
    ~*)
    {attribute addProperty Name "<#Status#>"}
    _status : TcoAiStatus;
    _rawRange : REAL;
    _realRange : REAL;
    _scaled : REAL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[_signal := inSignal;
_signalInfo := inSignalInfo;
//------------------scale-------------------------
_rawRange := DINT_TO_REAL(_config.RawHigh - _config.RawLow);
_realRange := config.RealHigh - Config.RealLow;
_scaled := 0;

IF (_rawRange = 0) THEN
    Messenger.Warning('<#Division by zero: Verify values defined in config! (RawHigh,RawLow)#>');
    RETURN;
END_IF

IF (Config.Gain = 0) THEN
    Messenger.Warning('<#Invalid data: Gain is not defined!#>');
END_IF

_scaled := (DINT_TO_REAL(_signal - _config.RawLow)) / _rawRange;
_scaled := _scaled * _realRange;
_scaled := _scaled + _config.RealLow;
_scaled := _scaled * _config.Gain + _config.Offset;

//------------------------------------------------
IF (_scaled > _config.RealHigh) AND (_config.Gain <> 1 OR _config.Offset <> 0) THEN
    Messenger.Warning('<#Out of boundaries,check correction parameters (Gain,Ofset) in config!#>');
ELSIF (_scaled < _config.RealLow) AND (_config.Gain <> 1 OR _config.Offset <> 0) THEN
    Messenger.Warning('<#Out of boundaries,check correction parameters (Gain,Ofset) in config!#>');
END_IF

_status.RawRange := _rawRange;
_status.RealRange := _realRange;
_status.Scaled := _scaled;]]></ST>
    </Implementation>
    <Folder Name="Status" Id="{11169c91-cd13-0c13-33b0-c2136e69a21b}" />
    <Property Name="Config" Id="{ce089b39-65fc-0054-2c31-c550ea720ede}">
      <Declaration><![CDATA[PROPERTY Config : REFERENCE TO TcoAiConfig]]></Declaration>
      <Get Name="Get" Id="{d26cf86b-db47-049b-3e93-eceba080e297}">
        <Declaration><![CDATA[VAR
END_VAR]]></Declaration>
        <Implementation>
          <ST><![CDATA[Config REF= _config;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="FB_init" Id="{82651aaa-8366-0916-3673-2df74b8dfb80}">
      <Declaration><![CDATA[{attribute 'hide'}
METHOD FB_init : BOOL
VAR_INPUT
    bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
    bInCopyCode : BOOL; // if TRUE, the instance afterwards gets moved into the copy code (online change)
    ParentObject : ITcoObject;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="Restore" Id="{f215698f-5ab8-0d31-0c96-c7a0accbb658}">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Restores this instance to the Ready state. Can be called explicitly or from within one of the restore mechanisms.
        </summary>
    </docu>
~*)
METHOD Restore : ITcoRestorable]]></Declaration>
      <Implementation>
        <ST><![CDATA[// No implementation needed for this componet.]]></ST>
      </Implementation>
    </Method>
    <Method Name="ServiceMode" Id="{36a9e094-cb89-00d0-26e8-b7e6c7b3cbb8}">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Custom service (manual, maintenance) logic.
            This method must be implemented in derived class.
        </summary>
    </docu>
~*)
METHOD PROTECTED ServiceMode]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Property Name="Status" Id="{da11a8fc-bd88-048a-278d-3f85da67a74f}" FolderPath="Status\">
      <Declaration><![CDATA[PROPERTY Status : REFERENCE TO TcoAiStatus]]></Declaration>
      <Get Name="Get" Id="{7dab1aaa-2d18-06d2-358f-e065ad124beb}">
        <Declaration><![CDATA[VAR
END_VAR]]></Declaration>
        <Implementation>
          <ST><![CDATA[Status REF= _status;]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>