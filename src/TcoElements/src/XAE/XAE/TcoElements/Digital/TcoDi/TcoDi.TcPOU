<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="TcoDi" Id="{273e6c39-88c9-09a5-0e36-5e3aaef51e55}" SpecialFunc="None">
    <Declaration><![CDATA[(*~
    <docu>
        <summary>
                Generic component for monitoring of an input. (e.g. DigitalSensor).
        </summary>
    </docu>
~*)
FUNCTION_BLOCK TcoDi EXTENDS TcoCore.TcoComponent
VAR_IN_OUT
    (*~
    <docu>
        <summary>
            Input signal. Typically an `%I*` variable.
        </summary>
    </docu>
    ~*)
    inoSignal : BOOL;
END_VAR
VAR
    (*~
    <docu>
        <summary>
            Backing variable for signal; this variable is used directly by the component. It updates `inoSingal` in FB body call.
        </summary>
    </docu>
    ~*)
    _signal : BOOL;
END_VAR
VAR
    {attribute addProperty Name "<#Signal#>"}
    _signalInfo : TcoCore.TcoSignalInfo;
    {attribute addProperty Name "<#Check On#>"}
    {attribute addProperty ToolTip "<#Checks that the input is on#>"}
    _isTrueTask : TcoCore.TcoTask(THIS^);
    {attribute addProperty ToolTip "<#Checks that the input is off#>"}
    {attribute addProperty Name "<#Check Off#>"}
    _isFalseTask : TcoCore.TcoTask(THIS^);
    _config : TcoDiConfig;
    _isFalseTimeOutTimers : Tc2_Standard.TON;
    _isTrueTimeOutTimers : Tc2_Standard.TON;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF (__ISVALIDREF(inoSignal)) THEN
    _signalInfo.GetSignalInfo(SIZEOF(inoSignal), ADR(inoSignal));
    _signal := inoSignal;
END_IF;

IF (_isTrueTask.Execute()) THEN
    _isTrueTask.DoneWhen(IsTrue);
END_IF

IF (_isFalseTask.Execute()) THEN
    _isFalseTask.DoneWhen(IsFalse);
END_IF]]></ST>
    </Implementation>
    <Folder Name="Status" Id="{4acf283f-c586-0e9a-32df-e2fbac8acd0d}" />
    <Property Name="Config" Id="{68ef5f82-b192-046c-238c-d094b71e0803}">
      <Declaration><![CDATA[PROPERTY Config : REFERENCE TO TcoDiConfig]]></Declaration>
      <Get Name="Get" Id="{91104025-25c0-0ae9-2722-815d911d7941}">
        <Declaration><![CDATA[VAR
END_VAR]]></Declaration>
        <Implementation>
          <ST><![CDATA[Config REF= _config;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="FB_init" Id="{878d0fc2-bb83-09bb-14e2-2ee747810706}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
    bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
    bInCopyCode : BOOL; // if TRUE, the instance afterwards gets moved into the copy code (online change)
    ParentObject : ITcoObject;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Property Name="IsFalse" Id="{538887ec-6778-0956-37a7-2c5df3071b05}" FolderPath="Status\">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Gets 'true' when monitor signal is 'off/false/logical 0'.
            Generates message when the returning 'false'.
        </summary>
    </docu>
~*)
{attribute 'monitoring' := 'variable'}
PROPERTY IsFalse : BOOL]]></Declaration>
      <Get Name="Get" Id="{6b129dbe-6f5f-024d-0e17-d29ef5783d85}">
        <Declaration><![CDATA[VAR
END_VAR]]></Declaration>
        <Implementation>
          <ST><![CDATA[IsFalse := NOT _signal;
_isFalseTimeOutTimers(IN := NOT IsFalse, PT := _config.IsFalseTimeOut);

IF (NOT IsFalse) THEN
    Messenger.Info('<#Expecting `negative` signal#>');
END_IF;

IF (_isFalseTimeOutTimers.Q) THEN
    Messenger.Warning('<#Expecting `negative` signal#>');
END_IF;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="IsTrue" Id="{fb95f7fa-8383-006f-0e46-37782e9fae84}" FolderPath="Status\">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Gets 'true' when monitor signal is 'on/true/logical 1'.
            Generates message when the returning 'false'.
        </summary>
    </docu>
~*)
{attribute 'monitoring' := 'variable'}
PROPERTY IsTrue : BOOL]]></Declaration>
      <Get Name="Get" Id="{36f87c8d-9f9a-0528-3e6a-c841a0bdd4a4}">
        <Declaration><![CDATA[VAR
END_VAR]]></Declaration>
        <Implementation>
          <ST><![CDATA[IsTrue := _signal;
_isTrueTimeOutTimers(IN := NOT IsTrue, PT := _config.IsFalseTimeOut);

IF (NOT IsTrue) THEN
    Messenger.Info('<#Expecting `positive` signal#>');
END_IF;

IF (_isTrueTimeOutTimers.Q) THEN
    Messenger.Warning('<#Expecting `positive` signal#>');
END_IF;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Restore" Id="{1650f735-ccbf-01ab-26ba-2f0aae5080c4}">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Restores this instance to the Ready state. Can be called explicitly or from within one of the restore mechanisms.
        </summary>
    </docu>
~*)
METHOD Restore : ITcoRestorable]]></Declaration>
      <Implementation>
        <ST><![CDATA[// No implementation needed for this componet.]]></ST>
      </Implementation>
    </Method>
    <Method Name="ServiceMode" Id="{8a7f09bf-8e0b-05a5-0935-1ffa8bcbc867}">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Custom service (manual, maintenance) logic.
            This method must be implemented in derived class.
        </summary>
    </docu>
~*)
METHOD PROTECTED ServiceMode]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Property Name="Signal" Id="{32be68fa-77b6-00d3-041b-e96ef74f89d6}" FolderPath="Status\">
      <Declaration><![CDATA[PROPERTY PUBLIC Signal : Bool]]></Declaration>
      <Get Name="Get" Id="{a2ccff4c-e7e9-0841-0f60-19605a2ad5f3}">
        <Declaration><![CDATA[VAR
END_VAR]]></Declaration>
        <Implementation>
          <ST><![CDATA[Signal := _signal;]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>