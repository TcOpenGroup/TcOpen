<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="TcoDo" Id="{de8ef058-faec-0831-0021-5122e2bb13ce}" SpecialFunc="None">
    <Declaration><![CDATA[(*~
    <docu>
        <summary>
                Generic component for discrete control of an output.
        </summary>
    </docu>
~*)
FUNCTION_BLOCK TcoDo EXTENDS TcoCore.TcoComponent
VAR_IN_OUT
    (*~
    <docu>
        <summary>
            Controlled signal. Typically an `%Q*` variable.
        </summary>
    </docu>
    ~*)
    inoSignal : BOOL;
END_VAR
VAR
    (*~
    <docu>
        <summary>
            Backing variable for signal; this variable is used directly by the component. It updates `inoSingal` in FB body call.
        </summary>
    </docu>
    ~*)
    _signal : BOOL;
END_VAR
VAR
    {attribute addProperty Name "<#Signal#>"}
    _signalInfo : TcoCore.TcoSignalInfo;
    {attribute addProperty Name "<#On#>"}
    {attribute addProperty ToolTip "<#Sets the output#>"}
    _setTask : TcoCore.TcoTask(THIS^);
    {attribute addProperty ToolTip "<#Resets the output#>"}
    {attribute addProperty Name "<#Off#>"}
    _resetTask : TcoCore.TcoTask(THIS^);
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF (__ISVALIDREF(inoSignal)) THEN
    _signalInfo.GetSignalInfo(SIZEOF(inoSignal), ADR(inoSignal));
    inoSignal := _signal;
END_IF;

IF (_setTask.Execute()) THEN
    _setTask.DoneWhen(Set());
END_IF

IF (_resetTask.Execute()) THEN
    _resetTask.DoneWhen(Reset());
END_IF]]></ST>
    </Implementation>
    <Method Name="FB_init" Id="{811343f3-2a93-003e-12ec-2b2a1981e09b}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
    bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
    bInCopyCode : BOOL; // if TRUE, the instance afterwards gets moved into the copy code (online change)
    ParentObject : ITcoObject;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Property Name="IsFalse" Id="{5ae304fd-f132-0a43-2c66-591f5135f758}">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Gets 'true' when monitor signal is 'off/false/logical 0'.
            Generates message when the returning 'false'.
        </summary>
    </docu>
~*)
{attribute 'monitoring' := 'variable'}
PROPERTY IsFalse : BOOL]]></Declaration>
      <Get Name="Get" Id="{400d1fb3-5c3c-01ee-077f-21d8673a42c2}">
        <Declaration><![CDATA[VAR
END_VAR]]></Declaration>
        <Implementation>
          <ST><![CDATA[IsFalse := NOT _signal;

IF (NOT IsFalse) THEN
    Messenger.Info('<#Expecting `negative` signal#>');
END_IF;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="IsTrue" Id="{eef61f3c-d22d-0f31-228a-45fda64c672d}">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Gets 'true' when monitor signal is 'on/true/logical 1'.
            Generates message when the returning 'false'.
        </summary>
    </docu>
~*)
{attribute 'monitoring' := 'variable'}
PROPERTY IsTrue : BOOL]]></Declaration>
      <Get Name="Get" Id="{46eab3e6-f27e-0b15-1296-8ee19e11f405}">
        <Declaration><![CDATA[VAR
END_VAR]]></Declaration>
        <Implementation>
          <ST><![CDATA[IsTrue := _signal;

IF (NOT IsTrue) THEN
    Messenger.Info('<#Expecting `positive` signal#>');
END_IF;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Reset" Id="{2d444a59-c799-0c56-31dc-6732b6de483d}">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Sets controlled signal into 'off/false/logical 0'.
        </summary>
    </docu>
~*)
METHOD Reset : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[Messenger.Trace('<#Reseting signal (off/false)#>');
_signal := FALSE;
Reset := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Restore" Id="{44dd5552-d6b8-0eda-31af-7b77aeedbfd7}">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Restores this instance to the Ready state. Can be called explicitly or from within one of the restore mechanisms.
        </summary>
    </docu>
~*)
METHOD Restore : ITcoRestorable]]></Declaration>
      <Implementation>
        <ST><![CDATA[// No implementation needed for this componet.]]></ST>
      </Implementation>
    </Method>
    <Method Name="ServiceMode" Id="{b5e5dc66-b55d-0f87-13e2-586d099704d1}">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Custom service (manual, maintenance) logic.
            This method must be implemented in derived class.
        </summary>
    </docu>
~*)
METHOD PROTECTED ServiceMode]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="Set" Id="{aee7d6fa-47e6-02dd-180d-ca7ac2f2755d}">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Sets controlled signal into 'on/true/logical 1'.
        </summary>
    </docu>
~*)
METHOD PUBLIC Set : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[Messenger.Trace('<#Setting signal (on/true)#>');
_signal := TRUE;
Set := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Signal" Id="{e967eb63-8435-0412-3145-1e7065c48823}">
      <Declaration><![CDATA[PROPERTY PUBLIC Signal : Bool]]></Declaration>
      <Get Name="Get" Id="{ec79e3cd-e930-07f1-08dd-2faed0e1dd7f}">
        <Declaration><![CDATA[VAR
END_VAR]]></Declaration>
        <Implementation>
          <ST><![CDATA[Signal := _signal;]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>