<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="___Division_by_zero__Verify_values_defined_in_config___RawHigh_RawLow___" xml:space="preserve">
    <value>Division by zero: Verify values defined in config! (RawHigh,RawLow)</value>
  </data>
  <data name="___Invalid_data__Gain_is_not_defined___" xml:space="preserve">
    <value>Invalid data: Gain is not defined!</value>
  </data>
  <data name="___Out_of_boundaries_check_correction_parameters__Gain_Ofset__in_config___" xml:space="preserve">
    <value>Out of boundaries,check correction parameters (Gain,Ofset) in config!</value>
  </data>
  <data name="___Signal__" xml:space="preserve">
    <value>Signal</value>
  </data>
  <data name="___Config__" xml:space="preserve">
    <value>Config</value>
  </data>
  <data name="___Status__" xml:space="preserve">
    <value>Status</value>
  </data>
  <data name="___Enable_turn__" xml:space="preserve">
    <value>Enable turn</value>
  </data>
  <data name="___Start_turn__" xml:space="preserve">
    <value>Start turn</value>
  </data>
  <data name="___In_position_sensor__" xml:space="preserve">
    <value>In position sensor</value>
  </data>
  <data name="___In_precise_position_sensor__" xml:space="preserve">
    <value>In precise position sensor</value>
  </data>
  <data name="___Enable_turn_table__" xml:space="preserve">
    <value>Enable turn table</value>
  </data>
  <data name="___Start_turn_table__" xml:space="preserve">
    <value>Start turn table</value>
  </data>
  <data name="___In_position_signal__" xml:space="preserve">
    <value>In position signal</value>
  </data>
  <data name="___In_precise_position_signal__" xml:space="preserve">
    <value>In precise position signal</value>
  </data>
  <data name="___Enable_turn_signal__" xml:space="preserve">
    <value>Enable turn signal</value>
  </data>
  <data name="___Start_turn_signal__" xml:space="preserve">
    <value>Start turn signal</value>
  </data>
  <data name="___Invalid_reference____" xml:space="preserve">
    <value>Invalid reference: </value>
  </data>
  <data name="___Rotatiting_started___but_table_is_not_in_default_position__Acknowledge_this_alarm_if_you_still_want_to_turn____" xml:space="preserve">
    <value>Rotatiting started , but table is not in default position! Acknowledge this alarm if you still want to turn! </value>
  </data>
  <data name="___Calulate_next_expected_Id_position__" xml:space="preserve">
    <value>Calulate next expected Id position</value>
  </data>
  <data name="___Incorrectly_coded_current_position__Check_configuration_of_code_bits____" xml:space="preserve">
    <value>Incorrectly coded current position. Check configuration of code bits! </value>
  </data>
  <data name="___Table_turning__Trying_to_leave_sensor__" xml:space="preserve">
    <value>Table turning. Trying to leave sensor</value>
  </data>
  <data name="___Table_turning__Trying_to_reach_sensor_table_in_positon___" xml:space="preserve">
    <value>Table turning. Trying to reach sensor table in positon.</value>
  </data>
  <data name="___Table_after_turn_does_not_have_expected_coding__Expected_id_at_position__1_is__" xml:space="preserve">
    <value>Table after turn does not have expected coding. Expected id at position #1 is</value>
  </data>
  <data name="___Safety_conditions_to_turn_the_table_are_not_met___" xml:space="preserve">
    <value>Safety conditions to turn the table are not met.</value>
  </data>
  <data name="___Required_position_must_be_in_range_1___20_but_was___" xml:space="preserve">
    <value>Required position must be in range 1 - 20 but was:</value>
  </data>
  <data name="___Turning_table_was_aborted__while_not_yet_completed___" xml:space="preserve">
    <value>Turning table was aborted, while not yet completed!</value>
  </data>
  <data name="___Truning_table__was_completed_successfully___" xml:space="preserve">
    <value>Truning table  was completed successfully.</value>
  </data>
  <data name="___Turning_table_finished_with_an_error___" xml:space="preserve">
    <value>Turning table finished with an error.</value>
  </data>
  <data name="___Turning_table_started___" xml:space="preserve">
    <value>Turning table started.</value>
  </data>
  <data name="___Parameter_number_of_positions_is____0__The_paremeters_must_be_grater_than_0___" xml:space="preserve">
    <value>Parameter number of positions is &lt;= 0. The paremeters must be grater than 0.</value>
  </data>
  <data name="___Turn__" xml:space="preserve">
    <value>Turn</value>
  </data>
  <data name="___Restore__" xml:space="preserve">
    <value>Restore</value>
  </data>
  <data name="___Turning_table_aborted_due_to__" xml:space="preserve">
    <value>Turning table aborted due to</value>
  </data>
  <data name="___Turning_table_aborted_due_to_NOT___" xml:space="preserve">
    <value>Turning table aborted due to NOT </value>
  </data>
  <data name="___Turning_table_is_suspended_due_to__" xml:space="preserve">
    <value>Turning table is suspended due to</value>
  </data>
  <data name="___Turning_table_is_suspended_due_to_NOT___" xml:space="preserve">
    <value>Turning table is suspended due to NOT </value>
  </data>
  <data name="___Rotating_is_suspended_due_to__" xml:space="preserve">
    <value>Rotating is suspended due to</value>
  </data>
  <data name="___Check_On__" xml:space="preserve">
    <value>Check On</value>
  </data>
  <data name="___Checks_that_the_input_is_on__" xml:space="preserve">
    <value>Checks that the input is on</value>
  </data>
  <data name="___Checks_that_the_input_is_off__" xml:space="preserve">
    <value>Checks that the input is off</value>
  </data>
  <data name="___Check_Off__" xml:space="preserve">
    <value>Check Off</value>
  </data>
  <data name="___On__" xml:space="preserve">
    <value>On</value>
  </data>
  <data name="___Sets_the_output__" xml:space="preserve">
    <value>Sets the output</value>
  </data>
  <data name="___Resets_the_output__" xml:space="preserve">
    <value>Resets the output</value>
  </data>
  <data name="___Off__" xml:space="preserve">
    <value>Off</value>
  </data>
  <data name="___Reseting_signal__off_false___" xml:space="preserve">
    <value>Reseting signal (off/false)</value>
  </data>
  <data name="___Setting_signal__on_true___" xml:space="preserve">
    <value>Setting signal (on/true)</value>
  </data>
  <data name="___Setpoint__" xml:space="preserve">
    <value>Setpoint</value>
  </data>
  <data name="___Raw_range__" xml:space="preserve">
    <value>Raw range</value>
  </data>
  <data name="___Real_range__" xml:space="preserve">
    <value>Real range</value>
  </data>
  <data name="___Unscaled_value__" xml:space="preserve">
    <value>Unscaled value</value>
  </data>
  <data name="___In_position__" xml:space="preserve">
    <value>In position</value>
  </data>
  <data name="___In_precise_position__" xml:space="preserve">
    <value>In precise position</value>
  </data>
  <data name="___Turn_safety_condition__" xml:space="preserve">
    <value>Turn safety condition</value>
  </data>
  <data name="___Current_position__" xml:space="preserve">
    <value>Current position</value>
  </data>
  <data name="___Expected_next_position__" xml:space="preserve">
    <value>Expected next position</value>
  </data>
  <data name="___Positions__" xml:space="preserve">
    <value>Positions</value>
  </data>
  <data name="___Scaled_value__" xml:space="preserve">
    <value>Scaled value</value>
  </data>
</root>