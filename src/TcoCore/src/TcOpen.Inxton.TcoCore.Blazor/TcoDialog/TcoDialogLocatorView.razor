@namespace TcoCore
@using TcOpen.Inxton.TcoCore.Blazor.TcoDialog;

@if(DialogService.DialogVortex != null)
{
<RenderableContentControl Context="DialogService.DialogVortex" Presentation="Dialog" ></RenderableContentControl>
}
@code {
    [Inject]
    public DialogProxyServiceBlazor DialogService { get; set; }
    [Inject]
    public JsInteropDialog jsInterop { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            jsInterop.firstRenderComplete = true;
            DialogService.DialogInitializationCompleted += OnDialogRaised; // register with an event
        }
        await base.OnAfterRenderAsync(firstRender);
    }


    public async void OnDialogRaised()
    {
        await InvokeAsync(StateHasChanged);
        var nameOfType = DialogService.DialogVortex.GetType().Name;
        //this can be done better, change it in future - find a way to identify vortex object and make that a ID
        if (nameOfType == "TcoDialog")
        {
            await jsInterop.ShowTcoDialog(TcoBaseDialogId);
        }
        else if (nameOfType == "TcoInspectorDialog")
        {
            await jsInterop.ShowTcoDialog(TcoInspectorDialogId);
        }

    }
    private string TcoBaseDialogId = "#TcoDialogDialogView";
    private string TcoInspectorDialogId = "#TcoInspectorDialogDialogView";

}
