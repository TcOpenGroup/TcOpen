@namespace TcoCore
@inject NavigationManager _navigationManager
@implements IAsyncDisposable
@using TcOpen.Inxton.TcoCore.Blazor.TcoDialog.Hubs

<h1>TCO LOCATOR</h1>
@if (_showDialogHtml)
{
    <RenderableContentControl Context="_actualDialog"
                              Presentation="Dialog"
                              ></RenderableContentControl>
}

<button type="button" id="SendCloseButtonId" @onclick="SendClose"  style="display:none">Send close</button>

@code {
    [Parameter]
    public DialogProxyServiceBlazor DialogService { get; set; }


    [Parameter]
    public string DialogId { get; set; }
    [Inject]
    public JsInteropDialog jsInterop { get; set; }


    private bool _showDialogHtml { get; set;}
    private DialogClient _dialogClient { get; set; }
    private IsDialog _actualDialog { get; set; }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            jsInterop.firstRenderComplete = true;
            string baseUrl = _navigationManager.BaseUri;
            _dialogClient = new DialogClient(DialogId, baseUrl);
            //_dialogClient.MessageReceived += MessageReceived;
            _dialogClient.MessageReceivedDialogClose += OnCloseDialogMessage;
            DialogService.DialogInvoked += OnDialogInvoked; // register with an event
            await _dialogClient.StartAsync();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async void OnCloseDialogMessage(object sender, MessageReceivedEventArgs e)
    {
        try
        {
            var idOfSender = e.Message;
            if (idOfSender == _navigationManager.ToBaseRelativePath(_navigationManager.Uri))
            {
                await jsInterop.HideTcoDialog("#" + idOfSender);
                _showDialogHtml = false;
                _actualDialog = null;
            }
            await InvokeAsync(StateHasChanged);
        }
        catch (TaskCanceledException)
        {
            //swallow TaskCanceledException,
            //throw;
        }
    }

    public async void OnDialogInvoked()
    {
        await InvokeAsync(StateHasChanged);

        if (DialogService.DialogVortex != null)
        {
            _showDialogHtml = true;
            DialogService.DialogVortex.DialogId = DialogId;
            _actualDialog = DialogService.DialogVortex;
            await InvokeAsync(StateHasChanged);

            try
            {
                await jsInterop.ShowTcoDialog("#" + DialogId);
                await InvokeAsync(StateHasChanged);
            }
            catch 
            {

                //swallow
            }

        }


    }
    public async ValueTask DisposeAsync()
    {
        //if (_dialogClient._hubConnection != null)
        //{
            //Console.WriteLine("ChatClient: trying to dispose");
            _showDialogHtml = false;
            await _dialogClient.StopAsync();
        //}
    }

      
    public async Task SendClose()
    {
        try
        {
            await _dialogClient.SendDialogClose(DialogId);
            await InvokeAsync(StateHasChanged);
        }
        catch (TaskCanceledException)
        {
            //swallow
        }

    }




}
