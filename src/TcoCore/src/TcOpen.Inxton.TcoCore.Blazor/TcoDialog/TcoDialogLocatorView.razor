@namespace TcoCore
@using TcOpen.Inxton.TcoCore.Blazor.TcoDialog;

@if(DialogService.DialogVortex != null)
{
<RenderableContentControl Context="DialogService.DialogVortex" Presentation="Dialog" ></RenderableContentControl>
}
@code {
    [Inject]
    public DialogProxyServiceBlazor DialogService { get; set; }
    [Inject]
    public JsInteropDialog jsInterop { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            jsInterop.firstRenderComplete = true;
            DialogService.DialogInitializationCompleted += OnDialogRaised; // register with an event
        }
        await base.OnAfterRenderAsync(firstRender);
    }


    public async void OnDialogRaised()
    {
        await InvokeAsync(StateHasChanged);
        var nameOfType = DialogService.DialogVortex.GetType().Name;
        var dialogId = "#" + nameOfType + "DialogView";
        try
        {
            await jsInterop.ShowTcoDialog(dialogId);
        }
        catch (TaskCanceledException)
        {
            //swallow TaskCanceledException,
            //throw;
        }

    }

}
