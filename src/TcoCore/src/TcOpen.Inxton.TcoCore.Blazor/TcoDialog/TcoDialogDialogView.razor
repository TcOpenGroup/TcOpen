@inherits RenderableViewModelComponentBase<TcoDialogDialogViewModel>
@namespace TcoCore
@inject JsInteropDialog jsInterop
@using System.ComponentModel;
<div class="modal fade" id="@DialogId" tabindex="-1" aria-labelledby="@_labelId" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="@_labelId">@ViewModel.Dialog._caption.Synchron</h5>
            </div>
            <div class="modal-body">
                @ViewModel.Dialog._text.Synchron
            </div>
            <div class="modal-footer">
                @if (ViewModel.Dialog._hasYes.Synchron)
                {
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="() => ViewModel.DialogAnswerYes()">Yes</button>
                }
                @if (ViewModel.Dialog._hasNo.Synchron)
                {
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="() => ViewModel.DialogAnswerNo()">No</button>
                }
                @if (ViewModel.Dialog._hasCancel.Synchron)
                {
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="() => ViewModel.DialogAnswerCancel()">Cancel</button>
                }

                @if (ViewModel.Dialog._hasOK.Synchron)
                {
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="() => ViewModel.DialogAnswerOk()">Ok</button>
                }
            </div>
        </div>
    </div>
</div>


@code {


    public string DialogId { get; set; }
    private string _labelId;
    private string _dialogCloseId;
    protected override void OnInitialized()
    {
        _labelId = "TcOpenDialogIdLabel";
        //DialogId = "TcoDialogDialogView";
        DialogId = "TcoDialogDialogView";
        _dialogCloseId = "#TcoDialogDialogView";

    }

    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    if (firstRender)
    //    {
    //        //ViewModel.Dialog._answer.CycliPropertyChanged += new PropertyChangedEventHandler(HandleAnswerChanged);
    //        //ViewModel.DialogCloseEvent += HandleAnswerChanged;
    //    }
    //    await base.OnAfterRenderAsync(firstRender);
    //}

    //protected async void HandleAnswerChanged()
    //{
    //    await jsInterop.HideTcoDialog(_dialogCloseId);
    //    await InvokeAsync(StateHasChanged);
    //}



}
