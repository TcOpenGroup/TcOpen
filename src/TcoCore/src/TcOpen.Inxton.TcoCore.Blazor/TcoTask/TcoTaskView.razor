@inherits RenderableViewModelComponentBase<TcoTaskViewModel>
@namespace TcoCore

<div class="d-flex flex-nowrap">


    @if (IsTaskRunning)
    {
        <button class="btn @ButtonClass " type="button" @onclick="@ExecuteTask">
            <span class="spinner-border spinner-border-sm invisible" role="status" aria-hidden="true"></span>
            <span>@ButtonCaption</span>
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
        </button>
    }
    else
    {
        <button class="btn @ButtonClass" type="button" disabled="@ViewModel.IsDisabled" @onclick="@ExecuteTask">
            <span class="spinner-border spinner-border-sm invisible" role="status" aria-hidden="true"></span>
            <span>@ButtonCaption</span>
            <span class="spinner-border spinner-border-sm invisible" role="status" aria-hidden="true"></span>
        </button>
    }


</div>

@code{
    [Parameter]
    public TcoTask Context { get; set; }
    public string StatusClass => ViewModel.Component._taskState.Synchron == 30 ? "btn-danger" : "btn-primary";

    public bool IsError => ViewModel.Component._taskState.Synchron == 30;

    public string ButtonClass => IsError ? "btn-danger" : "btn-primary";

    public Action ExecuteTask => ViewModel.Component._taskState.Cyclic switch
    {
        (short)eTaskState.Ready => () => ViewModel.Component.Execute(null),
        (short)eTaskState.Error => () => ViewModel.Component.Restore.Execute(null),
        (short)eTaskState.Busy => () => ViewModel.Component.Abort.Execute(null),
        (short)eTaskState.Requested => () => { }
        ,
        (short)eTaskState.Done => () => { }
    };

    protected override Task OnInitializedAsync()
    {
        if (ViewModel == null)
        {
            ViewModel = new TcoTaskViewModel() { Model = Context };
        }
        return base.OnInitializedAsync();
    }
}
