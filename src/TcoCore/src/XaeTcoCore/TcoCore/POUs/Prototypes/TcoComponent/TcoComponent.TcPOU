<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="TcoComponent" Id="{8eb0512f-b833-4c04-bec5-9d60e2cb723b}" SpecialFunc="None">
    <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Basic class for components.
		</summary>				
	</docu>	
~*)
FUNCTION_BLOCK ABSTRACT TcoComponent EXTENDS TcoObject IMPLEMENTS ITcoComponent
VAR
	{attribute 'hide'}
	_serviceContexCycle : ULINT;	
(*~
	<docu>
		<summary>
			True if component is in service mode.
		</summary>			
	</docu>	
~*)
	{attribute addProperty Name "<#In service mode#>"}
	{attribute clr [ReadOnly()]}
	_inServiceMode : BOOL;	
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[CheckIfIsInServiceMode();]]></ST>
    </Implementation>
    <Method Name="CheckIfIsInServiceMode" Id="{f6d65f87-28bb-0f70-23ad-cefd8ddb093d}">
      <Declaration><![CDATA[METHOD INTERNAL CheckIfIsInServiceMode 
VAR
	_myContextCycleCount : ULINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_myContextCycleCount := Context.StartCycleCount;
//When component.Service() is called "before" invoking its task _serviceContexCycle is equal to Context.StartCycleCount
//When component.Service() is called "after" invoking its task (_serviceContexCycle + 1) is equal to Context.StartCycleCount
//otherwise _serviceContexCycle should be lower then Context.StartCycleCount until Context.StartCycleCount overflow its range
//which should occur cca every 585 mil years at 1ms PLC task.    
_inServiceMode := _serviceContexCycle = _myContextCycleCount OR (_serviceContexCycle + 1) = _myContextCycleCount;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{85de5686-5b6c-0496-3ce9-dba560b52906}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	Parent : ITcoObject;
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.FB_init(bInitRetains, bInCopyCode, Parent);]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetSignalInfo" Id="{8a2c62ad-97e0-04b2-078e-47bb9ffb547c}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Gets symbol path of the variable that is associated to hardware I/O.
		</summary>				
	</docu>	
~*)
METHOD PROTECTED GetSignalInfo : TcoSignalInfo
VAR_INPUT
	(*~
	<docu>
		<summary>
			Size of the variable. Is typicaly determined by `SIZEOF` opreator: SIZEOF(Variable)
		</summary>				
	</docu>	
	~*)
	ioSIZE : UDINT;
	(*~
	<docu>
		<summary>
			Pointer to the variable is typically determined by `ADR` operator ADR(Variable)
		</summary>				
	</docu>	
	~*)
	pVARIABLE : POINTER TO ULINT;
END_VAR

VAR_STAT
	{attribute 'hide'}
	json : Tc3_JsonXml.FB_JsonReadWriteDatatype;		
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetSignalInfo.SymbolPath := json.GetSymbolNameByAddress(nData := ioSIZE, pData := pVARIABLE);]]></ST>
      </Implementation>
    </Method>
    <Property Name="IsService" Id="{76fe61a9-82d7-035a-11e3-97101beac97d}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Gets whether the component is in serviceable state. Serviceable state is when ```Service``` method is called cyclicaly.   
		</summary>			
	</docu>	
~*)
PROPERTY IsService : BOOL]]></Declaration>
      <Get Name="Get" Id="{c23442a0-b254-0ba9-01da-184a67a53561}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[CheckIfIsInServiceMode();
IsService := _inServiceMode;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Restore" Id="{d0c02f91-fc49-4476-8612-b6c1e2ed01ac}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Restores this instance to the Ready state. Can be called explicitly or from within one of the restore mechanisms.	
		</summary>			
	</docu>	
~*)
METHOD ABSTRACT Restore : ITcoRestorable


]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="Service" Id="{c320b900-ed98-4dbe-a90b-28679bad227e}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Executes the logic for manual-maintenance control.   
		</summary>			
	</docu>	
~*)
METHOD PUBLIC FINAL Service ]]></Declaration>
      <Implementation>
        <ST><![CDATA[_serviceContexCycle := Context.StartCycleCount;
ServiceMode();]]></ST>
      </Implementation>
    </Method>
    <Method Name="ServiceMode" Id="{68a60f6a-9b62-45e9-a23f-6251b47fa211}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
		    Custom service (manual, maintenance) logic.
			This method must be implemented in derived class.
		</summary>			
	</docu>	
~*)
METHOD PROTECTED ABSTRACT ServiceMode
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>