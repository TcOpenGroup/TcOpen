<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="TcoMessenger" Id="{bb89b26f-ec79-4812-bab7-3579b2b6d1be}" SpecialFunc="None">
    <Declaration><![CDATA[(*~
		<docu>
			<summary>
				Provides mechanism for delivering static messages to the supervising applications (SCADA/HMI).	
				<remarks>			
					<note type="important">
						Each messenger has a single placeholder for the message; it stores the most important message from the last context cycle. 
						If there are more messages in a single cycle for the same messenger then less important messages are discarded and replaced by 
						the message with the category of higher severity.	
					</note>
				</remarks>			 
			</summary>			
		
		</docu>
~*)
FUNCTION_BLOCK PUBLIC TcoMessenger IMPLEMENTS ITcoMessenger, ITcoMessageProperties
VAR			
	(*~
		<docu>
			<summary>
				Most important message of this instance of messenger; stores the most important message from the last context cycle. 
				If there are more messages in a single cycle for the same
				messenger then less important messages are discarded and replaced by the message with the category of higher severity.			 
			</summary>			
		</docu>
	~*)
	_mime : TcoMessage;
	_Parent : ITcoObject;
	{attribute clr [ReadOnly()]}
	_contextIdentity : ULINT;	
	{attribute 'hide'}
	_mds : ARRAY[0..MDS_MAX_INDEX] OF TcoMessageDigest;	
	{attribute 'hide'}
	_condition : eMessageCondition;	
END_VAR

VAR CONSTANT
	MDS_MAX_INDEX : INT := 10;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Messages" Id="{56442304-2644-4fe1-b5d1-eb5248dd12e5}" />
    <Method Name="Catastrophic" Id="{3ead99e7-d4fa-03f6-3060-81990c2076df}" FolderPath="Messages\">
      <Declaration><![CDATA[(*~
		<docu>
			<summary>
				Adds message of 'catastrophic' category to the message queue.
				Use this category when there is a situation when the device cannot continue operations due to irrecoverable failure.				 
			</summary>		
		</docu>
~*)
METHOD PUBLIC Catastrophic : ITcoMessageProperties
VAR_INPUT
	(*~
		<docu>
			<summary>
				Arbitrary message string.			 
			</summary>			
		</docu>
	~*)
	Message : STRING(TcoMessengerSettings.MAX_MESSAGE_TEXT_LENGHT);
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[Catastrophic := THIS^.Post(Message, eMessageCategory.Catastrophic);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Clear" Id="{640fefd4-a9aa-0de1-3f5c-cce4bd50449f}">
      <Declaration><![CDATA[(*~
		<docu>
			<summary>
				Clears the message content.
				<remarks>			
					<note type="important">
						This method is exposed for Rpc calls, for testing purposes. Rpc calls of this method must not be used in production code
					</note>
				</remarks>								 
			</summary>		
		</docu>
~*)
{attribute 'TcRpcEnable'}
METHOD Clear
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_mime.TimeStamp :=  DT#1970-01-01-00:00;
_mime.Text := '';
_mime.Identity := 0;
_mime.Category := eMessageCategory.All;
_mime.Cycle := 0;	
_mime.PerCycleCount := 0;
_mime.Persist := FALSE;	
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Compose" Id="{3447ad14-6768-48d6-b294-87e00174ef1e}">
      <Declaration><![CDATA[METHOD PROTECTED Compose : TcoMessage
VAR_INPUT
	Text : STRING(TcoMessengerSettings.MAX_MESSAGE_TEXT_LENGHT);
	Category : eMessageCategory;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF(_Parent <> 0 AND_THEN _Parent.Context <> 0 AND_THEN _Parent.Context.RealTimeClock <> 0) THEN
	Compose.TimeStamp :=  _Parent.Context.RealTimeClock.NowLocal();	
	Compose.Text := Text;
	Compose.Identity := _Parent.Identity;
	Compose.Category := Category;
	Compose.Cycle := _Parent.Context.StartCycleCount;
	Compose.MessageDigest := Digest(Text, THIS^._Parent.Context.Environment.Messaging.MessageDigestMethod);
END_IF;




]]></ST>
      </Implementation>
    </Method>
    <Method Name="Critical" Id="{a9264967-6c30-0c25-362d-a0380aaea992}" FolderPath="Messages\">
      <Declaration><![CDATA[(*~
		<docu>
			<summary>
				Adds message of 'critical' category to the message queue.
				Use this category when a critical error occured, that is not recoverable by the means of software (reset/restore) and a detailed inspection is required.				 
			</summary>		
		</docu>
~*)
METHOD PUBLIC Critical : ITcoMessageProperties
VAR_INPUT
	(*~
		<docu>
			<summary>
				Arbitrary message string.			 
			</summary>			
		</docu>
	~*)
	Message : STRING(TcoMessengerSettings.MAX_MESSAGE_TEXT_LENGHT);
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[Critical := THIS^.Post(Message, eMessageCategory.Critical);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Debug" Id="{bd0230f7-b5de-4707-ba4a-f8b17cc23976}" FolderPath="Messages\">
      <Declaration><![CDATA[(*~
		<docu>
			<summary>
				Adds message of 'debug' category to the message queue.	
			    Use when you need to report debug information for you as programmer. 			 
			</summary>		
		</docu>
~*)
METHOD PUBLIC Debug : ITcoMessageProperties
VAR_INPUT
	(*~
		<docu>
			<summary>
				Arbitrary message string.			 
			</summary>			
		</docu>
	~*)
	Message : STRING(TcoMessengerSettings.MAX_MESSAGE_TEXT_LENGHT);
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[Debug := THIS^.Post(Message, eMessageCategory.Debug);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Digest" Id="{de6a9eab-3c62-0e43-3529-2cc01fda6c4e}">
      <Declaration><![CDATA[METHOD Digest : DWORD
VAR_INPUT
	Text : Tc2_System.T_MaxString;
	inDigestType : eMessageDigestMethod;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE inDigestType OF
	eMessageDigestMethod.CRC8 :
		Digest := TcoCRC_8(Text);
	eMessageDigestMethod.CRC16 :
		Digest := TcoCRC_16(Text);
	eMessageDigestMethod.CRC32 :
		Digest := TcoCRC_32(Text);
	ELSE
		Digest := 0;
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="Error" Id="{dc14c403-f11e-4200-ac36-567c3d997bf6}" FolderPath="Messages\">
      <Declaration><![CDATA[(*~
		<docu>
			<summary>
				Adds message of 'error' category to the message queue.
				Use this categoty when there is a failure that cannot be immediately recovered and an intervention is needed. This is typically a situation when a device fails
				to deliver expected result. 
				Do not use this category to report information about failed process like measurement or detection.				 
			</summary>						
		</docu>
~*)
METHOD PUBLIC Error : ITcoMessageProperties
VAR_INPUT
	(*~
		<docu>
			<summary>
				Arbitrary message string.			 
			</summary>			
		</docu>
	~*)
	Message : STRING(TcoMessengerSettings.MAX_MESSAGE_TEXT_LENGHT);
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[Error := THIS^.Post(Message, eMessageCategory.Error);]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{23bbd1ba-9be3-4c0b-a177-bc9de93be447}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	Parent : ITcoObject;
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[_Parent := Parent;
_contextIdentity := Parent.Identity;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Info" Id="{d1f4840f-86c5-482b-8fb7-443b9b1c585c}" FolderPath="Messages\">
      <Declaration><![CDATA[(*~
		<docu>
			<summary>
				Adds message of 'information' category to the message queue.	
				Use when you want to deliver information to the user, that has only informative character and does not adversely affect a process.			 
			</summary>			
		</docu>
~*)
METHOD PUBLIC Info  : ITcoMessageProperties
VAR_INPUT
	(*~
		<docu>
			<summary>
				Arbitrary message string.			 
			</summary>			
		</docu>
	~*)
	Message : STRING(TcoMessengerSettings.MAX_MESSAGE_TEXT_LENGHT);
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[Info := THIS^.Post(Message, eMessageCategory.Info);]]></ST>
      </Implementation>
    </Method>
    <Method Name="LogMessage" Id="{0b6b2fe7-cb26-02a6-0b72-2570a4f5cb53}">
      <Declaration><![CDATA[METHOD PRIVATE LogMessage 
VAR_IN_OUT
	inMessage : TcoMessage;
END_VAR
VAR
	_index : INT;
	_freeIndex : INT;	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE _Parent.Context.Environment.Messaging.MessengerLoggingMethod OF
	eMessengerLogMethod.OnEventRisen :
        IF(_Parent.Context.Environment.Messaging.MessageDigestMethod = eMessageDigestMethod.NONE) THEN
			inMessage.MessageDigest := Digest(inMessage.Text, eMessageDigestMethod.CRC32);
		END_IF
	
		_freeIndex := 0;
		    
		FOR _index := 0 TO MDS_MAX_INDEX DO
			IF(_mds[_index].Cycle = inMessage.Cycle - 1 OR _mds[_index].Cycle = inMessage.Cycle) 
			AND_THEN (_mds[_index].Digest = inMessage.MessageDigest)
			AND_THEN (_mds[_index].Category = inMessage.Category) THEN			
			    _mds[_index].Cycle := inMessage.Cycle;				
				RETURN;											
			END_IF	
			IF((_mds[_index].Cycle <> inMessage.Cycle - 1) 
			   AND (_mds[_index].Cycle <> inMessage.Cycle)) THEN
				_freeIndex := _index;
			END_IF
		END_FOR
		
		IF(_freeIndex <= THIS^.MDS_MAX_INDEX) THEN
			_mds[_freeIndex].Digest := inMessage.MessageDigest;
			_mds[_freeIndex].Cycle := inMessage.Cycle;
			_mds[_freeIndex].Category := inMessage.Category;
			_Parent.Context.Logger.PushMessage(inMessage);		
		END_IF;
	eMessengerLogMethod.Continuous:
	    _Parent.Context.Logger.PushMessage(inMessage);
END_CASE

		]]></ST>
      </Implementation>
    </Method>
    <Method Name="Notify" Id="{1595dfe7-5719-459e-bdf2-0e7976c85511}" FolderPath="Messages\">
      <Declaration><![CDATA[(*~
		<docu>
			<summary>
				Adds message of 'notification' category to the message queue.
				Use this category when you want to report a notification that may be of interest to the user, but does not adveresly affect a process.			 
			</summary>				
		</docu>
~*)
METHOD Notify : ITcoMessageProperties
VAR_INPUT
	(*~
		<docu>
			<summary>
				Arbitrary message string.			 
			</summary>			
		</docu>
	~*)
	Message : STRING(TcoMessengerSettings.MAX_MESSAGE_TEXT_LENGHT);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Notify := THIS^.Post(Message, eMessageCategory.Notification);]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnCondition" Id="{1097de5a-fc1b-0b3c-3c7e-2650c89e121b}">
      <Declaration><![CDATA[METHOD OnCondition : ITcoMessages
VAR_INPUT
	inCondition : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (inCondition) THEN
	_condition := eMessageCondition.Active;
ELSE
	_condition := eMessageCondition.Inactive;
END_IF

OnCondition := THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Persist" Id="{03e6fdf6-0b38-029d-1385-1c4ef7329d4e}">
      <Declaration><![CDATA[{attribute 'hide'}
{attribute 'obsolete' := 'This method must be called exclusively over ITcoMessageProperties interface'} 
METHOD Persist : ITcoMessageProperties

]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF(_Parent <> 0 AND_THEN _Parent.Context <> 0) THEN
	IF(_mime.Cycle = _Parent.Context.StartCycleCount)THEN
		_mime.Persist := TRUE;
	END_IF;
END_IF;

Persist := THIS^;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Post" Id="{7e1c7e2b-5612-469e-9139-08754fd973ea}">
      <Declaration><![CDATA[(*~
		<docu>
			<summary>
				Creates message of given category for this messenger.				 
			</summary>				
		</docu>
~*)
METHOD PUBLIC Post : ITcoMessageProperties
VAR_INPUT
	(*~
		<docu>
			<summary>
				Arbitrary message string.			 
			</summary>			
		</docu>
	~*)
	Message : STRING(TcoMessengerSettings.MAX_MESSAGE_TEXT_LENGHT);
	(*~
		<docu>
			<summary>
				Message category.			 
			</summary>			
		</docu>
	~*)
	Category : eMessageCategory;	
END_VAR

VAR
	_wouldBeMime : TcoMessage;
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[Post := THIS^;
IF(_condition > eMessageCondition.Active) THEN
	_condition := eMessageCondition.Unconditional;	
	RETURN;
END_IF

_condition := eMessageCondition.Unconditional;



IF(_Parent <> 0 AND_THEN _Parent.Context <> 0 AND_THEN _Parent.Context.Environment <> 0 AND_THEN _Parent.Context.Environment.Messaging <> 0) THEN
	IF(Category < THIS^._Parent.Context.Environment.Messaging.MinLevel
	  OR _Parent.Context.Environment.Messaging.IsSuspended) THEN
		RETURN;
	END_IF; 	
		
	IF (NOT _mime.Persist) THEN 
		_mime.PerCycleCount := _mime.PerCycleCount + 1;
		_wouldBeMime := Compose(Message, Category);		
		_wouldBeMime.PerCycleCount := _mime.PerCycleCount;		
	ELSIF(_mime.Persist 
	AND_THEN (_mime.Text <>  Message OR _mime.Category <> Category))
	THEN		
		IF(	_mime.PerCycleCount < 255) THEN	
			_mime.PerCycleCount := _mime.PerCycleCount + 1;	
		END_IF;
	END_IF;		
	
    // Same cycle filter for most important messge.
	IF(_mime.Cycle = _Parent.Context.StartCycleCount) THEN		 	
		IF(_wouldBeMime.Category > _mime.Category) 
		AND (NOT _mime.Persist) THEN	 
			_mime := _wouldBeMime;
		END_IF;
	ELSE
	// Different cycle					  	    		
		IF (NOT _mime.Persist) THEN
			_wouldBeMime.PerCycleCount := 1;  													
			_mime := _wouldBeMime;										
		END_IF;
	END_IF;	

	LogMessage(_wouldBeMime);		
END_IF;	



]]></ST>
      </Implementation>
    </Method>
    <Method Name="Programming" Id="{1f1b6a21-6158-44a7-b79e-b3fcea42c4e1}" FolderPath="Messages\">
      <Declaration><![CDATA[(*~
		<docu>
			<summary>
				Adds message of 'programming error' category to the message queue.	
				Use this category to inform about a possible programming error, defect in settings or missing information at a level of programming or system or process settings.			 
			</summary>				
		</docu>
~*)
METHOD PUBLIC Programming : ITcoMessageProperties
VAR_INPUT
	(*~
		<docu>
			<summary>
				Arbitrary message string.			 
			</summary>			
		</docu>
	~*)
	Message : STRING(TcoMessengerSettings.MAX_MESSAGE_TEXT_LENGHT);
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[Programming := THIS^.Post(Message, eMessageCategory.ProgrammingError);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Trace" Id="{5a17dee2-c171-4127-9ee1-30d4a06a53bf}" FolderPath="Messages\">
      <Declaration><![CDATA[(*~
		<docu>
			<summary>
				Adds message of 'trace' category to the message queue.	
				Use when you need to track detailed information about internal states of the program for detailed visibility. 
				This is lowest level of category that can be used in production, for detailed observation of PLC program.			 
			</summary>					
		</docu>
~*)
METHOD PUBLIC Trace : ITcoMessageProperties
VAR_INPUT
	(*~
		<docu>
			<summary>
				Arbitrary message string.			 
			</summary>			
		</docu>
	~*)
	Message : STRING(TcoMessengerSettings.MAX_MESSAGE_TEXT_LENGHT);
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[Trace := THIS^.Post(Message, eMessageCategory.Trace);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Warning" Id="{dd00674c-7475-44d4-8400-894897951e0b}" FolderPath="Messages\">
      <Declaration><![CDATA[(*~
		<docu>
			<summary>
				Adds message of 'warning' category to the message queue.
				Use this category when you want to report to the user an information about a possible problem, that may adversly affect a process.
				Information in this cateogory aims to help the user to identify a problem, the cause of such problem does not necessarily stops the process.				 
			</summary>					
		</docu>
~*)
METHOD PUBLIC Warning  : ITcoMessageProperties
VAR_INPUT
	(*~
		<docu>
			<summary>
				Arbitrary message string.			 
			</summary>			
		</docu>
	~*)
	Message : STRING(TcoMessengerSettings.MAX_MESSAGE_TEXT_LENGHT);
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[Warning := THIS^.Post(Message, eMessageCategory.Warning);]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>