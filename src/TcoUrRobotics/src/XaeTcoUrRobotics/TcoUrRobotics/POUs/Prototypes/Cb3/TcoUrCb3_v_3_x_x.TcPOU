<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="TcoUrCb3_v_3_x_x" Id="{d031f3da-9a29-086d-05ed-d517bd95922b}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK TcoUrCb3_v_3_x_x EXTENDS TcoIo.TcoPnIoComponent  IMPLEMENTS TcoAbstractions.ITcoRobotics
VAR_IN_OUT
    inoData : TcoUrCb3_IO_v_3_x_x;
END_VAR
VAR
    

	{attribute addProperty Name "<#Status#>"}
    {attribute clr [ReadOnly()]}
    _status : TcoUrRobotics_Status_v_1_x_x;
	{attribute addProperty Name "<#Control#>"}
	_control 	: TcoUrRobotics_Control_v_1_x_x;
	{attribute addProperty Name "<#Config#>"}
    _config : TcoUrRobotics_Config_v_1_x_x;
	{attribute addProperty Name "<#PN Error#>"}
    {attribute clr [ReadOnly()]}
    _pnError : BOOL;

	_someTaskIsActive: BOOL;

	_stopTasksAreActive: BOOL;
END_VAR
VAR
	{attribute addProperty Name "<#Start at Main#>"}
    _startAtMainTask : StartAtMainTask(THIS^);
	
	 {attribute addProperty Name "<#Start motors and program#>"}
    _startMotorsAndProgramTask : StartMotorsAndProgramTask(THIS^);
	
	 {attribute addProperty Name "<#Start program#>"}
    _startProgramTask : StartProgramTask(THIS^);
	
	{attribute addProperty Name "<#Start motors#>"}
    _startMotorsTask : StartMotorsTask(THIS^);
	
  	{attribute addProperty Name "<#Start movements#>"}
    _startMovementsTask : StartMovementsTask(THIS^);
	
	{attribute addProperty Name "<#Start motors program and movements#>"}
    _startMotorsProgramAndMovementsTask : StartMotorsProgramAndMovementsTask(THIS^);
	
  	
	
	
	 {attribute addProperty Name "<#Stop movements#>"}
    _stopMovementsTask : StopMovementsTask(THIS^);

	 {attribute addProperty Name "<#Stop movenents and program#>"}
    _stopMovementsAndProgramTask : StopMovementsAndProgramTask(THIS^);
	
	{attribute addProperty Name "<#Stop program#>"}
    _stopProgramTask : StopProgramTask(THIS^);
	

    {attribute addProperty Name "<#Restore#>"}
    _restoreTask : TcoCore.TcoTask(THIS^);
	

  
   

  

END_VAR

VAR
	{attribute 'hide'}
	_sb : TcoCore.StringBuilder;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT __ISVALIDREF(inoData) THEN
    Messenger.Post('Invalid reference', TcoCore.eMessageCategory.ProgrammingError);
    RETURN;
END_IF

SUPER^(inPnIoBoxState := THIS^.inoData.PnIoBoxState,inPnIoBoxDiag := THIS^.inoData.PnIoBoxDiag);
_pnError:= not _profinetReady;


UpdateStatus();
_stopTasksAreActive :=  _stopMovementsTask.Busy 
			AND _stopMovementsAndProgramTask.Busy 
			AND _stopProgramTask.Busy;
			
_startAtMainTask.Enabled:=NOT _stopTasksAreActive;
_startAtMainTask(inoConfig:=_config,inoControl:=_control,inoStatus:=_status);


_startProgramTask.Enabled:=NOT _stopTasksAreActive;
_startProgramTask(inoConfig:=_config,inoControl:=_control,inoStatus:=_status);

_startMotorsTask.Enabled:=NOT _stopTasksAreActive AND NOT _startMotorsProgramAndMovementsTask.Busy AND NOT _startMotorsAndProgramTask.Busy;
_startMotorsTask(inoConfig:=_config,inoControl:=_control,inoStatus:=_status);

_startMotorsAndProgramTask.Enabled:=NOT _stopTasksAreActive AND NOT _startProgramTask.Busy AND NOT _startMotorsTask.Busy;
_startMotorsAndProgramTask(inoConfig:=_config,inoControl:=_control,inoStatus:=_status);

_startMovementsTask.Enabled:=NOT _startMotorsProgramAndMovementsTask.Busy ;
_startMovementsTask(inoConfig:=_config,inoControl:=_control,inoStatus:=_status);

_startMotorsProgramAndMovementsTask.Enabled:=NOT _startMovementsTask.Busy  ;
_startMotorsProgramAndMovementsTask(refStartMotorsAndProgramTask:=_startMotorsAndProgramTask, inoConfig:=_config,inoControl:=_control,inoStatus:=_status);


_stopMovementsTask.Enabled:=TRUE;
_stopMovementsTask(inoConfig:=_config,inoControl:=_control,inoStatus:=_status);


_stopProgramTask.Enabled:=TRUE;
_stopProgramTask(inoConfig:=_config,inoControl:=_control,inoStatus:=_status);

_stopMovementsAndProgramTask.Enabled:=NOT _stopProgramTask.Busy AND NOT _stopProgramTask.Busy;
_stopMovementsAndProgramTask(inoConfig:=_config,inoControl:=_control,inoStatus:=_status);



//*************RESTORE********************

_restoreTask.Enabled := TRUE;
IF _restoreTask.Execute() THEN
	Restore();
	_restoreTask.DoneWhen(TRUE);
END_IF
//****************************************

_someTaskIsActive := _startAtMainTask.Busy 
					OR _startMotorsAndProgramTask.Busy
					OR _startMovementsTask.Busy
					OR _startMovementsTask.Busy
					OR _stopMovementsTask.Busy
					OR _stopMovementsAndProgramTask.Busy
					OR _stopProgramTask.Busy;
					

//do not publish diagnostic message when component is not used
IF _someTaskIsActive THEN

	IF(_status.State.Inputs.Safety.ES_IsEmergencyStopped) THEN
		Messenger.Error('<#Emergency stop active#>');
	END_IF;
	IF(NOT _status.State.Inputs.Safety.ST_IsStoppedDueSafety) THEN
		Messenger.Warning('<#Stopped due safety#>');
	END_IF;

  
END_IF;
//
//IF(_status.State.Error) THEN Messenger.Error(_sb.Clear().Append('<#Drive error no #>').Append(UDINT_TO_STRING(_status.State.EventId)).Append(' |[[0]AdvancedDiagnosticMessage]|').Append('.').Append('For details see the service mode').ToString()); END_IF;
//

UpdateControl();]]></ST>
    </Implementation>
    <Folder Name="Operations" Id="{a7e56917-9777-06c2-0edc-d4201ad4bcbd}" />
    <Folder Name="Task" Id="{a0f3d73a-bed2-0c29-1733-4472d231e2ba}" />
    <Property Name="Config" Id="{32564030-fcb6-09f1-1959-e8cbab66db75}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Gets the configuration of the IRC 5. 					
		</summary>			
	</docu>	
~*)
PROPERTY Config : REFERENCE TO TcoUrRobotics_Config_v_1_x_x]]></Declaration>
      <Get Name="Get" Id="{5b423a85-62df-065a-0ea3-e42fd305e388}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Config REF= _config;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Restore" Id="{9b81539c-c0c3-070d-3d99-7b7c05b646b2}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Restores this instance to the Ready state. Can be called explicitly or from within one of the restore mechanisms.	
		</summary>			
	</docu>	
~*)
METHOD Restore : ITcoRestorable]]></Declaration>
      <Implementation>
        <ST><![CDATA[RestoreTasks();
_control.ActionNo:=255;
_control.GlobalSpeed:=0;
_control.ToolNo:=0;
_control.WorkobjectNo:=0;
_control.PointNo:=0;
_control.UserSpecSpeed1:=0;
_control.UserSpecSpeed2:=0;
_control.Coordinates.X:=0;
_control.Coordinates.Y:=0;
_control.Coordinates.Z:=0;
_control.Coordinates.Rx:=0;
_control.Coordinates.Ry:=0;
_control.Coordinates.Rz:=0;
_control.Start :=FALSE;
_control.Stop:=FALSE;
_control.Pause:=FALSE;
_control.RunAction:=FALSE;
_control.MotorOn:=FALSE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="RestoreTasks" Id="{473a87ef-3811-0735-37e0-f15c4e1efe87}">
      <Declaration><![CDATA[METHOD INTERNAL RestoreTasks 
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//_resetTask.Restore();
_startAtMainTask.Restore();
_startMovementsTask.Restore();
_startProgramTask.Restore();
_startMotorsTask.Restore();
_startMotorsProgramAndMovementsTask.Restore();
_stopMovementsTask.Restore();
_startMotorsAndProgramTask.Restore();
_stopMovementsAndProgramTask.Restore();
_stopProgramTask.Restore();]]></ST>
      </Implementation>
    </Method>
    <Method Name="ServiceMode" Id="{7e47a180-7edd-0b90-2f94-67b97c0bcee3}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
		    Custom service (manual, maintenance) logic.
			This method must be implemented in derived class.
		</summary>			
	</docu>	
~*)
METHOD PROTECTED ServiceMode]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="StartAtMain" Id="{fbb76925-92f3-07dc-20b4-53fde61ff6df}" FolderPath="Operations\">
      <Declaration><![CDATA[METHOD PUBLIC StartAtMain : TcoCore.ITcoTaskStatus
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[StartAtMain:=_startAtMainTask.Invoke();]]></ST>
      </Implementation>
    </Method>
    <Property Name="StartAtMainTask" Id="{e55c4b67-598e-0a98-1b68-b1e51c1b1c8b}" FolderPath="Task\">
      <Declaration><![CDATA[PROPERTY StartAtMainTask : TcoCore.ITcoTaskStatus]]></Declaration>
      <Get Name="Get" Id="{91b01c63-c8a2-07c9-152c-e58b040ddbe0}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[StartAtMainTask := _startAtMainTask;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="StartMotors" Id="{d1ca4fa7-35e0-02d3-3bc0-9fb60c63b589}" FolderPath="Operations\">
      <Declaration><![CDATA[METHOD PUBLIC StartMotors : TcoCore.ITcoTaskStatus]]></Declaration>
      <Implementation>
        <ST><![CDATA[StartMotors:=_startMotorsTask.Invoke();]]></ST>
      </Implementation>
    </Method>
    <Method Name="StartMotorsAndProgram" Id="{064b5ecf-edce-06ec-32c1-812692f2d3be}" FolderPath="Operations\">
      <Declaration><![CDATA[METHOD StartMotorsAndProgram : TcoCore.ITcoTaskStatus
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[StartMotorsAndProgram := THIS^._startMotorsAndProgramTask.Invoke();]]></ST>
      </Implementation>
    </Method>
    <Property Name="StartMotorsAndProgramTask" Id="{b7a34e1e-fa92-025e-11e2-a88b24acf3b7}" FolderPath="Task\">
      <Declaration><![CDATA[PROPERTY StartMotorsAndProgramTask : TcoCore.ITcoTaskStatus]]></Declaration>
      <Get Name="Get" Id="{bc452ff4-6019-00ea-30f4-7dfcf026b5ce}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[StartMotorsAndProgramTask := _startMotorsAndProgramTask;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="StartMotorsProgramAndMovements" Id="{db9a1733-7781-051b-3b1f-b4543d06a322}" FolderPath="Operations\">
      <Declaration><![CDATA[METHOD PUBLIC StartMotorsProgramAndMovements : TcoCore.ITcoTaskStatus
VAR_INPUT
	inData : TcoRoboticsMovementsParams;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[StartMotorsProgramAndMovements:=_startMotorsProgramAndMovementsTask.InvokeWithParams(inData);]]></ST>
      </Implementation>
    </Method>
    <Property Name="StartMotorsProgramAndMovementsTask" Id="{82a71fed-845d-036b-339d-24cc600423a6}" FolderPath="Task\">
      <Declaration><![CDATA[PROPERTY StartMotorsProgramAndMovementsTask : TcoCore.ITcoTaskStatus]]></Declaration>
      <Get Name="Get" Id="{1e6c3896-b386-0465-0559-d0a8ce3f1e5c}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[StartMotorsProgramAndMovementsTask := _startMotorsProgramAndMovementsTask;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="StartMotorsTask" Id="{f4a2a5c7-f1a4-0ade-01a9-2bf029174194}" FolderPath="Task\">
      <Declaration><![CDATA[PROPERTY StartMotorsTask : TcoCore.ITcoTaskStatus]]></Declaration>
      <Get Name="Get" Id="{4c9898cf-603f-0459-0d67-03a778626498}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[StartMotorsTask := _startMotorsTask;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="StartMovements" Id="{d0b92498-12fb-0895-3da0-4801f25504b9}" FolderPath="Operations\">
      <Declaration><![CDATA[METHOD PUBLIC StartMovements : TcoCore.ITcoTaskStatus
VAR_INPUT
	inData : TcoRoboticsMovementsParams;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[StartMovements:=_startMovementsTask.InvokeWithParams(inData);]]></ST>
      </Implementation>
    </Method>
    <Property Name="StartMovementsTask" Id="{76e24ac3-9dc1-0652-24d6-27597674dfa6}" FolderPath="Task\">
      <Declaration><![CDATA[PROPERTY StartMovementsTask : TcoCore.ITcoTaskStatus]]></Declaration>
      <Get Name="Get" Id="{cdacd81c-06d3-049b-1cc9-c3deac21efca}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[StartMovementsTask := _startMovementsTask;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="StartProgram" Id="{3cf512ff-ef31-0bfc-1a00-fba3a6922614}" FolderPath="Operations\">
      <Declaration><![CDATA[METHOD PUBLIC StartProgram : TcoCore.ITcoTaskStatus]]></Declaration>
      <Implementation>
        <ST><![CDATA[StartProgram:=_startProgramTask.Invoke();]]></ST>
      </Implementation>
    </Method>
    <Property Name="StartProgramTask" Id="{39104208-9118-056c-2249-b166593d2fd3}" FolderPath="Task\">
      <Declaration><![CDATA[PROPERTY StartProgramTask : TcoCore.ITcoTaskStatus]]></Declaration>
      <Get Name="Get" Id="{b089f0c9-47d6-0165-3f35-98100002392d}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[StartProgramTask := _startProgramTask;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Status" Id="{ed667bd6-c1ce-02d6-3d9b-fe627c241025}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Gets the status of the IRC5. 					
		</summary>			
	</docu>	
~*)
PROPERTY Status : REFERENCE TO TcoUrRobotics_Status_v_1_x_x]]></Declaration>
      <Get Name="Get" Id="{8f13f3fb-a02b-0d0e-08f2-5860ef01c28d}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Status REF= _status;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="StopMovements" Id="{7e2a81d9-5544-08b3-3bda-afe6f4f6b610}" FolderPath="Operations\">
      <Declaration><![CDATA[METHOD PUBLIC StopMovements : TcoCore.ITcoTaskStatus
VAR_INPUT
	inStopType : eTcoRoboticsStopType;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[StopMovements:=_stopMovementsTask.InvokeWithParams(inStopType);]]></ST>
      </Implementation>
    </Method>
    <Method Name="StopMovementsAndProgram" Id="{0476faa3-8a26-0395-1eeb-992e72adcb8e}" FolderPath="Operations\">
      <Declaration><![CDATA[METHOD PUBLIC StopMovementsAndProgram : TcoCore.ITcoTaskStatus
VAR_INPUT
	inStopType : eTcoRoboticsStopType;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[StopMovementsAndProgram:=_stopMovementsAndProgramTask.InvokeWithParams(inStopType);]]></ST>
      </Implementation>
    </Method>
    <Property Name="StopMovementsAndProgramTask" Id="{d85f84a4-77a8-0eac-0854-57923f2079dc}" FolderPath="Task\">
      <Declaration><![CDATA[PROPERTY StopMovementsAndProgramTask : TcoCore.ITcoTaskStatus]]></Declaration>
      <Get Name="Get" Id="{71a1f12d-dc22-0a11-0511-f4a148b9c6ce}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[StopMovementsAndProgramTask := _stopMovementsAndProgramTask;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="StopMovementsTask" Id="{ca854023-839a-00cd-0eb9-69329662bc3e}" FolderPath="Task\">
      <Declaration><![CDATA[PROPERTY StopMovementsTask : TcoCore.ITcoTaskStatus]]></Declaration>
      <Get Name="Get" Id="{229c8f28-96fa-0022-3b15-ff5800980b07}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[StopMovementsTask := _stopMovementsTask;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="StopProgram" Id="{fd6f3305-fb9b-0ba9-3289-df7b7e503463}" FolderPath="Operations\">
      <Declaration><![CDATA[METHOD PUBLIC StopProgram : TcoCore.ITcoTaskStatus
]]></Declaration>
      <Implementation>
        <ST><![CDATA[StopProgram:=_stopProgramTask.Invoke();]]></ST>
      </Implementation>
    </Method>
    <Property Name="StopProgramTask" Id="{97d83d76-6330-0735-08ff-ab0a3b1a4f69}" FolderPath="Task\">
      <Declaration><![CDATA[PROPERTY StopProgramTask : TcoCore.ITcoTaskStatus]]></Declaration>
      <Get Name="Get" Id="{c707ca93-cb9d-0e0b-22d8-eae88e9d513e}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[StopProgramTask := _stopProgramTask;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="UpdateControl" Id="{179cfbe8-0fd1-0ef9-2195-dc5488f41a6a}">
      <Declaration><![CDATA[METHOD INTERNAL UpdateControl
VAR_INPUT
END_VAR

VAR
	index: INT;
	offset: INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
//SYSTEM OUTPUTS
index := 0;
_control.Outputs.Reg1.Bits[index] := _control.Start;
index := index + 1;
_control.outputs.Reg1.Bits[index] := _control.Stop;
index := index + 1;
_control.outputs.Reg1.Bits[index] := _control.Pause;
index := index + 1;
_control.outputs.Reg1.Bits[index] := _control.MotorOn;
index := index + 1;
//_control.outputs.Reg1.Bits[index] := _control.RunAction;
//index := index + 1;

index := 8;
//Tool signals
_control.Outputs.Reg1.Bits[index] := _control.Tool_1_Retract;
index := index + 1;
_control.outputs.Reg1.Bits[index] := _control.Tool_1_Extend;
index := index + 1;
_control.outputs.Reg1.Bits[index] := _control.Tool_2_Retract;
index := index + 1;
_control.outputs.Reg1.Bits[index] := _control.Tool_2_Extend;
index := index + 1;
_control.outputs.Reg1.Bits[index] := _control.Tool_3_Retract;
index := index + 1;
_control.outputs.Reg1.Bits[index] := _control.Tool_3_Extend;
index := index + 1;
_control.outputs.Reg1.Bits[index] := _control.Tool_4_Retract;
index := index + 1;
_control.outputs.Reg1.Bits[index] := _control.Tool_4_Extend;
index := index + 1;

//master mode  such as manual/auto ....
index := 0;
_control.Outputs.Reg1.Ints[index] := _control.MasterMode;
//zone
index := index + 1;
_control.Outputs.Reg1.Ints[index] := _control.Zone;
//position
index := index + 1;
_control.Outputs.Reg1.Ints[index] := _control.InPosition;

//
//Movement parameters
index := index + 1;
_control.Outputs.Reg1.Ints[index] := _control.ActionNo;
index := index + 1;
_control.Outputs.Reg1.Ints[index] := _control.GlobalSpeed;
index := index + 1;
_control.Outputs.Reg1.Ints[index] := _control.ToolNo;
index := index + 1;
_control.Outputs.Reg1.Ints[index] := _control.WorkobjectNo;
index := index + 1;
_control.Outputs.Reg1.Ints[index] := _control.PointNo;

index := 0;
_control.Outputs.Reg1.Floats[index] := _control.UserSpecSpeed1;
index := index + 1;
_control.Outputs.Reg1.Floats[index] := _control.UserSpecSpeed2;

index := index + 1;
////Coordinates
_control.Outputs.Reg1.Floats[index] := _control.Coordinates.X / 1000;
index := index + 1;
_control.Outputs.Reg1.Floats[index] := _control.Coordinates.Y / 1000;
index := index + 1;
_control.Outputs.Reg1.Floats[index] := _control.Coordinates.Z / 1000;

index := index + 1;
_control.Outputs.Reg1.Floats[index] := DEG_TO_RAD(_control.Coordinates.Rx);
index := index + 1;
_control.Outputs.Reg1.Floats[index] := DEG_TO_RAD(_control.Coordinates.Ry);
index := index + 1;
_control.Outputs.Reg1.Floats[index] := DEG_TO_RAD(_control.Coordinates.Rz);

//st_URO_CB3_O2TSpeedData => 8_O2T Robot IO
index := 0;
inoData.Out.RobotIO.bArray[index].0 := _control.Outputs.Speed.SSM_SpeedSliderFractionMask;
index := index + 4; //Reserve
TcoUtilities.TcoRealToBytes(TcoUtilities.eTcoDataFormat.BigEndian,
    _control.Outputs.Speed.SpeedSliderFraction / 100.0,
    inoData.Out.RobotIO.bArray[index],
    inoData.Out.RobotIO.bArray[index + 1],
    inoData.Out.RobotIO.bArray[index + 2],
    inoData.Out.RobotIO.bArray[index + 3]);

index := index + 4;

//st_URO_CB3_O2TIoData => 8_O2T Robot IO
inoData.Out.RobotIO.bArray[index] := _control.Outputs.IO.StandardDigitalOutputMask;
index := index + 1;
inoData.Out.RobotIO.bArray[index] := _control.Outputs.IO.ConfigurableDigitalOutputMask;
index := index + 1;
inoData.Out.RobotIO.bArray[index] := _control.Outputs.IO.StandardDigitalOutputs;
index := index + 1;
inoData.Out.RobotIO.bArray[index] := _control.Outputs.IO.ConfigurableDdigitalOutputs;
index := index + 1;
inoData.Out.RobotIO.bArray[index] := _control.Outputs.IO.AOM_AnalogOutputMask;
index := index + 1;
inoData.Out.RobotIO.bArray[index] := _control.Outputs.IO.AOT_AnalogOutputTypes;
index := index + 1;
inoData.Out.RobotIO.bArray[index] := _control.Outputs.IO.TDOM_ToolDigitalOutputMask;
index := index + 1;
inoData.Out.RobotIO.bArray[index] := _control.Outputs.IO.TDO_ToolDigitalOutput;
index := index + 1;
TcoUtilities.TcoRealToBytes(TcoUtilities.eTcoDataFormat.BigEndian,
    _control.Outputs.IO.StandardAnalogOutput[0],
    inoData.Out.RobotIO.bArray[index],
    inoData.Out.RobotIO.bArray[index + 1],
    inoData.Out.RobotIO.bArray[index + 2],
    inoData.Out.RobotIO.bArray[index + 3]);

index := index + 4;
TcoUtilities.TcoRealToBytes(TcoUtilities.eTcoDataFormat.BigEndian,
    _control.Outputs.IO.StandardAnalogOutput[1],
    inoData.Out.RobotIO.bArray[index],
    inoData.Out.RobotIO.bArray[index + 1],
    inoData.Out.RobotIO.bArray[index + 2],
    inoData.Out.RobotIO.bArray[index + 3]);

index := index + 4;

//st_URO_CB3_O2TRegData => 9_O2T General Purpose Registers 1
index := 0;

FOR offset := 0 TO 31 DO

    TcoUtilities.TcoSetBitInByte(_control.Outputs.Reg1.Bits[offset], offset MOD 8, inoData.Out.Reg1.bArray[index + (offset - (offset MOD 8)) / 8]);
END_FOR

index := index + 4;

FOR offset := 0 TO 11 DO
    TcoUtilities.TcoDintToBytes(TcoUtilities.eTcoDataFormat.BigEndian,
        _control.Outputs.Reg1.Ints[offset],
        inodata.Out.Reg1.bArray[index],
        inodata.Out.Reg1.bArray[index + 1],
        inodata.Out.Reg1.bArray[index + 2],
        inodata.Out.Reg1.bArray[index + 3]);

    index := index + 4;
END_FOR

FOR offset := 0 TO 11 DO
    TcoUtilities.TcoRealToBytes(TcoUtilities.eTcoDataFormat.BigEndian,
        _control.Outputs.Reg1.Floats[offset],
        inodata.Out.Reg1.bArray[index],
        inodata.Out.Reg1.bArray[index + 1],
        inodata.Out.Reg1.bArray[index + 2],
        inodata.Out.Reg1.bArray[index + 3]);

    index := index + 4;
END_FOR

//st_URO_CB3_O2TRegData => 10_O2T General Purpose Registers 2
index := 0;

FOR offset := 0 TO 31 DO

   TcoUtilities.TcoSetBitInByte(_control.Outputs.Reg2.Bits[offset], offset MOD 8, inoData.Out.Reg2.bArray[index + (offset - (offset MOD 8)) / 8]);
END_FOR

index := index + 4;

FOR offset := 0 TO 11 DO
    TcoUtilities.TcoDintToBytes(TcoUtilities.eTcoDataFormat.BigEndian,
        _control.Outputs.Reg2.Ints[offset],
        inodata.Out.Reg2.bArray[index],
        inodata.Out.Reg2.bArray[index + 1],
        inodata.Out.Reg2.bArray[index + 2],
        inodata.Out.Reg2.bArray[index + 3]);

    index := index + 4;
END_FOR

FOR offset := 0 TO 11 DO
    TcoUtilities.TcoRealToBytes(TcoUtilities.eTcoDataFormat.BigEndian,
        _control.Outputs.Reg2.Floats[offset],
        inodata.Out.Reg2.bArray[index],
        inodata.Out.Reg2.bArray[index + 1],
        inodata.Out.Reg2.bArray[index + 2],
        inodata.Out.Reg2.bArray[index + 3]);

    index := index + 4;
END_FOR
]]></ST>
      </Implementation>
    </Method>
    <Method Name="UpdateStatus" Id="{7fcc2e74-ce55-0095-383c-7f181f2f66b2}">
      <Declaration><![CDATA[METHOD INTERNAL UpdateStatus
VAR
    _message : STRING(125);

	tempOut: BYTE;
	index: INT;
	_bytes: DINT;
	offset: INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Inputs Low level
//INPUTS T2O STATE ROBOT => st_URO_CB3_T2OInfoData
index := 0;
Status.State.Inputs.Robot.ControllerMajorVersion := inoData.In.State.bArray[index];
index := index + 1;
Status.State.Inputs.Robot.ControllerMinorVersion := inoData.In.State.bArray[index];
index := index + 1;

index := 4; //index + 2; //reserve
Status.State.Inputs.Robot.RobotMode := inoData.In.State.bArray[index];
index := index + 1;
Status.State.Inputs.Robot.RealtimeMachineSeconds := inoData.In.State.bArray[index];
index := index + 1;
Status.State.Inputs.Robot.RealtimeMachineMilliseconds :=
    TcoUtilities.TcoBytesToUint(TcoUtilities.eTcoDataFormat.BigEndian, inoData.In.State.bArray[index], inoData.In.State.bArray[index + 1]);

//index := index + 2;
index := 8;
Status.State.Inputs.Robot.RealtimeMachineMinutes := inoData.In.State.bArray[index];
index := index + 1;
Status.State.Inputs.Robot.RealtimeMachineHours := inoData.In.State.bArray[index];
index := index + 1;
Status.State.Inputs.Robot.RealtimeMachineDays :=
    TcoUtilities.TcoBytesToUint(TcoUtilities.eTcoDataFormat.BigEndian, inoData.In.State.bArray[index], inoData.In.State.bArray[index + 1]);

//index := index + 2;

index := 12;
Status.State.Inputs.Robot.RobotCurrent := TcoUtilities.TcoBytesToReal(TcoUtilities.eTcoDataFormat.BigEndian,
    inoData.In.State.bArray[index],
    inoData.In.State.bArray[index + 1],
    inoData.In.State.bArray[index + 2],
    inoData.In.State.bArray[index + 3]);

//index := index + 4;

index := 16;
//INPUTS T2O STATE ROBOT => st_URO_CB3_T2OStateData
Status.State.Inputs.Robot.PW_IsPowerOn := inoData.In.State.bArray[index].0;
Status.State.Inputs.Robot.PR_IsProgramRunning := inoData.In.State.bArray[index].1;
Status.State.Inputs.Robot.TB_IsTeachButtonPressed := inoData.In.State.bArray[index].2;
Status.State.Inputs.Robot.PB_IsPowerButtonPressed := inoData.In.State.bArray[index].3;

index := 20;
Status.State.Inputs.Robot.SpeedSliderFraction := 100 *
    TcoUtilities.TcoBytesToReal(TcoUtilities.eTcoDataFormat.BigEndian,
        inoData.In.State.bArray[index],
        inoData.In.State.bArray[index + 1],
        inoData.In.State.bArray[index + 2],
        inoData.In.State.bArray[index + 3]);

//index := index + 4;

index := 24;
Status.State.Inputs.Safety.SafetyMode := inoData.In.State.bArray[index];

//index := index + 1;
index := 28;
Status.State.Inputs.Safety.NO_IsNormalMode := inoData.In.State.bArray[index].0;
Status.State.Inputs.Safety.RD_IsReducedMode := inoData.In.State.bArray[index].1;
Status.State.Inputs.Safety.PS_IsProtectiveStopped := inoData.In.State.bArray[index].2;
Status.State.Inputs.Safety.RC_IsRecoveryMode := inoData.In.State.bArray[index].3;
Status.State.Inputs.Safety.SS_IsSafeguardStopped := inoData.In.State.bArray[index].4;
Status.State.Inputs.Safety.SES_IsSystemEmergencyStopped := inoData.In.State.bArray[index].5;
Status.State.Inputs.Safety.RES_IsRobotEmergencyStopped := inoData.In.State.bArray[index].6;
Status.State.Inputs.Safety.ES_IsEmergencyStopped := inoData.In.State.bArray[index].7;
index := index + 1;
Status.State.Inputs.Safety.VL_IsViolation := inoData.In.State.bArray[index].0;
Status.State.Inputs.Safety.FT_IsFault := inoData.In.State.bArray[index].1;
Status.State.Inputs.Safety.ST_IsStoppedDueSafety := inoData.In.State.bArray[index].2;

//INPUTS T20 IO => st_URO_CB3_T2OIoStateData
index := 0;
Status.State.Inputs.IO.StandardDigitalInputs := inoData.In.IO.bArray[index];
index := index + 1;
Status.State.Inputs.IO.ConfigurableDigitalInputs := inoData.In.IO.bArray[index];
index := index + 1;
Status.State.Inputs.IO.StandardDigitalOutputs := inoData.In.IO.bArray[index];
index := index + 1;
Status.State.Inputs.IO.ConfigurableDigitalOutputs := inoData.In.IO.bArray[index];
Index := 4;
Status.State.Inputs.IO.AnalogIoTypes := inoData.In.IO.bArray[index];
index := index + 1;
index := 8; //reserve
Status.State.Inputs.IO.StandardAnalogInput[0] := TcoUtilities.TcoBytesToReal(TcoUtilities.eTcoDataFormat.BigEndian,
    inoData.In.IO.bArray[index],
    inoData.In.IO.bArray[index + 1],
    inoData.In.IO.bArray[index + 2],
    inoData.In.IO.bArray[index + 3]);

index := index + 4;
Status.State.Inputs.IO.StandardAnalogInput[1] := TcoUtilities.TcoBytesToReal(TcoUtilities.eTcoDataFormat.BigEndian,
    inoData.In.IO.bArray[index],
    inoData.In.IO.bArray[index + 1],
    inoData.In.IO.bArray[index + 2],
    inoData.In.IO.bArray[index + 3]);

index := index + 4;
Status.State.Inputs.IO.StandardAnalogOutput[0] := TcoUtilities.TcoBytesToReal(TcoUtilities.eTcoDataFormat.BigEndian,
    inoData.In.IO.bArray[index],
    inoData.In.IO.bArray[index + 1],
    inoData.In.IO.bArray[index + 2],
    inoData.In.IO.bArray[index + 3]);

index := index + 4;
Status.State.Inputs.IO.StandardAnalogOutput[1] := TcoUtilities.TcoBytesToReal(TcoUtilities.eTcoDataFormat.BigEndian,
    inoData.In.IO.bArray[index],
    inoData.In.IO.bArray[index + 1],
    inoData.In.IO.bArray[index + 2],
    inoData.In.IO.bArray[index + 3]);

index := index + 4;
Status.State.Inputs.IO.Current := TcoUtilities.TcoBytesToReal(TcoUtilities.eTcoDataFormat.BigEndian,
    inoData.In.IO.bArray[index],
    inoData.In.IO.bArray[index + 1],
    inoData.In.IO.bArray[index + 2],
    inoData.In.IO.bArray[index + 3]);

index := index + 4;

FOR offset := 0 TO 7 DO

    Status.State.Inputs.IO.Euromap67InputBits[offset] := TcoUtilities.TcoGetBitFromByte(inoData.In.IO.bArray[index], offset);
    Status.State.Inputs.IO.Euromap67InputBits[offset + 8] := TcoUtilities.TcoGetBitFromByte(inoData.In.IO.bArray[index + 1], offset);
    Status.State.Inputs.IO.Euromap67InputBits[offset + 16] := TcoUtilities.TcoGetBitFromByte(inoData.In.IO.bArray[index + 2], offset);
    Status.State.Inputs.IO.Euromap67InputBits[offset + 24] := TcoUtilities.TcoGetBitFromByte(inoData.In.IO.bArray[index + 3], offset);
END_FOR

index := index + 4;

FOR offset := 0 TO 7 DO
    Status.State.Inputs.IO.Euromap67OutputBits[offset] := TcoUtilities.TcoGetBitFromByte(inoData.In.IO.bArray[index], offset);
    Status.State.Inputs.IO.Euromap67OutputBits[offset + 8] := TcoUtilities.TcoGetBitFromByte(inoData.In.IO.bArray[index + 1], offset);
    Status.State.Inputs.IO.Euromap67OutputBits[offset + 16] := TcoUtilities.TcoGetBitFromByte(inoData.In.IO.bArray[index + 2], offset);
    Status.State.Inputs.IO.Euromap67OutputBits[offset + 24] := TcoUtilities.TcoGetBitFromByte(inoData.In.IO.bArray[index + 3], offset);
END_FOR

index := index + 4;
Status.State.Inputs.IO.Euromap6724Voltage := TcoUtilities.TcoBytesToReal(TcoUtilities.eTcoDataFormat.BigEndian,
    inoData.In.IO.bArray[index],
    inoData.In.IO.bArray[index + 1],
    inoData.In.IO.bArray[index + 2],
    inoData.In.IO.bArray[index + 3]);

index := index + 4;
Status.State.Inputs.IO.Euromap6724VCurrent := TcoUtilities.TcoBytesToReal(TcoUtilities.eTcoDataFormat.BigEndian,
    inoData.In.IO.bArray[index],
    inoData.In.IO.bArray[index + 1],
    inoData.In.IO.bArray[index + 2],
    inoData.In.IO.bArray[index + 3]);

index := index + 4;

//INPUTS T20 IO => st_URO_CB3_T2OToolStateData
Status.State.Inputs.Tool.ToolMode := inoData.In.IO.bArray[index];
index := index + 1;
Status.State.Inputs.Tool.TDI_ToolDigitalInputs := inoData.In.IO.bArray[index];
index := index + 1;
Status.State.Inputs.Tool.TDO_ToolDigitalOutputs := inoData.In.IO.bArray[index];
index := index + 1;
Status.State.Inputs.Tool.TAIT_ToolAnalogInputTypes := inoData.In.IO.bArray[index];
index := index + 1;
Status.State.Inputs.Tool.ToolAnalogInput[0] := TcoUtilities.TcoBytesToReal(TcoUtilities.eTcoDataFormat.BigEndian,
    inoData.In.IO.bArray[index],
    inoData.In.IO.bArray[index + 1],
    inoData.In.IO.bArray[index + 2],
    inoData.In.IO.bArray[index + 3]);

index := index + 4;
Status.State.Inputs.Tool.ToolAnalogInput[1] := TcoUtilities.TcoBytesToReal(TcoUtilities.eTcoDataFormat.BigEndian,
    inoData.In.IO.bArray[index],
    inoData.In.IO.bArray[index + 1],
    inoData.In.IO.bArray[index + 2],
    inoData.In.IO.bArray[index + 3]);

index := index + 4;
Status.State.Inputs.Tool.ToolOutputVoltage := TcoUtilities.TcoBytesToReal(TcoUtilities.eTcoDataFormat.BigEndian,
    inoData.In.IO.bArray[index],
    inoData.In.IO.bArray[index + 1],
    inoData.In.IO.bArray[index + 2],
    inoData.In.IO.bArray[index + 3]);

index := index + 4;
Status.State.Inputs.Tool.ToolCurrent := TcoUtilities.TcoBytesToReal(TcoUtilities.eTcoDataFormat.BigEndian,
    inoData.In.IO.bArray[index],
    inoData.In.IO.bArray[index + 1],
    inoData.In.IO.bArray[index + 2],
    inoData.In.IO.bArray[index + 3]);

index := index + 4;

//INPUTS T20 JOINT => st_URO_CB3_T2OJointsData
index := 0;
Status.State.Inputs.Joints.JointPosition[0] := RAD_TO_DEG(TcoUtilities.TcoBytesToReal(TcoUtilities.eTcoDataFormat.BigEndian,
        inoData.In.Joints.bArray[index],
        inoData.In.Joints.bArray[index + 1],
        inoData.In.Joints.bArray[index + 2],
        inoData.In.Joints.bArray[index + 3]));

index := index + 4;
Status.State.Inputs.Joints.JointPosition[1] := RAD_TO_DEG(TcoUtilities.TcoBytesToReal(TcoUtilities.eTcoDataFormat.BigEndian,
        inoData.In.Joints.bArray[index],
        inoData.In.Joints.bArray[index + 1],
        inoData.In.Joints.bArray[index + 2],
        inoData.In.Joints.bArray[index + 3]));

index := index + 4;
Status.State.Inputs.Joints.JointPosition[2] := RAD_TO_DEG(TcoUtilities.TcoBytesToReal(TcoUtilities.eTcoDataFormat.BigEndian,
        inoData.In.Joints.bArray[index],
        inoData.In.Joints.bArray[index + 1],
        inoData.In.Joints.bArray[index + 2],
        inoData.In.Joints.bArray[index + 3]));

index := index + 4;
Status.State.Inputs.Joints.JointPosition[3] := RAD_TO_DEG(TcoUtilities.TcoBytesToReal(TcoUtilities.eTcoDataFormat.BigEndian,
        inoData.In.Joints.bArray[index],
        inoData.In.Joints.bArray[index + 1],
        inoData.In.Joints.bArray[index + 2],
        inoData.In.Joints.bArray[index + 3]));

index := index + 4;
Status.State.Inputs.Joints.JointPosition[4] := RAD_TO_DEG(TcoUtilities.TcoBytesToReal(TcoUtilities.eTcoDataFormat.BigEndian,
        inoData.In.Joints.bArray[index],
        inoData.In.Joints.bArray[index + 1],
        inoData.In.Joints.bArray[index + 2],
        inoData.In.Joints.bArray[index + 3]));

index := index + 4;
Status.State.Inputs.Joints.JointPosition[5] := RAD_TO_DEG(TcoUtilities.TcoBytesToReal(TcoUtilities.eTcoDataFormat.BigEndian,
        inoData.In.Joints.bArray[index],
        inoData.In.Joints.bArray[index + 1],
        inoData.In.Joints.bArray[index + 2],
        inoData.In.Joints.bArray[index + 3]));

index := index + 4;
Status.State.Inputs.Joints.JointVelocity[0] := TcoUtilities.TcoBytesToReal(TcoUtilities.eTcoDataFormat.BigEndian,
    inoData.In.Joints.bArray[index],
    inoData.In.Joints.bArray[index + 1],
    inoData.In.Joints.bArray[index + 2],
    inoData.In.Joints.bArray[index + 3]);

index := index + 4;
Status.State.Inputs.Joints.JointVelocity[1] := TcoUtilities.TcoBytesToReal(TcoUtilities.eTcoDataFormat.BigEndian,
    inoData.In.Joints.bArray[index],
    inoData.In.Joints.bArray[index + 1],
    inoData.In.Joints.bArray[index + 2],
    inoData.In.Joints.bArray[index + 3]);

index := index + 4;
Status.State.Inputs.Joints.JointVelocity[2] := TcoUtilities.TcoBytesToReal(TcoUtilities.eTcoDataFormat.BigEndian,
    inoData.In.Joints.bArray[index],
    inoData.In.Joints.bArray[index + 1],
    inoData.In.Joints.bArray[index + 2],
    inoData.In.Joints.bArray[index + 3]);

index := index + 4;
Status.State.Inputs.Joints.JointVelocity[3] := TcoUtilities.TcoBytesToReal(TcoUtilities.eTcoDataFormat.BigEndian,
    inoData.In.Joints.bArray[index],
    inoData.In.Joints.bArray[index + 1],
    inoData.In.Joints.bArray[index + 2],
    inoData.In.Joints.bArray[index + 3]);

index := index + 4;
Status.State.Inputs.Joints.JointVelocity[4] := TcoUtilities.TcoBytesToReal(TcoUtilities.eTcoDataFormat.BigEndian,
    inoData.In.Joints.bArray[index],
    inoData.In.Joints.bArray[index + 1],
    inoData.In.Joints.bArray[index + 2],
    inoData.In.Joints.bArray[index + 3]);

index := index + 4;
Status.State.Inputs.Joints.JointVelocity[5] := TcoUtilities.TcoBytesToReal(TcoUtilities.eTcoDataFormat.BigEndian,
    inoData.In.Joints.bArray[index],
    inoData.In.Joints.bArray[index + 1],
    inoData.In.Joints.bArray[index + 2],
    inoData.In.Joints.bArray[index + 3]);

index := index + 4;
Status.State.Inputs.Joints.JointCurrent[0] := TcoUtilities.TcoBytesToReal(TcoUtilities.eTcoDataFormat.BigEndian,
    inoData.In.Joints.bArray[index],
    inoData.In.Joints.bArray[index + 1],
    inoData.In.Joints.bArray[index + 2],
    inoData.In.Joints.bArray[index + 3]);

index := index + 4;
Status.State.Inputs.Joints.JointCurrent[1] := TcoUtilities.TcoBytesToReal(TcoUtilities.eTcoDataFormat.BigEndian,
    inoData.In.Joints.bArray[index],
    inoData.In.Joints.bArray[index + 1],
    inoData.In.Joints.bArray[index + 2],
    inoData.In.Joints.bArray[index + 3]);

index := index + 4;
Status.State.Inputs.Joints.JointCurrent[2] := TcoUtilities.TcoBytesToReal(TcoUtilities.eTcoDataFormat.BigEndian,
    inoData.In.Joints.bArray[index],
    inoData.In.Joints.bArray[index + 1],
    inoData.In.Joints.bArray[index + 2],
    inoData.In.Joints.bArray[index + 3]);

index := index + 4;
Status.State.Inputs.Joints.JointCurrent[3] := TcoUtilities.TcoBytesToReal(TcoUtilities.eTcoDataFormat.BigEndian,
    inoData.In.Joints.bArray[index],
    inoData.In.Joints.bArray[index + 1],
    inoData.In.Joints.bArray[index + 2],
    inoData.In.Joints.bArray[index + 3]);

index := index + 4;
Status.State.Inputs.Joints.JointCurrent[4] := TcoUtilities.TcoBytesToReal(TcoUtilities.eTcoDataFormat.BigEndian,
    inoData.In.Joints.bArray[index],
    inoData.In.Joints.bArray[index + 1],
    inoData.In.Joints.bArray[index + 2],
    inoData.In.Joints.bArray[index + 3]);

index := index + 4;
Status.State.Inputs.Joints.JointCurrent[5] := TcoUtilities.TcoBytesToReal(TcoUtilities.eTcoDataFormat.BigEndian,
    inoData.In.Joints.bArray[index],
    inoData.In.Joints.bArray[index + 1],
    inoData.In.Joints.bArray[index + 2],
    inoData.In.Joints.bArray[index + 3]);

index := index + 4;
Status.State.Inputs.Joints.JointTemperature[0] := TcoUtilities.TcoBytesToReal(TcoUtilities.eTcoDataFormat.BigEndian,
    inoData.In.Joints.bArray[index],
    inoData.In.Joints.bArray[index + 1],
    inoData.In.Joints.bArray[index + 2],
    inoData.In.Joints.bArray[index + 3]);

index := index + 4;
Status.State.Inputs.Joints.JointTemperature[1] := TcoUtilities.TcoBytesToReal(TcoUtilities.eTcoDataFormat.BigEndian,
    inoData.In.Joints.bArray[index],
    inoData.In.Joints.bArray[index + 1],
    inoData.In.Joints.bArray[index + 2],
    inoData.In.Joints.bArray[index + 3]);

index := index + 4;
Status.State.Inputs.Joints.JointTemperature[2] := TcoUtilities.TcoBytesToReal(TcoUtilities.eTcoDataFormat.BigEndian,
    inoData.In.Joints.bArray[index],
    inoData.In.Joints.bArray[index + 1],
    inoData.In.Joints.bArray[index + 2],
    inoData.In.Joints.bArray[index + 3]);

index := index + 4;
Status.State.Inputs.Joints.JointTemperature[3] := TcoUtilities.TcoBytesToReal(TcoUtilities.eTcoDataFormat.BigEndian,
    inoData.In.Joints.bArray[index],
    inoData.In.Joints.bArray[index + 1],
    inoData.In.Joints.bArray[index + 2],
    inoData.In.Joints.bArray[index + 3]);

index := index + 4;
Status.State.Inputs.Joints.JointTemperature[4] := TcoUtilities.TcoBytesToReal(TcoUtilities.eTcoDataFormat.BigEndian,
    inoData.In.Joints.bArray[index],
    inoData.In.Joints.bArray[index + 1],
    inoData.In.Joints.bArray[index + 2],
    inoData.In.Joints.bArray[index + 3]);

index := index + 4;
Status.State.Inputs.Joints.JointTemperature[5] := TcoUtilities.TcoBytesToReal(TcoUtilities.eTcoDataFormat.BigEndian,
    inoData.In.Joints.bArray[index],
    inoData.In.Joints.bArray[index + 1],
    inoData.In.Joints.bArray[index + 2],
    inoData.In.Joints.bArray[index + 3]);

index := index + 4;
Status.State.Inputs.Joints.JointMode[0] := inoData.In.Joints.bArray[index];
index := index + 1;
Status.State.Inputs.Joints.JointMode[1] := inoData.In.Joints.bArray[index];
index := index + 1;
Status.State.Inputs.Joints.JointMode[2] := inoData.In.Joints.bArray[index];
index := index + 1;
Status.State.Inputs.Joints.JointMode[3] := inoData.In.Joints.bArray[index];
index := index + 1;
Status.State.Inputs.Joints.JointMode[4] := inoData.In.Joints.bArray[index];
index := index + 1;
Status.State.Inputs.Joints.JointMode[5] := inoData.In.Joints.bArray[index];
index := index + 1;

//INPUTS T20 TCP => st_URO_CB3_T2OTcpData
index := 0;
Status.State.Inputs.TCP.Postition.X := 1000.0 *
    TcoUtilities.TcoBytesToReal(TcoUtilities.eTcoDataFormat.BigEndian,
        inoData.In.TCP.bArray[index],
        inoData.In.TCP.bArray[index + 1],
        inoData.In.TCP.bArray[index + 2],
        inoData.In.TCP.bArray[index + 3]);

index := index + 4;
Status.State.Inputs.TCP.Postition.Y := 1000.0 *
    TcoUtilities.TcoBytesToReal(TcoUtilities.eTcoDataFormat.BigEndian,
        inoData.In.TCP.bArray[index],
        inoData.In.TCP.bArray[index + 1],
        inoData.In.TCP.bArray[index + 2],
        inoData.In.TCP.bArray[index + 3]);

index := index + 4;
Status.State.Inputs.TCP.Postition.Z := 1000.0 *
    TcoUtilities.TcoBytesToReal(TcoUtilities.eTcoDataFormat.BigEndian,
        inoData.In.TCP.bArray[index],
        inoData.In.TCP.bArray[index + 1],
        inoData.In.TCP.bArray[index + 2],
        inoData.In.TCP.bArray[index + 3]);

index := index + 4;
Status.State.Inputs.TCP.Postition.Rx := TcoUtilities.TcoBytesToReal(TcoUtilities.eTcoDataFormat.BigEndian,
        inoData.In.TCP.bArray[index],
        inoData.In.TCP.bArray[index + 1],
        inoData.In.TCP.bArray[index + 2],
        inoData.In.TCP.bArray[index + 3]);

index := index + 4;
Status.State.Inputs.TCP.Postition.Ry := TcoUtilities.TcoBytesToReal(TcoUtilities.eTcoDataFormat.BigEndian,
        inoData.In.TCP.bArray[index],
        inoData.In.TCP.bArray[index + 1],
        inoData.In.TCP.bArray[index + 2],
        inoData.In.TCP.bArray[index + 3]);

index := index + 4;
Status.State.Inputs.TCP.Postition.Rz := TcoUtilities.TcoBytesToReal(TcoUtilities.eTcoDataFormat.BigEndian,
        inoData.In.TCP.bArray[index],
        inoData.In.TCP.bArray[index + 1],
        inoData.In.TCP.bArray[index + 2],
        inoData.In.TCP.bArray[index + 3]);

index := index + 4;
Status.State.Inputs.TCP.Velocity.X := 1000.0 *
    TcoUtilities.TcoBytesToReal(TcoUtilities.eTcoDataFormat.BigEndian,
        inoData.In.TCP.bArray[index],
        inoData.In.TCP.bArray[index + 1],
        inoData.In.TCP.bArray[index + 2],
        inoData.In.TCP.bArray[index + 3]);

index := index + 4;
Status.State.Inputs.TCP.Velocity.Y := 1000.0 *
    TcoUtilities.TcoBytesToReal(TcoUtilities.eTcoDataFormat.BigEndian,
        inoData.In.TCP.bArray[index],
        inoData.In.TCP.bArray[index + 1],
        inoData.In.TCP.bArray[index + 2],
        inoData.In.TCP.bArray[index + 3]);

index := index + 4;
Status.State.Inputs.TCP.Velocity.Z := 1000.0 *
    TcoUtilities.TcoBytesToReal(TcoUtilities.eTcoDataFormat.BigEndian,
        inoData.In.TCP.bArray[index],
        inoData.In.TCP.bArray[index + 1],
        inoData.In.TCP.bArray[index + 2],
        inoData.In.TCP.bArray[index + 3]);

index := index + 4;
Status.State.Inputs.TCP.Velocity.Rx := TcoUtilities.TcoBytesToReal(TcoUtilities.eTcoDataFormat.BigEndian,
        inoData.In.TCP.bArray[index],
        inoData.In.TCP.bArray[index + 1],
        inoData.In.TCP.bArray[index + 2],
        inoData.In.TCP.bArray[index + 3]);

index := index + 4;
Status.State.Inputs.TCP.Velocity.Ry := TcoUtilities.TcoBytesToReal(TcoUtilities.eTcoDataFormat.BigEndian,
        inoData.In.TCP.bArray[index],
        inoData.In.TCP.bArray[index + 1],
        inoData.In.TCP.bArray[index + 2],
        inoData.In.TCP.bArray[index + 3]);

index := index + 4;
Status.State.Inputs.TCP.Velocity.Rz := TcoUtilities.TcoBytesToReal(TcoUtilities.eTcoDataFormat.BigEndian,
        inoData.In.TCP.bArray[index],
        inoData.In.TCP.bArray[index + 1],
        inoData.In.TCP.bArray[index + 2],
        inoData.In.TCP.bArray[index + 3]);

index := index + 4;
Status.State.Inputs.TCP.Force.X := TcoUtilities.TcoBytesToReal(TcoUtilities.eTcoDataFormat.BigEndian,
    inoData.In.TCP.bArray[index],
    inoData.In.TCP.bArray[index + 1],
    inoData.In.TCP.bArray[index + 2],
    inoData.In.TCP.bArray[index + 3]);

index := index + 4;
Status.State.Inputs.TCP.Force.Y := TcoUtilities.TcoBytesToReal(TcoUtilities.eTcoDataFormat.BigEndian,
    inoData.In.TCP.bArray[index],
    inoData.In.TCP.bArray[index + 1],
    inoData.In.TCP.bArray[index + 2],
    inoData.In.TCP.bArray[index + 3]);

index := index + 4;
Status.State.Inputs.TCP.Force.Z := TcoUtilities.TcoBytesToReal(TcoUtilities.eTcoDataFormat.BigEndian,
    inoData.In.TCP.bArray[index],
    inoData.In.TCP.bArray[index + 1],
    inoData.In.TCP.bArray[index + 2],
    inoData.In.TCP.bArray[index + 3]);

index := index + 4;
Status.State.Inputs.TCP.Torque.X := TcoUtilities.TcoBytesToReal(TcoUtilities.eTcoDataFormat.BigEndian,
    inoData.In.TCP.bArray[index],
    inoData.In.TCP.bArray[index + 1],
    inoData.In.TCP.bArray[index + 2],
    inoData.In.TCP.bArray[index + 3]);

index := index + 4;
Status.State.Inputs.TCP.Torque.Y := TcoUtilities.TcoBytesToReal(TcoUtilities.eTcoDataFormat.BigEndian,
    inoData.In.TCP.bArray[index],
    inoData.In.TCP.bArray[index + 1],
    inoData.In.TCP.bArray[index + 2],
    inoData.In.TCP.bArray[index + 3]);

index := index + 4;
Status.State.Inputs.TCP.Torque.Z := TcoUtilities.TcoBytesToReal(TcoUtilities.eTcoDataFormat.BigEndian,
    inoData.In.TCP.bArray[index],
    inoData.In.TCP.bArray[index + 1],
    inoData.In.TCP.bArray[index + 2],
    inoData.In.TCP.bArray[index + 3]);

index := index + 4;
Status.State.Inputs.TCP.TCP_ForceScalar := TcoUtilities.TcoBytesToReal(TcoUtilities.eTcoDataFormat.BigEndian,
    inoData.In.TCP.bArray[index],
    inoData.In.TCP.bArray[index + 1],
    inoData.In.TCP.bArray[index + 2],
    inoData.In.TCP.bArray[index + 3]);

index := index + 4;

//INPUTS T20 BITS => st_URO_CB3_T2OBitRegsData
index := 0;

FOR offset := 0 TO 7 DO
    Status.State.Inputs.Bits.Register[offset] := TcoUtilities.TcoGetBitFromByte(inoData.In.BitRegs.bArray[index], offset);
    Status.State.Inputs.Bits.Register[offset + 8] := TcoUtilities.TcoGetBitFromByte(inoData.In.BitRegs.bArray[index + 1], offset);
    Status.State.Inputs.Bits.Register[offset + 16] := TcoUtilities.TcoGetBitFromByte(inoData.In.BitRegs.bArray[index + 2], offset);
    Status.State.Inputs.Bits.Register[offset + 24] := TcoUtilities.TcoGetBitFromByte(inoData.In.BitRegs.bArray[index + 3], offset);
    Status.State.Inputs.Bits.Register[offset + 32] := TcoUtilities.TcoGetBitFromByte(inoData.In.BitRegs.bArray[index + 4], offset);
    Status.State.Inputs.Bits.Register[offset + 40] := TcoUtilities.TcoGetBitFromByte(inoData.In.BitRegs.bArray[index + 5], offset);
    Status.State.Inputs.Bits.Register[offset + 48] := TcoUtilities.TcoGetBitFromByte(inoData.In.BitRegs.bArray[index + 6], offset);
    Status.State.Inputs.Bits.Register[offset + 56] := TcoUtilities.TcoGetBitFromByte(inoData.In.BitRegs.bArray[index + 7], offset);
END_FOR

//INPUTS T20 BITS => st_URO_CB3_T2OIntRegsData
index := 0;

FOR offset := 0 TO 23 DO
    Status.State.Inputs.Ints.Register[offset] := TcoUtilities.TcoBytesToDint(TcoUtilities.eTcoDataFormat.BigEndian,
        inoData.In.IntRegs.bArray[index],
        inoData.In.IntRegs.bArray[index + 1],
        inoData.In.IntRegs.bArray[index + 2],
        inoData.In.IntRegs.bArray[index + 3]);

    index := index + 4;
END_FOR

//INPUTS T20 BITS => st_URO_CB3_T2OFloatRegsData
index := 0;

FOR offset := 0 TO 23 DO
    Status.State.Inputs.Floats.Register[offset] := TcoUtilities.TcoBytesToReal(TcoUtilities.eTcoDataFormat.BigEndian,
        inoData.In.FloatRegs.bArray[index],
        inoData.In.FloatRegs.bArray[index + 1],
        inoData.In.FloatRegs.bArray[index + 2],
        inoData.In.FloatRegs.bArray[index + 3]);

    index := index + 4;
END_FOR

//SYSTEM INPUTS

index := 0;

//Area/positions flags this  should be obsolete because Zones and InPosition is used as byte below
index := 0;
_status.State.InArea_1 := _status.State.Inputs.Bits.Register[index];
index := index + 1;
_status.State.InArea_2 := _status.State.Inputs.Bits.Register[index];
index := index + 1;
_status.State.InArea_3 := _status.State.Inputs.Bits.Register[index];
index := index + 1;
_status.State.InArea_4 := _status.State.Inputs.Bits.Register[index];
index := index + 1;
_status.State.InPosition_1 := _status.State.Inputs.Bits.Register[index];
index := index + 1;
_status.State.InPosition_2 := _status.State.Inputs.Bits.Register[index];
index := index + 1;
_status.State.InPosition_3 := _status.State.Inputs.Bits.Register[index];
index := index + 1;
_status.State.InPosition_4 := _status.State.Inputs.Bits.Register[index];
index := index + 1;
//
//Tool signals

_status.State.Tool_1_Retract := _status.State.Inputs.Bits.Register[index];
index := index + 1;
_status.State.Tool_1_Extend := _status.State.Inputs.Bits.Register[index];
index := index + 1;
_status.State.Tool_2_Retract := _status.State.Inputs.Bits.Register[index];
index := index + 1;
_status.State.Tool_2_Extend := _status.State.Inputs.Bits.Register[index];
index := index + 1;
_status.State.Tool_3_Retract := _status.State.Inputs.Bits.Register[index];
index := index + 1;
_status.State.Tool_3_Extend := _status.State.Inputs.Bits.Register[index];
index := index + 1;
_status.State.Tool_4_Retract := _status.State.Inputs.Bits.Register[index];
index := index + 1;
_status.State.Tool_4_Extend := _status.State.Inputs.Bits.Register[index];
index := index + 1;

index := 0;
_status.State.Zone := _status.State.Inputs.Ints.Register[index];
index := index + 1;
_status.State.InPosition := _status.State.Inputs.Ints.Register[index];
index := index + 1;

//Movement parameters

_status.State.ActionNo := _status.State.Inputs.Ints.Register[index];
index := index + 1;

_status.State.GlobalSpeed := _status.State.Inputs.Ints.Register[index];
index := index + 1;

_status.State.ToolNo := _status.State.Inputs.Ints.Register[index];
index := index + 1;

_status.State.WorkobjectNo := _status.State.Inputs.Ints.Register[index];
index := index + 1;

_status.State.PointNo := _status.State.Inputs.Ints.Register[index];
index := index + 1;

index := 0;
_status.State.UserSpecSpeed1 := _status.State.Inputs.Floats.Register[index];
index := index + 1;

_status.State.UserSpecSpeed2 := _status.State.Inputs.Floats.Register[index];
index := index + 1;

_status.State.Coordinates.X := Status.State.Inputs.Floats.Register[index] * 1000.0;
index := index + 1;
_status.State.Coordinates.Y := Status.State.Inputs.Floats.Register[index] * 1000.0;
index := index + 1;
_status.State.Coordinates.Z := Status.State.Inputs.Floats.Register[index] * 1000.0;
index := index + 1;
_status.State.Coordinates.Rx := RAD_TO_DEG(Status.State.Inputs.Floats.Register[index]);
index := index + 1;
_status.State.Coordinates.Ry := RAD_TO_DEG(Status.State.Inputs.Floats.Register[index]);
index := index + 1;
_status.State.Coordinates.Rz := RAD_TO_DEG(Status.State.Inputs.Floats.Register[index]);
index := index + 1;

//toido event id

]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>