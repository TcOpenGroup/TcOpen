<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="StartProgramTask" Id="{1230dcd3-a713-0d73-090f-6538260c7db5}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK StartProgramTask EXTENDS TcoUrRoboticsTask
VAR

	_stopType: TcoAbstractions.eTcoRoboticsStopType;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[

IF Execute() THEN
	_blink(inOnTime:=T#500MS,inOffTime:=T#500MS);

	IF _progress = 0 THEN
		IF NOT __ISVALIDREF(inoControl) THEN
			_varInfo :=__VARINFO(inoControl);
			Messenger.Programming(_sb.Clear().Append('<#Invalid reference: #>').Append(_varInfo.Symbol).ToString()).Pin();
		ELSIF NOT __ISVALIDREF(inoConfig) THEN                                                  
			_varInfo :=__VARINFO(inoConfig);                                                    
			Messenger.Programming(_sb.Clear().Append('<#Invalid reference: #>').Append(_varInfo.Symbol).ToString()).Pin();
		ELSIF NOT __ISVALIDREF(inoStatus) THEN                                                  
			_varInfo :=__VARINFO(inoStatus);                                                    
			Messenger.Programming(_sb.Clear().Append('<#Invalid reference: #>').Append(_varInfo.Symbol).ToString()).Pin();
			ELSE
			_progress := _progress + 1;
		END_IF

	END_IF
	
	IF _progress = 1 THEN
		THIS^.Messenger.OnCondition(_infoTimer.Q AND NOT inoStatus.State.Inputs.Safety.NO_IsNormalMode)
		.Warning(_sb.Clear().Append('<# Waiting to Normal Mode. #>').ToString());
		THIS^.Messenger.OnCondition(_infoTimer.Q AND NOT inoStatus.State.Inputs.Safety.RD_IsReducedMode)
		.Warning(_sb.Clear().Append('<# Waiting to Reduced Mode. #>').ToString());
		
		IF inoStatus.State.Inputs.Safety.NO_IsNormalMode OR inoStatus.State.Inputs.Safety.RD_IsReducedMode THEN
			_progress := _progress + 1;

		END_IF
	END_IF;		
	IF _progress = 2 THEN
	
		inoControl.Start :=   _blink.outQ;                                          
		THIS^.Messenger.OnCondition(_infoTimer.Q AND NOT inoStatus.State.Inputs.Robot.PR_IsProgramRunning).Warning(_sb.Clear().Append('<#Waiting to program running! #>').ToString());
		
		IF inoStatus.State.Inputs.Robot.PR_IsProgramRunning THEN
			inoControl.Start :=FALSE;
			_progress:=0;
		END_IF
	END_IF
    DoneWhen(inoStatus.State.Inputs.Robot.PR_IsProgramRunning );

    CallTimers(TRUE);
	
	THIS^.ThrowWhen(_errorTimer.Q );
END_IF

IF  THIS^.Error AND NOT _errorMessage.Pinned THEN
	THIS^.Restore();
END_IF]]></ST>
    </Implementation>
    <Method Name="InvokeWithParams" Id="{1018f4f3-e843-0eb9-0aa3-3c086c7a0fe8}">
      <Declaration><![CDATA[METHOD INTERNAL InvokeWithParams : ITcoTaskStatus
VAR_INPUT
	inStopType : eTcoRoboticsStopType;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_stopType := inStopType;
InvokeWithParams := THIS^.Invoke();]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnAbort" Id="{71688ea6-95a8-02ad-02e5-2806a6c2e741}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Executes when task is aborted.
		</summary>			
	</docu>	
~*)
METHOD PROTECTED OnAbort
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF  __ISVALIDREF(inoStatus) THEN   THIS^.inoStatus.ActionDescription := '<#Stop program was aborted, while not yet completed!#>';END_IF; 
]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnDone" Id="{39d8236d-db7c-0c4b-3971-cda791c81357}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Executes when task reaches the ```Done``` state .
		</summary>			
	</docu>	
~*)
METHOD PROTECTED OnDone
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF  __ISVALIDREF(inoStatus) THEN  THIS^.inoStatus.ActionDescription := '<#Stop program was completed successfully.#>';END_IF; 
_progress:=0;]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnError" Id="{0ef4edcc-4c48-0751-0d7f-ebf84c17c830}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Executes when task reaches the ```Error``` state.
				</summary>			
	</docu>	
~*)
METHOD PROTECTED OnError
VAR
	description: STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.inoStatus.ActionDescription := '<#Stopping program with error.#>'; 
IF  __ISVALIDREF(inoStatus) THEN   THIS^.inoStatus.ActionDescription := description; END_IF;
THIS^._errorMessage.Error(_sb.Clear().Append(description).Append(' To restore acknowledge this alarm.').ToString()).Pin();]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnStart" Id="{4eef4f24-3de6-0fb7-3a1f-b3e11e98fec7}">
      <Declaration><![CDATA[METHOD PROTECTED OnStart 
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF  __ISVALIDREF(inoStatus) THEN  THIS^.inoStatus.ActionDescription := '<#Stopping program started.#>'; END_IF; 
CallTimers(FALSE);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Restore" Id="{61895d9f-3ebe-0aeb-1d72-e60d224ff52e}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Restores this instance to the Ready state. Can be called explicitly or from within one of the restore mechanisms.
			<para>
				See also <see cref="PlcDocu.TcoCore.TcoTask.AutoRestorable()"/>
			</para>
		</summary>			
	</docu>	
~*)
METHOD Restore : ITcoRestorable]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.Restore();
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>