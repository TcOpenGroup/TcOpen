<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="StartAtMainTask" Id="{ac0db872-eb2d-02c6-01b7-8657d317eccf}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK StartAtMainTask EXTENDS TcoUrRoboticsTask]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF Execute() THEN 
	_blink(inOnTime:=T#500MS,inOffTime:=T#500MS);

	IF _progress = 0 THEN
		IF NOT __ISVALIDREF(inoControl) THEN
			_varInfo :=__VARINFO(inoControl);
			Messenger.Programming(_sb.Clear().Append('<#Invalid reference: #>').Append(_varInfo.Symbol).ToString()).Pin();
		ELSIF NOT __ISVALIDREF(inoConfig) THEN                                                  
			_varInfo :=__VARINFO(inoConfig);                                                    
			Messenger.Programming(_sb.Clear().Append('<#Invalid reference: #>').Append(_varInfo.Symbol).ToString()).Pin();
		ELSIF NOT __ISVALIDREF(inoStatus) THEN                                                  
			_varInfo :=__VARINFO(inoStatus);                                                    
			Messenger.Programming(_sb.Clear().Append('<#Invalid reference: #>').Append(_varInfo.Symbol).ToString()).Pin();
		ELSE
			_progress := _progress + 1;
		END_IF

	END_IF
	
	IF _progress = 1 THEN
		THIS^.Messenger.OnCondition(_infoTimer.Q AND NOT inoStatus.State.Inputs.Safety.NO_IsNormalMode)
		.Warning(_sb.Clear().Append('<# Waiting to Normal Mode. #>').ToString());
		THIS^.Messenger.OnCondition(_infoTimer.Q AND NOT inoStatus.State.Inputs.Safety.RD_IsReducedMode)
		.Warning(_sb.Clear().Append('<# Waiting to Reduced Mode. #>').ToString());
		
		IF inoStatus.State.Inputs.Safety.NO_IsNormalMode OR inoStatus.State.Inputs.Safety.RD_IsReducedMode THEN
			_progress := _progress + 1;

		END_IF
	END_IF;		
	
	IF _progress = 2 THEN
	
		inoControl.Start :=   _blink.outQ;
		THIS^.Messenger.OnCondition(_infoTimer.Q AND NOT inoStatus.State.Inputs.Robot.PR_IsProgramRunning).Warning(_sb.Clear().Append('<#Waiting to program running! #>').ToString());
		
		IF inoStatus.State.Inputs.Robot.PR_IsProgramRunning THEN
			inoControl.Start :=FALSE;
			_progress:=0;
		END_IF
	END_IF
    DoneWhen(inoStatus.State.Inputs.Robot.PR_IsProgramRunning );

    CallTimers(TRUE);
	
	THIS^.ThrowWhen(_errorTimer.Q );
	
END_IF;

IF  THIS^.Error AND NOT _errorMessage.Pinned THEN
	THIS^.Restore();
END_IF]]></ST>
    </Implementation>
    <Method Name="OnAbort" Id="{0b5410c1-a8cf-0883-0ab0-4162f1a0fb9f}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Executes when task is aborted.
		</summary>			
	</docu>	
~*)
METHOD PROTECTED OnAbort
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF  __ISVALIDREF(inoStatus) THEN   THIS^.inoStatus.ActionDescription := '<#Start at Main was aborted, while not yet completed!#>';END_IF; 

]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnDone" Id="{08d7e9e9-9441-0063-0573-6684b5eb0ff5}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Executes when task reaches the ```Done``` state .
		</summary>			
	</docu>	
~*)
METHOD PROTECTED OnDone
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF  __ISVALIDREF(inoStatus) THEN  THIS^.inoStatus.ActionDescription := '<#Start at Main was completed successfully.#>';END_IF; 
]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnError" Id="{7127d887-e3bd-0bc7-197b-8734f9e3d281}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Executes when task reaches the ```Error``` state.
			<para>
				Do not confuse with <see cref="PlcDocu.TcoCore.TcoTask.WhileError()"/>, that is called cyclically until '''Error''' state is left.
			</para>
		</summary>			
	</docu>	
~*)
METHOD PROTECTED OnError

VAR
	description: STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[description:= '<#Start at Main finished with error.#>';
IF  __ISVALIDREF(inoStatus) THEN   THIS^.inoStatus.ActionDescription := description; END_IF;
THIS^._errorMessage.Error(_sb.Clear().Append(description).Append(' To restore acknowledge this alarm.').ToString()).Pin();]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnStart" Id="{29e5d160-feb4-0d57-0bf3-d18283786ea1}">
      <Declaration><![CDATA[METHOD PROTECTED OnStart 
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF  __ISVALIDREF(inoStatus) THEN  THIS^.inoStatus.ActionDescription := '<#Start at Main started.#>'; END_IF; 
CallTimers(FALSE);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Restore" Id="{f0b03007-9a0f-02a4-14fa-38cd4c88bdbe}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Restores this instance to the Ready state. Can be called explicitly or from within one of the restore mechanisms.
			<para>
				See also <see cref="PlcDocu.TcoCore.TcoTask.AutoRestorable()"/>
			</para>
		</summary>			
	</docu>	
~*)
METHOD Restore : ITcoRestorable]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.Restore();
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>