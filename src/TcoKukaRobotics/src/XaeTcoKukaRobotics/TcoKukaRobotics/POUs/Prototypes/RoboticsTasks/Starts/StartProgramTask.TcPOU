<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="StartProgramTask" Id="{86704afa-6d76-07e4-3666-b05906528ed5}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK StartProgramTask EXTENDS TcoKukaRoboticsTask
VAR
    _stopType : TcoAbstractions.eTcoRoboticsStopType;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF Execute() THEN
    _blink(inOnTime := T#500MS, inOffTime := T#500MS);

    IF _progress = 0 THEN
        IF NOT __ISVALIDREF(inoControl) THEN
            _varInfo := __VARINFO(inoControl);
            Messenger.Programming(_sb.Clear().Append('<#Invalid reference: #>').Append(_varInfo.Symbol).ToString()).Pin();
        ELSIF NOT __ISVALIDREF(inoConfig) THEN
            _varInfo := __VARINFO(inoConfig);
            Messenger.Programming(_sb.Clear().Append('<#Invalid reference: #>').Append(_varInfo.Symbol).ToString()).Pin();
        ELSIF NOT __ISVALIDREF(inoStatus) THEN
            _varInfo := __VARINFO(inoStatus);
            Messenger.Programming(_sb.Clear().Append('<#Invalid reference: #>').Append(_varInfo.Symbol).ToString()).Pin();
        ELSE
            _progress := _progress + 1;
        END_IF
    END_IF

    IF _progress = 1 THEN
        _varInfo := __VARINFO(inoStatus.State.UserSafetySwitchClosed);

        THIS^.Messenger.OnCondition(_infoTimer.Q AND NOT inoStatus.State.UserSafetySwitchClosed)
            .Warning(_sb.Clear().Append('<#Waiting for signal#>').Append(_varInfo.Symbol).ToString());

        IF inoStatus.State.UserSafetySwitchClosed THEN
            _progress := _progress + 1;
        END_IF;
    END_IF;

    IF _progress = 2 THEN
        _varInfo := __VARINFO(inoStatus.State.AlarmStopActive);

        THIS^.Messenger.OnCondition(_infoTimer.Q AND NOT inoStatus.State.AlarmStopActive)
            .Warning(_sb.Clear().Append('<#Waiting for signal#>').Append(_varInfo.Symbol).ToString());

        IF inoStatus.State.AlarmStopActive THEN
            _progress := _progress + 1;
        END_IF;
    END_IF;

    IF _progress = 3 THEN
        _varInfo := __VARINFO(inoStatus.State.DrivesReady);

        THIS^.Messenger.OnCondition(_infoTimer.Q AND NOT inoStatus.State.DrivesReady)
            .Warning(_sb.Clear().Append('<# Waiting for signal: #>').Append(_varInfo.Symbol).ToString());

        inoControl.DrivesOff := TRUE;
        inoControl.DrivesOn := _blink.outQ;

        IF inoStatus.State.DrivesReady THEN
            inoControl.DrivesOn := FALSE;
            _progress := _progress + 1;
        END_IF
    END_IF;

    IF _progress = 4 THEN
        Messenger.Debug('<#Robot Error Reset and Move Enable#>');
        inoControl.MoveEnable := TRUE;
        inoControl.ErrorConfirmation := inoStatus.State.StopMess AND _blink.outQ;
        _varInfo := __VARINFO(inoStatus.State.StopMess);

        THIS^.Messenger.OnCondition(_infoTimer.Q AND inoStatus.State.StopMess)
            .Warning(_sb.Clear().Append('<#Waiting for signal#>').Append(_varInfo.Symbol).Append(' is OFF').ToString());

        _varInfo := __VARINFO(inoStatus.State.RcReady);

        THIS^.Messenger.OnCondition(_infoTimer.Q AND NOT inoStatus.State.RcReady)
            .Warning(_sb.Clear().Append('<#Waiting for signal#>').Append(_varInfo.Symbol).ToString());

        IF NOT inoStatus.State.StopMess AND inoStatus.State.RcReady THEN
            inoControl.ErrorConfirmation := FALSE;
            _progress := _progress + 1;
        END_IF
    END_IF;

    IF _progress = 5 THEN
        inoControl.ActivateInterface := TRUE;
        _varInfo := __VARINFO(inoStatus.State.InterfaceActivated);

        THIS^.Messenger.OnCondition(_infoTimer.Q AND NOT inoStatus.State.InterfaceActivated)
            .Warning(_sb.Clear().Append('<#Waiting for signal#>').Append(_varInfo.Symbol).ToString());

        IF inoStatus.State.InterfaceActivated THEN
            _progress := _progress + 1;
        END_IF;
    END_IF;

    IF _progress = 6 THEN
        IF inoStatus.State.StopMess OR inoStatus.State.AlarmStopActive OR NOT inoStatus.State.RcReady THEN
            _progress := 1;
        END_IF

        inoControl.ExternalStart := _blink.outQ;
        _varInfo := __VARINFO(inoStatus.State.ProActive);

        THIS^.Messenger.OnCondition(_infoTimer.Q AND NOT inoStatus.State.ProActive)
            .Warning(_sb.Clear().Append('<#Waiting for program running signal! #>').Append(_varInfo.Symbol).ToString());

        IF inoStatus.State.ProActive THEN
            inoControl.ExternalStart := FALSE;
        END_IF
    END_IF;

    DoneWhen(inoStatus.State.ProActive AND inoStatus.State.DrivesReady AND NOT inoStatus.State.StopMess);
    CallTimers(TRUE);
    THIS^.ThrowWhen(_errorTimer.Q);
END_IF

IF THIS^.Error AND NOT _errorMessage.Pinned THEN
    THIS^.Restore();
END_IF]]></ST>
    </Implementation>
    <Method Name="FB_init" Id="{b5c4dde4-101a-08a4-0e9f-68853b0f265a}">
      <Declaration><![CDATA[METHOD PUBLIC FB_init : BOOL
VAR_INPUT
    bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
    bInCopyCode : BOOL; // if TRUE, the instance afterwards gets moved into the copy code (online change)
    ParentObject : ITcoObject;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="InvokeWithParams" Id="{a4092926-bfc8-03ec-298f-2ee9d61fa32d}">
      <Declaration><![CDATA[METHOD INTERNAL InvokeWithParams : ITcoTaskStatus
VAR_INPUT
    inStopType : eTcoRoboticsStopType;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_stopType := inStopType;
InvokeWithParams := THIS^.Invoke();]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnAbort" Id="{d4666adc-8e66-0051-3c86-38ffeca5cf27}">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Executes when task is aborted.
        </summary>
    </docu>
~*)
METHOD PROTECTED OnAbort]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF __ISVALIDREF(inoStatus) THEN
    THIS^.inoStatus.ActionDescription := '<#Stop program was aborted, while not yet completed!#>';
END_IF;]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnDone" Id="{0cd00eeb-740f-0807-3a3b-a918c83168ab}">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Executes when task reaches the ```Done``` state .
        </summary>
    </docu>
~*)
METHOD PROTECTED OnDone]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF __ISVALIDREF(inoStatus) THEN
    THIS^.inoStatus.ActionDescription := '<#Stop program was completed successfully.#>';
END_IF;

_progress := 0;
inoControl.ActivateInterface := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnError" Id="{2f6583cd-2091-060a-0361-5079ecc44649}">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Executes when task reaches the ```Error``` state.
                </summary>
    </docu>
~*)
METHOD PROTECTED OnError
VAR
    description : STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.inoStatus.ActionDescription := '<#Stopping program with error.#>';

IF __ISVALIDREF(inoStatus) THEN
    THIS^.inoStatus.ActionDescription := description;
END_IF;

THIS^._errorMessage.Error(_sb.Clear().Append(description).Append(' To restore acknowledge this alarm.').ToString()).Pin();]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnStart" Id="{258416cb-a36e-0da4-32f7-1248b4431d30}">
      <Declaration><![CDATA[METHOD PROTECTED OnStart]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF __ISVALIDREF(inoStatus) THEN
    THIS^.inoStatus.ActionDescription := '<#Stopping program started.#>';
END_IF;

CallTimers(FALSE);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Restore" Id="{057cdf95-bed7-0f72-0377-688f6b6793d6}">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Restores this instance to the Ready state. Can be called explicitly or from within one of the restore mechanisms.
            <para>
                See also <see cref="PlcDocu.TcoCore.TcoTask.AutoRestorable()"/>
            </para>
        </summary>
    </docu>
~*)
METHOD Restore : ITcoRestorable]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.Restore();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>