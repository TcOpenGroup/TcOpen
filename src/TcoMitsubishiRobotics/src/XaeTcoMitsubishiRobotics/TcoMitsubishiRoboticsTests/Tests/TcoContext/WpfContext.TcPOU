<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="WpfContext" Id="{d7dcdeff-4107-0048-05f3-c44baf26b1e7}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK WpfContext EXTENDS TcoCore.TcoContext
VAR
    _serviceModeActive : BOOL;
    {attribute addProperty Name "<#Mitsubichi Cr800#>"}
    _robot1 : TcoMitsubishiRobotics.TcoCr800_v_1_x_x(THIS^);
    _sequence1 : TcoCore.TcoSequence(THIS^, eRestoreMode.None);
    _observer : TcoCore.TcoSequencerObserver(THIS^);
    {attribute addProperty Name "Start sequence"}
    _sequence1Task : SequenceTask(THIS^);
    _dialog : TcoCore.TcoDialog(THIS^);
    _sequence2 : TcoCore.TcoSequence(THIS^, eRestoreMode.None);
    _observer2 : TcoCore.TcoSequencerObserver(THIS^);
    {attribute addProperty Name "Start sequence"}
    _sequence2Task : SequenceTask(THIS^);
    _enable : BOOL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="Main" Id="{b0ffa10a-38fe-0d99-1b95-b871cd19cbfa}">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Main method of the TcoContext. This is the entry point of any control logic that belongs to this context.
            The call of this method is ensured by calling the <c>InstanceName.Run()</c> method, and it must not be called explicitly.
            This method is abstract, and it must be overridden in derived block.
        </summary>
    </docu>
~*)
METHOD PROTECTED Main]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _serviceModeActive THEN
    _robot1.Service();
END_IF

_robot1(inPnIoBoxDiag := GVL.Robot1.PnIoBoxDiag, inPnIoBoxState := gvl.Robot1.PnIoBoxState, inoData := GVL.Robot1);
_sequence1Task.Enabled := NOT _sequence2Task.Busy;
_sequence1Task(Sequence := _sequence1);

IF (_sequence1Task.Execute()) THEN
    Sequence1();
END_IF;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Sequence1" Id="{a5f7b5e7-b7eb-050f-0477-b18b1114665d}">
      <Declaration><![CDATA[METHOD Sequence1
VAR
    seq : REFERENCE TO TcoCore.TcoSequence;
    answer : TcoCore.eDialogAnswer;
    done : BOOL;
    _jerk : LREAL;
    _deceleration : LREAL;
    _acceleration : LREAL;
    _velocity : LREAL;
    ProbeDoneWhen : INT;
    _param : TcoRoboticsMovementsParams;
END_VAR
VAR_INST
    _maxAllowedAttempts : INT;
    _noOfAttmets : INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[seq REF= _sequence1;
seq.Open();
seq.Observer := _observer;

IF (seq.Step(inStepID := 0, inEnabled := TRUE, inStepDescription := 'READY TO START')) THEN
    //--------------------------------------------------------
    _param.GlobalSpeed := 100;
    _noOfAttmets := 0;

    answer := _dialog.Show()
        .WithType(eDialogType.Question)
        .WithCaption('Ready to go?')
        .WithText('Do you really want to start movements? Do we go ahead?')
        .WithYesNo().Answer;

    //
    IF (answer = TcoCore.eDialogAnswer.Yes) THEN
        seq.CompleteStep();
    ELSIF (answer = TcoCore.eDialogAnswer.No) THEN
        _sequence1Task.Restore();
    END_IF;
    //--------------------------------------------------------
END_IF;

IF (seq.Step(inStepID := 10, inEnabled := TRUE, inStepDescription := 'RESTORE')) THEN
    //--------------------------------------------------------
    _robot1.Restore();
    seq.CompleteStep();
    //--------------------------------------------------------
END_IF;

IF (seq.Step(inStepID := 11, inEnabled := TRUE, inStepDescription := 'STOP MOVEMENTS AND PROGRAM')) THEN
    //--------------------------------------------------------
    IF _robot1.StopMovementsAndProgram(inStopType := eTcoRoboticsStopType.Soft).Done THEN
        seq.CompleteStep();
    END_IF

    //--------------------------------------------------------
END_IF;

IF (seq.Step(inStepID := 12, inEnabled := TRUE, inStepDescription := 'START AT MAIN')) THEN
    //--------------------------------------------------------
    IF _robot1.StartAtMain().Done THEN
        seq.CompleteStep();
    END_IF;
    //--------------------------------------------------------
END_IF;

IF (seq.Step(inStepID := 13, inEnabled := TRUE, inStepDescription := 'START MOTORS AND PROGRAM')) THEN
    //--------------------------------------------------------
    IF _robot1.StartMotorsAndProgram().Done THEN
        seq.CompleteStep();
    END_IF;
    //--------------------------------------------------------
END_IF;

IF (seq.Step(inStepID := 14, inEnabled := TRUE, inStepDescription := 'START MOVEMENTS')) THEN
    //--------------------------------------------------------
    _maxAllowedAttempts := 10;
    seq.CompleteStep();
    //--------------------------------------------------------
END_IF;

IF (seq.Step(inStepID := 15, inEnabled := TRUE, inStepDescription := 'START MOVEMENTS')) THEN
    //--------------------------------------------------------
    _param.ActionNo := 100;

    IF _robot1.StartMovements(inData := _param).Done THEN
        seq.CompleteStep();
        _robot1.Restore();
    END_IF
    //--------------------------------------------------------
END_IF;

IF (seq.Step(inStepID := 16, inEnabled := TRUE, inStepDescription := 'START ANOTHER MOVE MOVEMENTS')) THEN
    //--------------------------------------------------------
    _param.ActionNo := 1;
    _param.GlobalSpeed := 90;

    IF _robot1.StartMovements(inData := _param).Done THEN
        IF _noOfAttmets < _maxAllowedAttempts THEN
            _noOfAttmets := _noOfAttmets + 1;
            seq.RequestStep(14);
            _robot1.Restore();
        ELSE
            seq.CompleteStep();
        end_if;
    END_IF
    //--------------------------------------------------------
END_IF;

//
IF (seq.Step(inStepID := 500, inEnabled := TRUE, inStepDescription := 'EXAMPLE OF MOVMENT ABORTED')) THEN
    //    --------------------------------------------------------
    answer := _dialog.Show()
        .WithType(eDialogType.Question)
        .WithCaption('Abort movement?')
        .WithText('Do you  want to start movements and abort it?')
        .WithYesNo().Answer;

    IF (answer = TcoCore.eDialogAnswer.Yes) THEN
        seq.CompleteStep();
    ELSIF (answer = TcoCore.eDialogAnswer.No) THEN
        _sequence1Task.Restore();
    END_IF;
    //    --------------------------------------------------------
END_IF;

IF (seq.Step(inStepID := 525, inEnabled := TRUE, inStepDescription := 'STOP MOVEMENT  EXAMPLE')) THEN
    //    --------------------------------------------------------
    answer :=
        _dialog.Show().WithType(eDialogType.Question).WithCaption('Movement running').WithText('Do you  want to abort movement?').WithYesNo().Answer;

    IF (answer = TcoCore.eDialogAnswer.Yes) THEN
        _robot1.StopMovements(inStopType := TcoAbstractions.eTcoRoboticsStopType.Quick);
        seq.CompleteStep();
    ELSIF (answer = TcoCore.eDialogAnswer.No) THEN
        _sequence1Task.Restore();
    END_IF;

    _param.ActionNo := 100;
    _param.GlobalSpeed := 20;

    IF _robot1.StartMovements(inData := _param).Done THEN
        seq.CompleteStep();
    END_IF
    //    --------------------------------------------------------
END_IF;

IF (seq.Step(inStepID := 600, inEnabled := TRUE, inStepDescription := 'ASKING FOR RESTORING')) THEN
    //    --------------------------------------------------------
    answer := _dialog.Show()
        .WithType(eDialogType.Question)
        .WithCaption('Question?')
        .WithText('Do you want to restore TcoIrc5 component?')
        .WithYesNo().Answer;

    IF (answer = TcoCore.eDialogAnswer.Yes) THEN
        _robot1.Restore();
        seq.CompleteStep();
    ELSIF (answer = TcoCore.eDialogAnswer.No) THEN
        _sequence1Task.Restore();
    END_IF;
    //    --------------------------------------------------------
END_IF;

IF (seq.Step(inStepID := seq.RESTORE_STEP_ID, inEnabled := TRUE, inStepDescription := 'RETURN TO THE START OF THE SEQUENCE')) THEN
    //--------------------------------------------------------
    seq.CompleteSequence();
    //--------------------------------------------------------
END_IF;

seq.Close();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>