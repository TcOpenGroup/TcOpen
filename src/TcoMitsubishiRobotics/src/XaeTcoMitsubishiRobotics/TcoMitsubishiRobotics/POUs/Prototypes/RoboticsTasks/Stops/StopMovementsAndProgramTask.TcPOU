<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="StopMovementsAndProgramTask" Id="{8e8c19dd-d90b-0243-158f-b85b12b1e2a0}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK StopMovementsAndProgramTask EXTENDS TcoMitsubishiRoboticsTask
VAR

	_stopType: TcoAbstractions.eTcoRoboticsStopType;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[

IF Execute() THEN
(*	IF _progress = 0 THEN
		IF NOT __ISVALIDREF(inoControl) THEN
			_varInfo :=__VARINFO(inoControl);
			Messenger.Programming(_sb.Clear().Append('<#Invalid reference: #>').Append(_varInfo.Symbol).ToString()).Pin();
		ELSIF NOT __ISVALIDREF(inoConfig) THEN                                                  
			_varInfo :=__VARINFO(inoConfig);                                                    
			Messenger.Programming(_sb.Clear().Append('<#Invalid reference: #>').Append(_varInfo.Symbol).ToString()).Pin();
		ELSIF NOT __ISVALIDREF(inoStatus) THEN                                                  
			_varInfo :=__VARINFO(inoStatus);                                                    
			Messenger.Programming(_sb.Clear().Append('<#Invalid reference: #>').Append(_varInfo.Symbol).ToString()).Pin();
			ELSE
			_progress := _progress + 1;
		END_IF

	END_IF
	IF _progress = 1 THEN
		inoControl.SoftStop := TRUE;
		inoControl.QuickStop := FALSE;
	
		IF _stopType = TcoAbstractions.eTcoRoboticsStopType.Quick THEN
			inoControl.SoftStop := FALSE;
			inoControl.QuickStop := TRUE;
		END_IF
	
	
		IF inoStatus.State.MoveInactive THEN
			_progress := _progress + 1;
		END_IF
	END_IF;		

	IF _progress = 2 THEN
		inoControl.Stop:=TRUE;
		IF NOT inoStatus.State.Stop THEN
			_progress := _progress + 1;
		END_IF
	END_IF;		
	
	IF _progress = 3 THEN	
		inoControl.SoftStop := FALSE;
		inoControl.QuickStop := FALSE;
		inoControl.Stop:=FALSE;
	END_IF;		
		
	_varInfo :=__VARINFO( inoStatus.State.MoveInactive);                                                
	THIS^.Messenger.OnCondition(_infoTimer.Q AND NOT inoStatus.State.MoveInactive).Warning(_sb.Clear().Append('<# Waiting for signal: #>').Append(_varInfo.Symbol).ToString());
	_varInfo :=__VARINFO( inoStatus.State.CycleOn);   
	THIS^.Messenger.OnCondition(_infoTimer.Q AND  inoStatus.State.CycleOn)
		.Warning(_sb.Clear().Append('<# Waiting for signal: #>').Append(_varInfo.Symbol).Append('<# is OFF #>').ToString());
	
    DoneWhen( inoStatus.State.MoveInactive AND NOT inoStatus.State.CycleOn);
    CallTimers(TRUE);
	
	THIS^.ThrowWhen(_errorTimer.Q); *)
END_IF

IF  THIS^.Error AND NOT _errorMessage.Pinned THEN
	THIS^.Restore();
END_IF]]></ST>
    </Implementation>
    <Method Name="FB_init" Id="{4950cbac-6da8-02c3-07a1-649ce0851736}">
      <Declaration><![CDATA[METHOD PUBLIC FB_init : BOOL
VAR_INPUT
    bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
    bInCopyCode : BOOL; // if TRUE, the instance afterwards gets moved into the copy code (online change)
  	ParentObject : ITcoObject;	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[		    
                                ]]></ST>
      </Implementation>
    </Method>
    <Method Name="InvokeWithParams" Id="{90e4d839-32a0-060b-1b8a-c51a2d6af416}">
      <Declaration><![CDATA[METHOD INTERNAL InvokeWithParams : ITcoTaskStatus
VAR_INPUT
	inStopType : eTcoRoboticsStopType;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_stopType := inStopType;
InvokeWithParams := THIS^.Invoke();]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnAbort" Id="{1ae6afda-a42e-0ba7-0d42-2db57a9be7dd}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Executes when task is aborted.
		</summary>			
	</docu>	
~*)
METHOD PROTECTED OnAbort
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF  __ISVALIDREF(inoStatus) THEN   THIS^.inoStatus.ActionDescription := '<#Stop movements and program was aborted, while not yet completed!#>';END_IF; 
//inoControl.SoftStop := FALSE;
//inoControl.QuickStop := FALSE;
inoControl.Stop:=FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnDone" Id="{39f91c6b-1edc-0685-3c5d-4083a85d6350}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Executes when task reaches the ```Done``` state .
		</summary>			
	</docu>	
~*)
METHOD PROTECTED OnDone
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF  __ISVALIDREF(inoStatus) THEN  THIS^.inoStatus.ActionDescription := '<#Stop movements and program  was completed successfully.#>';END_IF; 
_progress:=0;]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnError" Id="{d16b356d-d988-061c-19ac-76f81617aa78}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Executes when task reaches the ```Error``` state.
			
		</summary>			
	</docu>	
~*)
METHOD PROTECTED OnError
VAR
	description: STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.inoStatus.ActionDescription := '<#Stop movements and program finished with error.#>';
IF  __ISVALIDREF(inoStatus) THEN   THIS^.inoStatus.ActionDescription := description; END_IF;
THIS^._errorMessage.Error(_sb.Clear().Append(description).Append(' To restore acknowledge this alarm.').ToString()).Pin();]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnStart" Id="{e0bde3ac-d652-03ff-26c7-560b86e1b8a1}">
      <Declaration><![CDATA[METHOD PROTECTED OnStart 
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF  __ISVALIDREF(inoStatus) THEN  THIS^.inoStatus.ActionDescription := '<#Stop movements and program started.#>'; END_IF; 
CallTimers(FALSE);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Restore" Id="{f5d33739-8e33-0afd-1d32-b1bbe8dc40af}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Restores this instance to the Ready state. Can be called explicitly or from within one of the restore mechanisms.
			<para>
				See also <see cref="PlcDocu.TcoCore.TcoTask.AutoRestorable()"/>
			</para>
		</summary>			
	</docu>	
~*)
METHOD Restore : ITcoRestorable]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.Restore();
//inoControl.SoftStop := FALSE;
//inoControl.QuickStop := FALSE;
inoControl.Stop:=FALSE;
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>