<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="StopMotorsTask" Id="{03a6e33e-2621-0ca2-3359-0c6a94274fc3}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK StopMotorsTask EXTENDS TcoMitsubishiRoboticsTask
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF Execute() THEN 
	IF _progress = 0 THEN
		IF NOT __ISVALIDREF(inoControl) THEN
			_varInfo :=__VARINFO(inoControl);
			Messenger.Programming(_sb.Clear().Append('<#Invalid reference: #>').Append(_varInfo.Symbol).ToString()).Pin();
		ELSIF NOT __ISVALIDREF(inoConfig) THEN                                                  
			_varInfo :=__VARINFO(inoConfig);                                                    
			Messenger.Programming(_sb.Clear().Append('<#Invalid reference: #>').Append(_varInfo.Symbol).ToString()).Pin();
		ELSIF NOT __ISVALIDREF(inoStatus) THEN                                                  
			_varInfo :=__VARINFO(inoStatus);                                                    
			Messenger.Programming(_sb.Clear().Append('<#Invalid reference: #>').Append(_varInfo.Symbol).ToString()).Pin();
		ELSE
			_progress := _progress + 1;
		END_IF

	END_IF
	
	IF _progress = 1 THEN
	
		inoControl.AutoEnable:=TRUE;
		_varInfo :=__VARINFO( inoStatus.State.AutoEnable);                                                
		THIS^.Messenger.OnCondition(_infoTimer.Q AND NOT inoStatus.State.AutoEnable).Warning(_sb.Clear().Append('<#Waiting for Auto signal! #>').Append(_varInfo.Symbol).ToString());
		IF  inoStatus.State.AutoEnable THEN
			_progress := _progress + 1;
		END_IF;
	END_IF;
	
	IF _progress = 2 THEN
		inoControl.OperationEnable:=TRUE;
		_varInfo :=__VARINFO( inoStatus.State.OperationEnable);                                                
		THIS^.Messenger.OnCondition(_infoTimer.Q AND NOT inoStatus.State.OperationEnable).Warning(_sb.Clear().Append('<#Waiting for Operation enable signal! #>').Append(_varInfo.Symbol).ToString());
		IF  inoStatus.State.OperationEnable THEN
			_progress := _progress + 1;
		END_IF;
	END_IF;
	
	IF _progress = 3 THEN
	
		inoControl.ServoOn := FALSE ;
		inoControl.ServoOff := TRUE ;
		
		IF inoStatus.State.ServoOff   THEN
			inoControl.ServoOff :=FALSE;
			_progress:=0;
		END_IF
	END_IF
				
	_varInfo :=__VARINFO( inoStatus.State.ServoOff);                                                
	THIS^.Messenger.OnCondition(_infoTimer.Q).Warning(_sb.Clear().Append('<# Waiting for signal: #>').Append(_varInfo.Symbol).ToString());
	
    DoneWhen(inoStatus.State.ServoOff);
    CallTimers(TRUE);
	
	THIS^.ThrowWhen(_errorTimer.Q);
	
END_IF;

IF  THIS^.Error AND NOT _errorMessage.Pinned THEN
	THIS^.Restore();
END_IF]]></ST>
    </Implementation>
    <Method Name="FB_init" Id="{505f0302-47ef-0385-3cc0-3d662344cd63}">
      <Declaration><![CDATA[METHOD PUBLIC FB_init : BOOL
VAR_INPUT
    bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
    bInCopyCode : BOOL; // if TRUE, the instance afterwards gets moved into the copy code (online change)
  	ParentObject : ITcoObject;	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnAbort" Id="{d13561e7-b65d-014d-1f8a-1d889d303dda}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Executes when task is aborted.
		</summary>			
	</docu>	
~*)
METHOD PROTECTED OnAbort
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF  __ISVALIDREF(inoStatus) THEN   THIS^.inoStatus.ActionDescription := '<#Start at Main was aborted, while not yet completed!#>';END_IF; 
inoControl.ServoOff :=FALSE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnDone" Id="{beb9e567-0855-0b82-140b-ab45f4865ef9}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Executes when task reaches the ```Done``` state .
		</summary>			
	</docu>	
~*)
METHOD PROTECTED OnDone
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF  __ISVALIDREF(inoStatus) THEN  THIS^.inoStatus.ActionDescription := '<#Stop motors was completed successfully.#>';END_IF; 
]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnError" Id="{7b31a6c6-7c47-0c9b-3994-5476c836950c}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Executes when task reaches the ```Error``` state.
				</summary>			
	</docu>	
~*)
METHOD PROTECTED OnError
VAR
	description: STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.inoStatus.ActionDescription := '<#Stop motors finished with error.#>'; 
IF  __ISVALIDREF(inoStatus) THEN   THIS^.inoStatus.ActionDescription := description; END_IF;
THIS^._errorMessage.Error(_sb.Clear().Append(description).Append(' To restore acknowledge this alarm.').ToString()).Pin();]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnStart" Id="{6a0aaab6-6dc5-07b9-2875-d0de49bdbcbf}">
      <Declaration><![CDATA[METHOD PROTECTED OnStart 
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF  __ISVALIDREF(inoStatus) THEN  THIS^.inoStatus.ActionDescription := '<#Stop motors started.#>'; END_IF; 
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Restore" Id="{278406be-eca7-077d-2553-c97d87d04965}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Restores this instance to the Ready state. Can be called explicitly or from within one of the restore mechanisms.
			<para>
				See also <see cref="PlcDocu.TcoCore.TcoTask.AutoRestorable()"/>
			</para>
		</summary>			
	</docu>	
~*)
METHOD Restore : ITcoRestorable]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.Restore();
inoControl.ServoOff :=FALSE;

]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>