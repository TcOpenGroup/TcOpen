<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="TcoCylinder" Id="{fe4e2550-76ec-4019-82bb-e68b2cbe4d49}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute addProperty _moveHomeDefaultName "<#MOVE HOME#>"}
{attribute addProperty _moveWorkDefaultName "<#MOVE TO WORK#>"}
{attribute addProperty _stopDefaultName "<#STOP#>"}
FUNCTION_BLOCK TcoCylinder EXTENDS TcoCylinderBase
VAR
    {attribute addProperty Name "|[[1]Attribute_moveHomeDefaultName]|"}
    _moveHomeDefault : TcoCylinderMoveTask(THIS^);
    {attribute addProperty Name "|[[1]Attribute_moveWorkDefaultName]|"}
    _moveWorkDefault : TcoCylinderMoveTask(THIS^);
    {attribute addProperty Name "|[[1]Attribute_stopDefaultName]|"}
    _stopDefault : TcoCore.TcoTask(THIS^);
END_VAR
VAR
    _config : TcoCylinderConfig;
	_status : TcoCylinderStatus;	
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[SUPER^(inoAtHomePos := inoAtHomePos, inoAtWorkPos := inoAtWorkPos, inoToHomePos := inoToHomePos, inoToWorkPos := inoToWorkPos);

IF(inoAtHomePos AND inoAtWorkPos) THEN Messenger.Error('<#Home and work position sensors are both active. Check the position of sensors!#>'); END_IF;

// Disables mutualy exclusive actions
_moveWorkDefault.Enabled := NOT _moveHomeDefault.Busy;

_moveHomeDefault(PositionSensor := _atHomePos AND NOT _atWorkPos,
    MoveToPositionSignal := _toHomePos,
    InverseSignal := _toWorkPos,
    MaxTimeToReachPosition := _config.TimeToReachHomePosition,
    PositionName := '<#Home#>');

// Disables mutualy exclusive actions		
_moveHomeDefault.Enabled := NOT _moveWorkDefault.Busy;
	
_moveWorkDefault(PositionSensor := _atWorkPos AND NOT _atHomePos,
    MoveToPositionSignal := _toWorkPos,
    InverseSignal := _toHomePos,
    MaxTimeToReachPosition := _config.TimeToReachWorkPosition,
    PositionName := '<#Work#>');

IF (_stopDefault.Execute()) THEN
	_toHomePos := FALSE;
	_toWorkPos := FALSE;
    _moveHomeDefault.Abort();
    _moveWorkDefault.Abort();
    _stopDefault.Abort();
    _moveHomeDefault.Restore();
    _moveWorkDefault.Restore();
    _stopDefault.Restore();
    _stopDefault.DoneWhen(TRUE);
END_IF

// For further discussion about Status
IF(_moveHomeDefault.Busy) THEN
	_status.ActionDescription := 'Moving to home position';
ELSIF(_moveWorkDefault.Busy) THEN
	_status.ActionDescription := 'Moving to work position';
ELSIF(_stopDefault.Busy) THEN
	_status.ActionDescription := 'Stopping pressure';
ELSE	
	_status.ActionDescription := 'Idle';
END_IF

SUPER^(inoAtHomePos := inoAtHomePos, inoAtWorkPos := inoAtWorkPos, inoToHomePos := inoToHomePos, inoToWorkPos := inoToWorkPos);]]></ST>
    </Implementation>
    <Folder Name="Tasks" Id="{2c49a519-7477-00ef-0cce-12b7d5ee9e41}" />
    <Method Name="AbortMoveHome" Id="{47e4576d-3c08-01cc-0965-20c209cad595}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Aborts the movement to home position when the condition is 'true'.
		</summary>
		<remarks>			
				<note type="warning">
					The call of this method will be effective only when called AFTER the initialization of the instance of given TcoCylinder.
				</note>
		</remarks>	
	</docu>
~*)
METHOD AbortMoveHome : BOOL
VAR_IN_OUT
	(*~
	<docu>
		<summary>
			Condition to abort the movement of the cylinder.
		</summary>	
	</docu>
	~*)
	inoDisableCondition : BOOL;
END_VAR
VAR
	_signalInfo : TcoSignalInfo;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (_toHomePos OR _moveHomeDefault.Busy) AND inoDisableCondition THEN
	_signalInfo := GetSignalInfo(SIZEOF(inoDisableCondition), ADR(inoDisableCondition));
	Messenger.Error(CONCAT('<#Movement aborted due to#> : ' , _signalInfo.SymbolPath));
	_toHomePos := FALSE;
	IF(__ISVALIDREF(THIS^.inoToHomePos)) THEN THIS^.inoToHomePos := FALSE; END_IF;
	_moveHomeDefault.Abort();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AbortMoveWork" Id="{9c09b925-4ae8-044b-2972-72392d722888}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Aborts the movement to work position when the condition is 'true'.
		</summary>
		<remarks>			
				<note type="warning">
					The call of this method will be effective only when called AFTER the initialization of the instance of given TcoCylinder.
				</note>
		</remarks>	
	</docu>
~*)
METHOD AbortMoveWork : BOOL
VAR_IN_OUT
	(*~
		<docu>
			<summary>
				Condition to abort the movement of the cylinder.
			</summary>	
		</docu>
	~*)
	inoDisableCondition : BOOL;
END_VAR
VAR
	_signalInfo : TcoSignalInfo;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (_toWorkPos OR _moveWorkDefault.Busy) AND inoDisableCondition THEN
	_signalInfo := GetSignalInfo(SIZEOF(inoDisableCondition), ADR(inoDisableCondition));
	Messenger.Error(CONCAT('<#Movement aborted due to#> : ' , _signalInfo.SymbolPath));
	_toWorkPos := FALSE;
	IF(__ISVALIDREF(THIS^.inoToWorkPos)) THEN THIS^.inoToWorkPos := FALSE; END_IF;
	_moveWorkDefault.Abort();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="Config" Id="{4900e490-aca6-01f6-34b5-8e88d5861bd7}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Gets the configuration of the cylinder. 					
		</summary>			
	</docu>	
~*)
PROPERTY Config : REFERENCE TO TcoCylinderConfig]]></Declaration>
      <Get Name="Get" Id="{01381d79-df26-0dfc-0b34-6d73c1b5b634}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Config REF= config;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="MoveHomeTask" Id="{6c5528f8-8b8f-0e7d-01e4-787b210fe4ca}" FolderPath="Tasks\">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Gets the `MoveHomeTask` task that controls the moving of the cyclinder in home position. 		
		</summary>			
	</docu>	
~*)
PROPERTY MoveHomeTask : TcoCore.ITcoTask]]></Declaration>
      <Get Name="Get" Id="{5717e4b3-14ff-0743-005a-b365bdc9a2e1}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MoveHomeTask := _moveHomeDefault;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="MoveWorkTask" Id="{b7eb0230-cd38-0ac9-3271-cda0637a6c51}" FolderPath="Tasks\">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Gets the `MoveWorkTask` task that controls the moving of the cyclinder into work position. 		
		</summary>			
	</docu>	
~*)
PROPERTY MoveWorkTask : TcoCore.ITcoTask]]></Declaration>
      <Get Name="Get" Id="{d38ced05-e6e6-0894-2289-cb1e2f89ee7d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MoveWorkTask := _moveWorkDefault;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Status" Id="{4e25aab9-b7e5-00e7-1126-2a4313a14d92}">
      <Declaration><![CDATA[PROPERTY Status : REFERENCE TO TcoCylinderStatus]]></Declaration>
      <Get Name="Get" Id="{a32a112b-8373-0a19-170b-cdfdf4b5b4dd}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Status REF= _status;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="StopTask" Id="{f45f0198-4c17-0e92-3a52-5cc8984cb39c}" FolderPath="Tasks\">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Gets the `StopTask` task that controls the stopping of the cyclinder. 		
		</summary>			
	</docu>	
~*)
PROPERTY StopTask : TcoCore.ITcoTask]]></Declaration>
      <Get Name="Get" Id="{28fe28be-dd9b-0922-165d-691ae597ebf9}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[StopTask := _stopDefault;]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>