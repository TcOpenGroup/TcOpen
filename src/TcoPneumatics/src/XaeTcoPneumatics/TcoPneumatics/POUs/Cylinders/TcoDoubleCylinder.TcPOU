<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="TcoDoubleCylinder" Id="{d3582c12-c860-0eaa-3a9d-5722503dc127}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute addProperty _moveHomeDefaultName "<#MOVE HOME#>"}
{attribute addProperty _moveWorkDefaultName "<#MOVE TO WORK#>"}
{attribute addProperty _stopDefaultName "<#STOP#>"}
FUNCTION_BLOCK TcoDoubleCylinder EXTENDS TcoDoubleCylinderBase
VAR
    {attribute addProperty Name "|[[1]Attribute_moveHomeDefaultName]|"}
    _moveHomeDefault : TcoCylinderMoveTask(THIS^);
    {attribute addProperty Name "|[[1]Attribute_moveWorkDefaultName]|"}
    _moveWorkDefault : TcoCylinderMoveTask(THIS^);
    {attribute addProperty Name "|[[1]Attribute_stopDefaultName]|"}
    _stopDefault : TcoCore.TcoTask(THIS^);
    increment : INT;
END_VAR
VAR
    _config : TcoCylinderConfig;
    _status : TcoCylinderStatus;
    _refillTimer : TON;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[SUPER^(inoAtHomePos1 := inoAtHomePos1,
    inoAtHomePos2 := inoAtHomePos2,
    inoAtWorkPos1 := inoAtWorkPos1,
    inoAtWorkPos2 := inoAtWorkPos2,
    inoToHomePos := inoToHomePos,
    inoToWorkPos := inoToWorkPos);

IF (_atHomePos AND _atWorkPos) THEN
    Messenger.Error('<#Home and work position sensors are both active. Check the position of sensors!#>');
END_IF;
// Disables mutualy exclusive actions
_moveWorkDefault.Enabled := TRUE; // NOT _moveHomeDefault.Busy;

_moveHomeDefault(PositionSensor := _atHomePos AND NOT _atWorkPos,
    MoveToPositionSignal := _toHomePos,
    InverseSignal := _toWorkPos,
    TimeToRefill := _config.TimeToRefill,
    MaxTimeToReachPosition := _config.TimeToReachHomePosition,
    PositionName := '<#Home#>');

IF _moveHomeDefault.Execute() THEN
    _moveWorkDefault.Restore();
END_IF
// Disables mutualy exclusive actions
_moveHomeDefault.Enabled := true; // NOT _moveWorkDefault.Busy;

_moveWorkDefault(PositionSensor := _atWorkPos AND NOT _atHomePos,
    MoveToPositionSignal := _toWorkPos,
    InverseSignal := _toHomePos,
    TimeToRefill := _config.TimeToRefill,
    MaxTimeToReachPosition := _config.TimeToReachWorkPosition,
    PositionName := '<#Work#>');

IF _moveWorkDefault.Execute() THEN
    _moveHomeDefault.Restore();
END_IF

IF (_stopDefault.Execute()) THEN
    _toHomePos := FALSE;
    _toWorkPos := FALSE;
    _moveHomeDefault.Abort();
    _moveWorkDefault.Abort();
    _stopDefault.Abort();
    _moveHomeDefault.Restore();
    _moveWorkDefault.Restore();
    _stopDefault.Restore();
    _stopDefault.DoneWhen(TRUE);
END_IF

// For further discussion about Status
IF (_moveHomeDefault.Busy) THEN
    _status.ActionDescription := 'Moving to home position';
ELSIF (_moveWorkDefault.Busy) THEN
    _status.ActionDescription := 'Moving to work position';
ELSIF (_stopDefault.Busy) THEN
    _status.ActionDescription := 'Stopping pressure';
ELSE
    _status.ActionDescription := 'Idle';
END_IF

SUPER^(inoAtHomePos1 := inoAtHomePos1,
    inoAtHomePos2 := inoAtHomePos2,
    inoAtWorkPos1 := inoAtWorkPos1,
    inoAtWorkPos2 := inoAtWorkPos2,
    inoToHomePos := inoToHomePos,
    inoToWorkPos := inoToWorkPos);]]></ST>
    </Implementation>
    <Folder Name="Suspend" Id="{8f0b80eb-7303-01db-0190-de63d6303685}" />
    <Folder Name="Tasks" Id="{60aa6ba7-e67e-023f-1304-39016a36561e}" />
    <Method Name="AbortMoveHome" Id="{cf7c503f-527c-0336-05d0-5a9f6d728ab9}">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Aborts the movement to home position when the condition is 'true'.
        </summary>
        <remarks>
                <note type="warning">
                    The call of this method will be effective only when called AFTER the initialization of the instance of given TcoCylinder.
                </note>
        </remarks>
    </docu>
~*)
METHOD AbortMoveHome : BOOL
VAR_IN_OUT
    (*~
    <docu>
        <summary>
            Condition to abort the movement of the cylinder.
        </summary>
    </docu>
    ~*)
    inoDisableCondition : BOOL;
END_VAR
VAR
    _signalInfo : TcoSignalInfo;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (_toHomePos OR _moveHomeDefault.Busy) AND inoDisableCondition THEN
    _signalInfo.GetSignalInfo(SIZEOF(inoDisableCondition), ADR(inoDisableCondition));
    Messenger.Build().Append('<#Movement aborted due to#> : ').Append(_signalInfo.SymbolPath).As().AsError().Pin();
    _toHomePos := FALSE;

    IF (__ISVALIDREF(THIS^.inoToHomePos)) THEN
        THIS^.inoToHomePos := FALSE;
    END_IF;

    _moveHomeDefault.Abort();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AbortMoveWork" Id="{5ccbdb0a-6b68-087e-112d-6d675b334624}">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Aborts the movement to work position when the condition is 'true'.
        </summary>
        <remarks>
                <note type="warning">
                    The call of this method will be effective only when called AFTER the initialization of the instance of given TcoCylinder.
                </note>
        </remarks>
    </docu>
~*)
METHOD AbortMoveWork : BOOL
VAR_IN_OUT
    (*~
        <docu>
            <summary>
                Condition to abort the movement of the cylinder.
            </summary>
        </docu>
    ~*)
    inoDisableCondition : BOOL;
END_VAR
VAR
    _signalInfo : TcoSignalInfo;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (_toWorkPos OR _moveWorkDefault.Busy) AND inoDisableCondition THEN
    _signalInfo.GetSignalInfo(SIZEOF(inoDisableCondition), ADR(inoDisableCondition));
    Messenger.Build().Append('<#Movement aborted due to#> : ').Append(_signalInfo.SymbolPath).As().AsError().Pin();
    _toWorkPos := FALSE;

    IF (__ISVALIDREF(THIS^.inoToWorkPos)) THEN
        THIS^.inoToWorkPos := FALSE;
    END_IF;

    _moveWorkDefault.Abort();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="Config" Id="{f7db05dd-fe33-0a27-1fb5-3263e2ef6d1d}">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Gets the configuration of the cylinder.
        </summary>
    </docu>
~*)
PROPERTY Config : REFERENCE TO TcoCylinderConfig]]></Declaration>
      <Get Name="Get" Id="{4c54dd7b-14c0-0245-1bb5-2145318bbf17}">
        <Declaration><![CDATA[VAR
END_VAR]]></Declaration>
        <Implementation>
          <ST><![CDATA[Config REF= _config;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="MoveHomeTask" Id="{229b2d74-8d81-0564-07c7-55e7804bb9e8}" FolderPath="Tasks\">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Gets the `MoveHomeTask` task that controls the moving of the cyclinder in home position.
        </summary>
    </docu>
~*)
PROPERTY MoveHomeTask : TcoCore.ITcoTask]]></Declaration>
      <Get Name="Get" Id="{9d712a74-cc84-0d11-2486-c013a276539d}">
        <Declaration><![CDATA[VAR
END_VAR]]></Declaration>
        <Implementation>
          <ST><![CDATA[MoveHomeTask := _moveHomeDefault;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="MoveWorkTask" Id="{ca061bb1-17b2-0542-0f22-1c68311b5b7d}" FolderPath="Tasks\">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Gets the `MoveWorkTask` task that controls the moving of the cyclinder into work position.
        </summary>
    </docu>
~*)
PROPERTY MoveWorkTask : TcoCore.ITcoTask]]></Declaration>
      <Get Name="Get" Id="{aa0c6a4d-a267-011e-282a-7599955d5886}">
        <Declaration><![CDATA[VAR
END_VAR]]></Declaration>
        <Implementation>
          <ST><![CDATA[MoveWorkTask := _moveWorkDefault;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Refill" Id="{f89a641e-9c2d-0a4f-2c6a-a1803e492650}">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Refill cylinder after booth outputs are off .
        </summary>
        <remarks>
                <note type="warning">
                    The call of this method will be effective only when called AFTER the initialization of the instance of given TcoCylinder and methods like AbortMoveHone,SuspendMoveHom...
                </note>
        </remarks>
    </docu>
~*)
METHOD Refill : BOOL
VAR_INPUT
    (*~
    <docu>
        <summary>
            Time of refill cylinder after aborting or suspending
        </summary>
    </docu>
    ~*)
    inRefillTime : TIME;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_refillTimer(In := inoToHomePos XOR inoToWorkPos, Pt := T#49D);
_config.TimeToRefill := inRefillTime;

IF _refillTimer.ET > T#0MS AND _refillTimer.ET < _config.TimeToRefill AND _config.TimeToRefill <> T#0S THEN
    _toHomePos := TRUE;
    _toWorkPos := TRUE;
END_IF;

SUPER^(inoAtHomePos1 := inoAtHomePos1,
    inoAtHomePos2 := inoAtHomePos2,
    inoAtWorkPos1 := inoAtWorkPos1,
    inoAtWorkPos2 := inoAtWorkPos2,
    inoToHomePos := inoToHomePos,
    inoToWorkPos := inoToWorkPos);]]></ST>
      </Implementation>
    </Method>
    <Property Name="Status" Id="{14354179-2907-0546-2d60-506ecbcc0c89}">
      <Declaration><![CDATA[PROPERTY Status : REFERENCE TO TcoCylinderStatus]]></Declaration>
      <Get Name="Get" Id="{67c4b28e-7754-082e-1e68-5a3a919be57e}">
        <Declaration><![CDATA[VAR
END_VAR]]></Declaration>
        <Implementation>
          <ST><![CDATA[Status REF= _status;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="StopTask" Id="{7592b9f6-09f1-0fb3-2ad8-48f8216ab6d9}" FolderPath="Tasks\">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Gets the `StopTask` task that controls the stopping of the cyclinder.
        </summary>
    </docu>
~*)
PROPERTY StopTask : TcoCore.ITcoTask]]></Declaration>
      <Get Name="Get" Id="{1e74e75e-f0d9-0c44-018a-eca64565d4ad}">
        <Declaration><![CDATA[VAR
END_VAR]]></Declaration>
        <Implementation>
          <ST><![CDATA[StopTask := _stopDefault;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="SuspendMoveHome" Id="{3aa84ed5-91d2-0f11-1930-a0514293ca17}" FolderPath="Suspend\">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Suspend the movement to home position when the condition is 'true'. Task is still busy
        </summary>
        <remarks>
                <note type="warning">
                    The call of this method will be effective only when called AFTER the initialization of the instance of given TcoCylinder.
                </note>
        </remarks>
    </docu>
~*)
METHOD SuspendMoveHome : BOOL
VAR_IN_OUT
    (*~
    <docu>
        <summary>
            Condition to abort the movement of the cylinder.
        </summary>
    </docu>
    ~*)
    inoDisableCondition : BOOL;
END_VAR
VAR
    _signalInfo : TcoSignalInfo;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (_toHomePos OR _moveHomeDefault.Busy) AND inoDisableCondition THEN
    _signalInfo.GetSignalInfo(SIZEOF(inoDisableCondition), ADR(inoDisableCondition));
    Messenger.Warning(CONCAT('<#Movement suspended due to#> : ', _signalInfo.SymbolPath));
    _toHomePos := FALSE;

    IF (__ISVALIDREF(THIS^.inoToHomePos)) THEN
        THIS^.inoToHomePos := FALSE;
    END_IF;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="SuspendMoveHomeExpression" Id="{7c03b395-6414-052c-35f1-68a17ac74779}" FolderPath="Suspend\">
      <Declaration><![CDATA[METHOD SuspendMoveHomeExpression : BOOL
VAR_INPUT
    inDisableCondition : BOOL;
    inMessage : STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (_toHomePos OR _moveHomeDefault.Busy) AND inDisableCondition THEN
    Messenger.Warning(CONCAT('<#Movement suspended due to#> : ', inMessage));
    _toHomePos := FALSE;

    IF (__ISVALIDREF(THIS^.inoToHomePos)) THEN
        THIS^.inoToHomePos := FALSE;
    END_IF;
END_IF;]]></ST>
      </Implementation>
    </Method>
    <Method Name="SuspendMoveHomeInverted" Id="{ec3e08c1-bb7e-0c1a-2638-d69f95238533}" FolderPath="Suspend\">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Suspend the movement to home position when the condition is NOT 'true'. Task is still busy
        </summary>
        <remarks>
                <note type="warning">
                    The call of this method will be effective only when called AFTER the initialization of the instance of given TcoCylinder.
                </note>
        </remarks>
    </docu>
~*)
METHOD SuspendMoveHomeInverted : BOOL
VAR_IN_OUT
    (*~
    <docu>
        <summary>
            Condition to abort the movement of the cylinder.
        </summary>
    </docu>
    ~*)
    inoDisableCondition : BOOL;
END_VAR
VAR
    _signalInfo : TcoSignalInfo;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (_toHomePos OR _moveHomeDefault.Busy) AND NOT inoDisableCondition THEN
    _signalInfo.GetSignalInfo(SIZEOF(inoDisableCondition), ADR(inoDisableCondition));
    Messenger.Warning(CONCAT('<#Movement suspended due to NOT#> : ', _signalInfo.SymbolPath));
    _toHomePos := FALSE;

    IF (__ISVALIDREF(THIS^.inoToHomePos)) THEN
        THIS^.inoToHomePos := FALSE;
    END_IF;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="SuspendMoveWork" Id="{3aa37d48-5017-0f07-0fb5-2874354f9258}" FolderPath="Suspend\">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Suspend the movement to work position when the condition is 'true'. Task is still bussy
        </summary>
        <remarks>
                <note type="warning">
                    The call of this method will be effective only when called AFTER the initialization of the instance of given TcoCylinder.
                </note>
        </remarks>
    </docu>
~*)
METHOD SuspendMoveWork : BOOL
VAR_IN_OUT
    (*~
        <docu>
            <summary>
                Condition to abort the movement of the cylinder.
            </summary>
        </docu>
    ~*)
    inoDisableCondition : BOOL;
END_VAR
VAR
    _signalInfo : TcoSignalInfo;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (_toWorkPos OR _moveWorkDefault.Busy) AND inoDisableCondition THEN
    _signalInfo.GetSignalInfo(SIZEOF(inoDisableCondition), ADR(inoDisableCondition));
    Messenger.Warning(CONCAT('<#Movement suspended due to#> : ', _signalInfo.SymbolPath));
    _toWorkPos := FALSE;

    IF (__ISVALIDREF(THIS^.inoToWorkPos)) THEN
        THIS^.inoToWorkPos := FALSE;
    END_IF;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="SuspendMoveWorkExpression" Id="{3ca9f409-76d6-000b-3a1c-519eb1244a89}" FolderPath="Suspend\">
      <Declaration><![CDATA[METHOD SuspendMoveWorkExpression : BOOL
VAR_INPUT
    inDisableCondition : BOOL;
    inMessage : STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (_toWorkPos OR _moveWorkDefault.Busy) AND inDisableCondition THEN
    Messenger.Warning(CONCAT('<#Movement suspended due to#> : ', inMessage));
    _toWorkPos := FALSE;

    IF (__ISVALIDREF(THIS^.inoToWorkPos)) THEN
        THIS^.inoToWorkPos := FALSE;
    END_IF;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="SuspendMoveWorkInverted" Id="{092cfae4-2a01-0ef4-2d92-0c996cdf02aa}" FolderPath="Suspend\">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Suspend the movement to work position when the condition is NOT 'true'. Task is still bussy
        </summary>
        <remarks>
                <note type="warning">
                    The call of this method will be effective only when called AFTER the initialization of the instance of given TcoCylinder.
                </note>
        </remarks>
    </docu>
~*)
METHOD SuspendMoveWorkInverted : BOOL
VAR_IN_OUT
    (*~
        <docu>
            <summary>
                Condition to abort the movement of the cylinder.
            </summary>
        </docu>
    ~*)
    inoDisableCondition : BOOL;
END_VAR
VAR
    _signalInfo : TcoSignalInfo;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (_toWorkPos OR _moveWorkDefault.Busy) AND NOT inoDisableCondition THEN
    _signalInfo.GetSignalInfo(SIZEOF(inoDisableCondition), ADR(inoDisableCondition));
    Messenger.Warning(CONCAT('<#Movement suspended due to NOT#> : ', _signalInfo.SymbolPath));
    _toWorkPos := FALSE;

    IF (__ISVALIDREF(THIS^.inoToWorkPos)) THEN
        THIS^.inoToWorkPos := FALSE;
    END_IF;
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>